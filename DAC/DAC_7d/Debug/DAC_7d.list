
DAC_7d.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cec  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08003ed8  08003ed8  00013ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d0  080040d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080040d0  080040d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040d0  080040d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040d4  080040d4  000140d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000000c  080040e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080040e4  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a858  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcc  00000000  00000000  0002a88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  0002cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019607  00000000  00000000  0002d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bedc  00000000  00000000  00046faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009761a  00000000  00000000  00052e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea4a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003184  00000000  00000000  000ea4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08003ebc 	.word	0x08003ebc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08003ebc 	.word	0x08003ebc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr
 8000b64:	0000      	movs	r0, r0
	...

08000b68 <get_sinvalue>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t sin_value[NUMBER_SAMPLE];
uint32_t sin_val[NUMBER_SAMPLE];
void get_sinvalue(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	for(int x = 0; x < 100; x++){
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	e034      	b.n	8000bde <get_sinvalue+0x76>
		sin_value[x]=(sin(x*2*PI/NUMBER_SAMPLE)+2.9)*(565/2);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fca7 	bl	80004cc <__aeabi_i2d>
 8000b7e:	a31c      	add	r3, pc, #112	; (adr r3, 8000bf0 <get_sinvalue+0x88>)
 8000b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b84:	f7ff fd0c 	bl	80005a0 <__aeabi_dmul>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	4610      	mov	r0, r2
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <get_sinvalue+0xa0>)
 8000b96:	f7ff fe2d 	bl	80007f4 <__aeabi_ddiv>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f002 f989 	bl	8002eb8 <sin>
 8000ba6:	a314      	add	r3, pc, #80	; (adr r3, 8000bf8 <get_sinvalue+0x90>)
 8000ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bac:	f7ff fb42 	bl	8000234 <__adddf3>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	a311      	add	r3, pc, #68	; (adr r3, 8000c00 <get_sinvalue+0x98>)
 8000bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbe:	f7ff fcef 	bl	80005a0 <__aeabi_dmul>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f7ff ffab 	bl	8000b24 <__aeabi_d2uiz>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	490e      	ldr	r1, [pc, #56]	; (8000c0c <get_sinvalue+0xa4>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int x = 0; x < 100; x++){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b63      	cmp	r3, #99	; 0x63
 8000be2:	ddc7      	ble.n	8000b74 <get_sinvalue+0xc>
	}
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	3fa6defc 	.word	0x3fa6defc
 8000bf4:	400921fb 	.word	0x400921fb
 8000bf8:	33333333 	.word	0x33333333
 8000bfc:	40073333 	.word	0x40073333
 8000c00:	00000000 	.word	0x00000000
 8000c04:	4071a000 	.word	0x4071a000
 8000c08:	40590000 	.word	0x40590000
 8000c0c:	20000028 	.word	0x20000028

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c16:	f000 fa41 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1a:	f000 f81d 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 f8f5 	bl	8000e0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c22:	f000 f8d5 	bl	8000dd0 <MX_DMA_Init>
  MX_DAC_Init();
 8000c26:	f000 f85d 	bl	8000ce4 <MX_DAC_Init>
  MX_TIM2_Init();
 8000c2a:	f000 f885 	bl	8000d38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  get_sinvalue();
 8000c2e:	f7ff ff9b 	bl	8000b68 <get_sinvalue>
  HAL_TIM_Base_Start(&htim2);
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <main+0x3c>)
 8000c34:	f001 fe7c 	bl	8002930 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2364      	movs	r3, #100	; 0x64
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <main+0x40>)
 8000c40:	2100      	movs	r1, #0
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <main+0x44>)
 8000c44:	f000 fbbc 	bl	80013c0 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <main+0x38>
 8000c4a:	bf00      	nop
 8000c4c:	200003a0 	.word	0x200003a0
 8000c50:	20000210 	.word	0x20000210
 8000c54:	200001fc 	.word	0x200001fc

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b090      	sub	sp, #64	; 0x40
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0318 	add.w	r3, r7, #24
 8000c62:	2228      	movs	r2, #40	; 0x28
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 f91e 	bl	8002ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c96:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fa0d 	bl	80020c0 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cac:	f000 f8dc 	bl	8000e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fc78 	bl	80025c0 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cd6:	f000 f8c7 	bl	8000e68 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3740      	adds	r7, #64	; 0x40
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cea:	463b      	mov	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_DAC_Init+0x4c>)
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <MX_DAC_Init+0x50>)
 8000cf6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_DAC_Init+0x4c>)
 8000cfa:	f000 fb3e 	bl	800137a <HAL_DAC_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d04:	f000 f8b0 	bl	8000e68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d08:	2324      	movs	r3, #36	; 0x24
 8000d0a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_DAC_Init+0x4c>)
 8000d18:	f000 fc29 	bl	800156e <HAL_DAC_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d22:	f000 f8a1 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200001fc 	.word	0x200001fc
 8000d34:	40007400 	.word	0x40007400

08000d38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_TIM2_Init+0x94>)
 8000d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_TIM2_Init+0x94>)
 8000d5e:	2247      	movs	r2, #71	; 0x47
 8000d60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM2_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 507;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_TIM2_Init+0x94>)
 8000d6a:	f240 12fb 	movw	r2, #507	; 0x1fb
 8000d6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_TIM2_Init+0x94>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_TIM2_Init+0x94>)
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d7c:	4813      	ldr	r0, [pc, #76]	; (8000dcc <MX_TIM2_Init+0x94>)
 8000d7e:	f001 fd87 	bl	8002890 <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d88:	f000 f86e 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4619      	mov	r1, r3
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <MX_TIM2_Init+0x94>)
 8000d9a:	f001 fe21 	bl	80029e0 <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000da4:	f000 f860 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000da8:	2320      	movs	r3, #32
 8000daa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db0:	463b      	mov	r3, r7
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_TIM2_Init+0x94>)
 8000db6:	f001 ffe7 	bl	8002d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dc0:	f000 f852 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200003a0 	.word	0x200003a0

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_DMA_Init+0x38>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <MX_DMA_Init+0x38>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_DMA_Init+0x38>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	203a      	movs	r0, #58	; 0x3a
 8000df4:	f000 fa8b 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000df8:	203a      	movs	r0, #58	; 0x3a
 8000dfa:	f000 faa4 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_GPIO_Init+0x58>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <MX_GPIO_Init+0x58>)
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	6193      	str	r3, [r2, #24]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_GPIO_Init+0x58>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f003 0320 	and.w	r3, r3, #32
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_GPIO_Init+0x58>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <MX_GPIO_Init+0x58>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_GPIO_Init+0x58>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_GPIO_Init+0x58>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <MX_GPIO_Init+0x58>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <MX_GPIO_Init+0x58>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_MspInit+0x60>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_MspInit+0x60>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a28      	ldr	r2, [pc, #160]	; (8000f94 <HAL_DAC_MspInit+0xbc>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d149      	bne.n	8000f8c <HAL_DAC_MspInit+0xb4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <HAL_DAC_MspInit+0xc0>)
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <HAL_DAC_MspInit+0xc0>)
 8000efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f02:	61d3      	str	r3, [r2, #28]
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_DAC_MspInit+0xc0>)
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <HAL_DAC_MspInit+0xc0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <HAL_DAC_MspInit+0xc0>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <HAL_DAC_MspInit+0xc0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	4819      	ldr	r0, [pc, #100]	; (8000f9c <HAL_DAC_MspInit+0xc4>)
 8000f38:	f000 ff2e 	bl	8001d98 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_DAC_MspInit+0xcc>)
 8000f40:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f44:	2210      	movs	r2, #16
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f62:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f66:	2220      	movs	r2, #32
 8000f68:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f72:	f000 fbd1 	bl	8001718 <HAL_DMA_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_DAC_MspInit+0xa8>
    {
      Error_Handler();
 8000f7c:	f7ff ff74 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_DAC_MspInit+0xc8>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40007400 	.word	0x40007400
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	200001b8 	.word	0x200001b8
 8000fa4:	40020430 	.word	0x40020430

08000fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_TIM_Base_MspInit+0x34>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_TIM_Base_MspInit+0x34>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_TIM_Base_MspInit+0x34>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001026:	f000 f87f 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <DMA2_Channel3_IRQHandler+0x10>)
 8001036:	f000 fc45 	bl	80018c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001b8 	.word	0x200001b8

08001044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001076:	f7ff ffe5 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107a:	f001 fef1 	bl	8002e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107e:	f7ff fdc7 	bl	8000c10 <main>
  bx lr
 8001082:	4770      	bx	lr
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800108c:	080040d8 	.word	0x080040d8
  ldr r2, =_sbss
 8001090:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001094:	200003ec 	.word	0x200003ec

08001098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_2_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x28>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x28>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f923 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fedc 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f93b 	bl	8001362 <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 f903 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x1c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a03      	ldr	r2, [pc, #12]	; (8001148 <HAL_IncTick+0x20>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000008 	.word	0x20000008
 8001148:	200003e8 	.word	0x200003e8

0800114c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <HAL_GetTick+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	200003e8 	.word	0x200003e8

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4906      	ldr	r1, [pc, #24]	; (80011f8 <__NVIC_EnableIRQ+0x34>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff90 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff2d 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff42 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff90 	bl	8001250 <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5f 	bl	80011fc <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff35 	bl	80011c4 <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e014      	b.n	80013b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff fd9b 	bl	8000ed8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2202      	movs	r2, #2
 80013a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	795b      	ldrb	r3, [r3, #5]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_DAC_Start_DMA+0x1e>
 80013da:	2302      	movs	r3, #2
 80013dc:	e09b      	b.n	8001516 <HAL_DAC_Start_DMA+0x156>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2202      	movs	r2, #2
 80013e8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d12f      	bne.n	8001450 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <HAL_DAC_Start_DMA+0x160>)
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a49      	ldr	r2, [pc, #292]	; (8001524 <HAL_DAC_Start_DMA+0x164>)
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a48      	ldr	r2, [pc, #288]	; (8001528 <HAL_DAC_Start_DMA+0x168>)
 8001406:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001416:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	2b08      	cmp	r3, #8
 800141c:	d013      	beq.n	8001446 <HAL_DAC_Start_DMA+0x86>
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	2b08      	cmp	r3, #8
 8001422:	d845      	bhi.n	80014b0 <HAL_DAC_Start_DMA+0xf0>
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_DAC_Start_DMA+0x72>
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d005      	beq.n	800143c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001430:	e03e      	b.n	80014b0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3308      	adds	r3, #8
 8001438:	613b      	str	r3, [r7, #16]
        break;
 800143a:	e03c      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	330c      	adds	r3, #12
 8001442:	613b      	str	r3, [r7, #16]
        break;
 8001444:	e037      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3310      	adds	r3, #16
 800144c:	613b      	str	r3, [r7, #16]
        break;
 800144e:	e032      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a35      	ldr	r2, [pc, #212]	; (800152c <HAL_DAC_Start_DMA+0x16c>)
 8001456:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a34      	ldr	r2, [pc, #208]	; (8001530 <HAL_DAC_Start_DMA+0x170>)
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4a33      	ldr	r2, [pc, #204]	; (8001534 <HAL_DAC_Start_DMA+0x174>)
 8001466:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001476:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	2b08      	cmp	r3, #8
 800147c:	d013      	beq.n	80014a6 <HAL_DAC_Start_DMA+0xe6>
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d817      	bhi.n	80014b4 <HAL_DAC_Start_DMA+0xf4>
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_DAC_Start_DMA+0xd2>
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d005      	beq.n	800149c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001490:	e010      	b.n	80014b4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3314      	adds	r3, #20
 8001498:	613b      	str	r3, [r7, #16]
        break;
 800149a:	e00c      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3318      	adds	r3, #24
 80014a2:	613b      	str	r3, [r7, #16]
        break;
 80014a4:	e007      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	331c      	adds	r3, #28
 80014ac:	613b      	str	r3, [r7, #16]
        break;
 80014ae:	e002      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80014b0:	bf00      	nop
 80014b2:	e000      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80014b4:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d109      	bne.n	80014d0 <HAL_DAC_Start_DMA+0x110>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6898      	ldr	r0, [r3, #8]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	f000 f99d 	bl	8001804 <HAL_DMA_Start_IT>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	e008      	b.n	80014e2 <HAL_DAC_Start_DMA+0x122>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	68d8      	ldr	r0, [r3, #12]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	f000 f993 	bl	8001804 <HAL_DMA_Start_IT>
 80014de:	4603      	mov	r3, r0
 80014e0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_DAC_Start_DMA+0x148>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2201      	movs	r2, #1
 80014fc:	409a      	lsls	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e005      	b.n	8001514 <HAL_DAC_Start_DMA+0x154>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f043 0204 	orr.w	r2, r3, #4
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001514:	7dfb      	ldrb	r3, [r7, #23]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	0800160b 	.word	0x0800160b
 8001524:	0800162d 	.word	0x0800162d
 8001528:	08001649 	.word	0x08001649
 800152c:	080016ad 	.word	0x080016ad
 8001530:	080016cf 	.word	0x080016cf
 8001534:	080016eb 	.word	0x080016eb

08001538 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800156e:	b480      	push	{r7}
 8001570:	b087      	sub	sp, #28
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	795b      	ldrb	r3, [r3, #5]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_DAC_ConfigChannel+0x18>
 8001582:	2302      	movs	r3, #2
 8001584:	e03c      	b.n	8001600 <HAL_DAC_ConfigChannel+0x92>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2201      	movs	r2, #1
 800158a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2202      	movs	r2, #2
 8001590:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4013      	ands	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6819      	ldr	r1, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	22c0      	movs	r2, #192	; 0xc0
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43da      	mvns	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	400a      	ands	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff ff8d 	bl	8001538 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	711a      	strb	r2, [r3, #4]
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff ff85 	bl	800154a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f043 0204 	orr.w	r2, r3, #4
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff ff7a 	bl	800155c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	711a      	strb	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7ff ffdb 	bl	8001676 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2201      	movs	r2, #1
 80016c4:	711a      	strb	r2, [r3, #4]
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff ffd3 	bl	8001688 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	f043 0204 	orr.w	r2, r3, #4
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff ffc8 	bl	800169a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2201      	movs	r2, #1
 800170e:	711a      	strb	r2, [r3, #4]
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e059      	b.n	80017e2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_DMA_Init+0xd4>)
 8001736:	429a      	cmp	r2, r3
 8001738:	d80f      	bhi.n	800175a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_DMA_Init+0xd8>)
 8001742:	4413      	add	r3, r2
 8001744:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <HAL_DMA_Init+0xdc>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	009a      	lsls	r2, r3, #2
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_DMA_Init+0xe0>)
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c
 8001758:	e00e      	b.n	8001778 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_DMA_Init+0xe4>)
 8001762:	4413      	add	r3, r2
 8001764:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <HAL_DMA_Init+0xdc>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	009a      	lsls	r2, r3, #2
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a22      	ldr	r2, [pc, #136]	; (8001800 <HAL_DMA_Init+0xe8>)
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800178e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001792:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800179c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40020407 	.word	0x40020407
 80017f0:	bffdfff8 	.word	0xbffdfff8
 80017f4:	cccccccd 	.word	0xcccccccd
 80017f8:	40020000 	.word	0x40020000
 80017fc:	bffdfbf8 	.word	0xbffdfbf8
 8001800:	40020400 	.word	0x40020400

08001804 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_DMA_Start_IT+0x20>
 8001820:	2302      	movs	r3, #2
 8001822:	e04a      	b.n	80018ba <HAL_DMA_Start_IT+0xb6>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001832:	2b01      	cmp	r3, #1
 8001834:	d13a      	bne.n	80018ac <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2202      	movs	r2, #2
 800183a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0201 	bic.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fa6e 	bl	8001d3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 020e 	orr.w	r2, r2, #14
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e00f      	b.n	800189a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0204 	bic.w	r2, r2, #4
 8001888:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 020a 	orr.w	r2, r2, #10
 8001898:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e005      	b.n	80018b8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
 80018b6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	2204      	movs	r2, #4
 80018e2:	409a      	lsls	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80d6 	beq.w	8001a9a <HAL_DMA_IRQHandler+0x1d6>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80d0 	beq.w	8001a9a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0204 	bic.w	r2, r2, #4
 8001916:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b9b      	ldr	r3, [pc, #620]	; (8001b8c <HAL_DMA_IRQHandler+0x2c8>)
 8001920:	429a      	cmp	r2, r3
 8001922:	d958      	bls.n	80019d6 <HAL_DMA_IRQHandler+0x112>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a99      	ldr	r2, [pc, #612]	; (8001b90 <HAL_DMA_IRQHandler+0x2cc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d04f      	beq.n	80019ce <HAL_DMA_IRQHandler+0x10a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a98      	ldr	r2, [pc, #608]	; (8001b94 <HAL_DMA_IRQHandler+0x2d0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d048      	beq.n	80019ca <HAL_DMA_IRQHandler+0x106>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a96      	ldr	r2, [pc, #600]	; (8001b98 <HAL_DMA_IRQHandler+0x2d4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d040      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x100>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a95      	ldr	r2, [pc, #596]	; (8001b9c <HAL_DMA_IRQHandler+0x2d8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d038      	beq.n	80019be <HAL_DMA_IRQHandler+0xfa>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a93      	ldr	r2, [pc, #588]	; (8001ba0 <HAL_DMA_IRQHandler+0x2dc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d030      	beq.n	80019b8 <HAL_DMA_IRQHandler+0xf4>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a92      	ldr	r2, [pc, #584]	; (8001ba4 <HAL_DMA_IRQHandler+0x2e0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d028      	beq.n	80019b2 <HAL_DMA_IRQHandler+0xee>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a89      	ldr	r2, [pc, #548]	; (8001b8c <HAL_DMA_IRQHandler+0x2c8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d020      	beq.n	80019ac <HAL_DMA_IRQHandler+0xe8>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a8e      	ldr	r2, [pc, #568]	; (8001ba8 <HAL_DMA_IRQHandler+0x2e4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d019      	beq.n	80019a8 <HAL_DMA_IRQHandler+0xe4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a8c      	ldr	r2, [pc, #560]	; (8001bac <HAL_DMA_IRQHandler+0x2e8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d012      	beq.n	80019a4 <HAL_DMA_IRQHandler+0xe0>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a8b      	ldr	r2, [pc, #556]	; (8001bb0 <HAL_DMA_IRQHandler+0x2ec>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00a      	beq.n	800199e <HAL_DMA_IRQHandler+0xda>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a89      	ldr	r2, [pc, #548]	; (8001bb4 <HAL_DMA_IRQHandler+0x2f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d102      	bne.n	8001998 <HAL_DMA_IRQHandler+0xd4>
 8001992:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001996:	e01b      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 8001998:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800199c:	e018      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 800199e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a2:	e015      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 80019a4:	2340      	movs	r3, #64	; 0x40
 80019a6:	e013      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 80019a8:	2304      	movs	r3, #4
 80019aa:	e011      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 80019ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019b0:	e00e      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 80019b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b6:	e00b      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 80019b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019bc:	e008      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 80019be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c2:	e005      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 80019c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c8:	e002      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 80019ca:	2340      	movs	r3, #64	; 0x40
 80019cc:	e000      	b.n	80019d0 <HAL_DMA_IRQHandler+0x10c>
 80019ce:	2304      	movs	r3, #4
 80019d0:	4a79      	ldr	r2, [pc, #484]	; (8001bb8 <HAL_DMA_IRQHandler+0x2f4>)
 80019d2:	6053      	str	r3, [r2, #4]
 80019d4:	e057      	b.n	8001a86 <HAL_DMA_IRQHandler+0x1c2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6d      	ldr	r2, [pc, #436]	; (8001b90 <HAL_DMA_IRQHandler+0x2cc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04f      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x1bc>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a6b      	ldr	r2, [pc, #428]	; (8001b94 <HAL_DMA_IRQHandler+0x2d0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d048      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x1b8>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6a      	ldr	r2, [pc, #424]	; (8001b98 <HAL_DMA_IRQHandler+0x2d4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d040      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x1b2>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a68      	ldr	r2, [pc, #416]	; (8001b9c <HAL_DMA_IRQHandler+0x2d8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d038      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x1ac>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a67      	ldr	r2, [pc, #412]	; (8001ba0 <HAL_DMA_IRQHandler+0x2dc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d030      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x1a6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a65      	ldr	r2, [pc, #404]	; (8001ba4 <HAL_DMA_IRQHandler+0x2e0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d028      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x1a0>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5d      	ldr	r2, [pc, #372]	; (8001b8c <HAL_DMA_IRQHandler+0x2c8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d020      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x19a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a61      	ldr	r2, [pc, #388]	; (8001ba8 <HAL_DMA_IRQHandler+0x2e4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x196>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a60      	ldr	r2, [pc, #384]	; (8001bac <HAL_DMA_IRQHandler+0x2e8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d012      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x192>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a5e      	ldr	r2, [pc, #376]	; (8001bb0 <HAL_DMA_IRQHandler+0x2ec>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00a      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x18c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a5d      	ldr	r2, [pc, #372]	; (8001bb4 <HAL_DMA_IRQHandler+0x2f0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d102      	bne.n	8001a4a <HAL_DMA_IRQHandler+0x186>
 8001a44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a48:	e01b      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a4e:	e018      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a54:	e015      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a56:	2340      	movs	r3, #64	; 0x40
 8001a58:	e013      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e011      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a62:	e00e      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a68:	e00b      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a6e:	e008      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a74:	e005      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7a:	e002      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a7c:	2340      	movs	r3, #64	; 0x40
 8001a7e:	e000      	b.n	8001a82 <HAL_DMA_IRQHandler+0x1be>
 8001a80:	2304      	movs	r3, #4
 8001a82:	4a4e      	ldr	r2, [pc, #312]	; (8001bbc <HAL_DMA_IRQHandler+0x2f8>)
 8001a84:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8136 	beq.w	8001cfc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a98:	e130      	b.n	8001cfc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80f8 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x3d8>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 80f2 	beq.w	8001c9c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10b      	bne.n	8001ade <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 020a 	bic.w	r2, r2, #10
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <HAL_DMA_IRQHandler+0x2c8>)
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d973      	bls.n	8001bd2 <HAL_DMA_IRQHandler+0x30e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a28      	ldr	r2, [pc, #160]	; (8001b90 <HAL_DMA_IRQHandler+0x2cc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d06a      	beq.n	8001bca <HAL_DMA_IRQHandler+0x306>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_DMA_IRQHandler+0x2d0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d063      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x302>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <HAL_DMA_IRQHandler+0x2d4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d05b      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x2fc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <HAL_DMA_IRQHandler+0x2d8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d038      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x2c0>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <HAL_DMA_IRQHandler+0x2dc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d030      	beq.n	8001b7e <HAL_DMA_IRQHandler+0x2ba>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <HAL_DMA_IRQHandler+0x2e0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d028      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x2b4>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_DMA_IRQHandler+0x2c8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d020      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x2ae>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <HAL_DMA_IRQHandler+0x2e4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d019      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x2aa>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <HAL_DMA_IRQHandler+0x2e8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x2a6>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_DMA_IRQHandler+0x2ec>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00a      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x2a0>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_DMA_IRQHandler+0x2f0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d102      	bne.n	8001b5e <HAL_DMA_IRQHandler+0x29a>
 8001b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5c:	e036      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001b5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b62:	e033      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b68:	e030      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	e02e      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e02c      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b76:	e029      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001b78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b7c:	e026      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b82:	e023      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b88:	e020      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001b8a:	bf00      	nop
 8001b8c:	40020080 	.word	0x40020080
 8001b90:	40020008 	.word	0x40020008
 8001b94:	4002001c 	.word	0x4002001c
 8001b98:	40020030 	.word	0x40020030
 8001b9c:	40020044 	.word	0x40020044
 8001ba0:	40020058 	.word	0x40020058
 8001ba4:	4002006c 	.word	0x4002006c
 8001ba8:	40020408 	.word	0x40020408
 8001bac:	4002041c 	.word	0x4002041c
 8001bb0:	40020430 	.word	0x40020430
 8001bb4:	40020444 	.word	0x40020444
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc4:	e002      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_IRQHandler+0x308>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	4a4e      	ldr	r2, [pc, #312]	; (8001d08 <HAL_DMA_IRQHandler+0x444>)
 8001bce:	6053      	str	r3, [r2, #4]
 8001bd0:	e057      	b.n	8001c82 <HAL_DMA_IRQHandler+0x3be>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a4d      	ldr	r2, [pc, #308]	; (8001d0c <HAL_DMA_IRQHandler+0x448>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d04f      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x3b8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_DMA_IRQHandler+0x44c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d048      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x3b4>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_DMA_IRQHandler+0x450>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d040      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x3ae>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_DMA_IRQHandler+0x454>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d038      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x3a8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a47      	ldr	r2, [pc, #284]	; (8001d1c <HAL_DMA_IRQHandler+0x458>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d030      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x3a2>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a45      	ldr	r2, [pc, #276]	; (8001d20 <HAL_DMA_IRQHandler+0x45c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d028      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x39c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a44      	ldr	r2, [pc, #272]	; (8001d24 <HAL_DMA_IRQHandler+0x460>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d020      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x396>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a42      	ldr	r2, [pc, #264]	; (8001d28 <HAL_DMA_IRQHandler+0x464>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x392>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a41      	ldr	r2, [pc, #260]	; (8001d2c <HAL_DMA_IRQHandler+0x468>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d012      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x38e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a3f      	ldr	r2, [pc, #252]	; (8001d30 <HAL_DMA_IRQHandler+0x46c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00a      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x388>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3e      	ldr	r2, [pc, #248]	; (8001d34 <HAL_DMA_IRQHandler+0x470>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x382>
 8001c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c44:	e01b      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4a:	e018      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c50:	e015      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c52:	2320      	movs	r3, #32
 8001c54:	e013      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e011      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5e:	e00e      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c64:	e00b      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6a:	e008      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c70:	e005      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c76:	e002      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c78:	2320      	movs	r3, #32
 8001c7a:	e000      	b.n	8001c7e <HAL_DMA_IRQHandler+0x3ba>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	4a2e      	ldr	r2, [pc, #184]	; (8001d38 <HAL_DMA_IRQHandler+0x474>)
 8001c80:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d034      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c9a:	e02f      	b.n	8001cfc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d028      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x43a>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d023      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 020e 	bic.w	r2, r2, #14
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
    }
  }
  return;
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
}
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40020008 	.word	0x40020008
 8001d10:	4002001c 	.word	0x4002001c
 8001d14:	40020030 	.word	0x40020030
 8001d18:	40020044 	.word	0x40020044
 8001d1c:	40020058 	.word	0x40020058
 8001d20:	4002006c 	.word	0x4002006c
 8001d24:	40020080 	.word	0x40020080
 8001d28:	40020408 	.word	0x40020408
 8001d2c:	4002041c 	.word	0x4002041c
 8001d30:	40020430 	.word	0x40020430
 8001d34:	40020444 	.word	0x40020444
 8001d38:	40020000 	.word	0x40020000

08001d3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d108      	bne.n	8001d7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d7a:	e007      	b.n	8001d8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	60da      	str	r2, [r3, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b08b      	sub	sp, #44	; 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	e179      	b.n	80020a0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dac:	2201      	movs	r2, #1
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8168 	bne.w	800209a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4aa0      	ldr	r2, [pc, #640]	; (8002050 <HAL_GPIO_Init+0x2b8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d05e      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a9e      	ldr	r2, [pc, #632]	; (8002050 <HAL_GPIO_Init+0x2b8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d875      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dda:	4a9e      	ldr	r2, [pc, #632]	; (8002054 <HAL_GPIO_Init+0x2bc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d058      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001de0:	4a9c      	ldr	r2, [pc, #624]	; (8002054 <HAL_GPIO_Init+0x2bc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d86f      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001de6:	4a9c      	ldr	r2, [pc, #624]	; (8002058 <HAL_GPIO_Init+0x2c0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d052      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dec:	4a9a      	ldr	r2, [pc, #616]	; (8002058 <HAL_GPIO_Init+0x2c0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d869      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001df2:	4a9a      	ldr	r2, [pc, #616]	; (800205c <HAL_GPIO_Init+0x2c4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d04c      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001df8:	4a98      	ldr	r2, [pc, #608]	; (800205c <HAL_GPIO_Init+0x2c4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d863      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dfe:	4a98      	ldr	r2, [pc, #608]	; (8002060 <HAL_GPIO_Init+0x2c8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d046      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001e04:	4a96      	ldr	r2, [pc, #600]	; (8002060 <HAL_GPIO_Init+0x2c8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d85d      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d82a      	bhi.n	8001e64 <HAL_GPIO_Init+0xcc>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d859      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <HAL_GPIO_Init+0x80>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e6d 	.word	0x08001e6d
 8001e20:	08001e7f 	.word	0x08001e7f
 8001e24:	08001ec1 	.word	0x08001ec1
 8001e28:	08001ec7 	.word	0x08001ec7
 8001e2c:	08001ec7 	.word	0x08001ec7
 8001e30:	08001ec7 	.word	0x08001ec7
 8001e34:	08001ec7 	.word	0x08001ec7
 8001e38:	08001ec7 	.word	0x08001ec7
 8001e3c:	08001ec7 	.word	0x08001ec7
 8001e40:	08001ec7 	.word	0x08001ec7
 8001e44:	08001ec7 	.word	0x08001ec7
 8001e48:	08001ec7 	.word	0x08001ec7
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ec7 	.word	0x08001ec7
 8001e54:	08001ec7 	.word	0x08001ec7
 8001e58:	08001ec7 	.word	0x08001ec7
 8001e5c:	08001e75 	.word	0x08001e75
 8001e60:	08001e89 	.word	0x08001e89
 8001e64:	4a7f      	ldr	r2, [pc, #508]	; (8002064 <HAL_GPIO_Init+0x2cc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6a:	e02c      	b.n	8001ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e029      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	623b      	str	r3, [r7, #32]
          break;
 8001e7c:	e024      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	3308      	adds	r3, #8
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e01f      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e01a      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e013      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	611a      	str	r2, [r3, #16]
          break;
 8001eb2:	e009      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	615a      	str	r2, [r3, #20]
          break;
 8001ebe:	e003      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          break;
 8001ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d801      	bhi.n	8001ed2 <HAL_GPIO_Init+0x13a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_Init+0x13e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d802      	bhi.n	8001ee4 <HAL_GPIO_Init+0x14c>
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x152>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	3b08      	subs	r3, #8
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	6a39      	ldr	r1, [r7, #32]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	431a      	orrs	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80c1 	beq.w	800209a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f30:	4a4e      	ldr	r2, [pc, #312]	; (800206c <HAL_GPIO_Init+0x2d4>)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a46      	ldr	r2, [pc, #280]	; (8002070 <HAL_GPIO_Init+0x2d8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01f      	beq.n	8001f9c <HAL_GPIO_Init+0x204>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a45      	ldr	r2, [pc, #276]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d019      	beq.n	8001f98 <HAL_GPIO_Init+0x200>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a44      	ldr	r2, [pc, #272]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <HAL_GPIO_Init+0x1fc>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a43      	ldr	r2, [pc, #268]	; (800207c <HAL_GPIO_Init+0x2e4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00d      	beq.n	8001f90 <HAL_GPIO_Init+0x1f8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a42      	ldr	r2, [pc, #264]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d007      	beq.n	8001f8c <HAL_GPIO_Init+0x1f4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a41      	ldr	r2, [pc, #260]	; (8002084 <HAL_GPIO_Init+0x2ec>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d101      	bne.n	8001f88 <HAL_GPIO_Init+0x1f0>
 8001f84:	2305      	movs	r3, #5
 8001f86:	e00a      	b.n	8001f9e <HAL_GPIO_Init+0x206>
 8001f88:	2306      	movs	r3, #6
 8001f8a:	e008      	b.n	8001f9e <HAL_GPIO_Init+0x206>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x206>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x206>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x206>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x206>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fae:	492f      	ldr	r1, [pc, #188]	; (800206c <HAL_GPIO_Init+0x2d4>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	492e      	ldr	r1, [pc, #184]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	492a      	ldr	r1, [pc, #168]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4924      	ldr	r1, [pc, #144]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	4920      	ldr	r1, [pc, #128]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002008:	4013      	ands	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	491a      	ldr	r1, [pc, #104]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	4916      	ldr	r1, [pc, #88]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002030:	4013      	ands	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d025      	beq.n	800208c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4910      	ldr	r1, [pc, #64]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e025      	b.n	800209a <HAL_GPIO_Init+0x302>
 800204e:	bf00      	nop
 8002050:	10320000 	.word	0x10320000
 8002054:	10310000 	.word	0x10310000
 8002058:	10220000 	.word	0x10220000
 800205c:	10210000 	.word	0x10210000
 8002060:	10120000 	.word	0x10120000
 8002064:	10110000 	.word	0x10110000
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00
 8002078:	40011000 	.word	0x40011000
 800207c:	40011400 	.word	0x40011400
 8002080:	40011800 	.word	0x40011800
 8002084:	40011c00 	.word	0x40011c00
 8002088:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_GPIO_Init+0x324>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	43db      	mvns	r3, r3
 8002094:	4909      	ldr	r1, [pc, #36]	; (80020bc <HAL_GPIO_Init+0x324>)
 8002096:	4013      	ands	r3, r2
 8002098:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	3301      	adds	r3, #1
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f47f ae7e 	bne.w	8001dac <HAL_GPIO_Init+0x14>
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	372c      	adds	r7, #44	; 0x2c
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e26c      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8087 	beq.w	80021ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e0:	4b92      	ldr	r3, [pc, #584]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d00c      	beq.n	8002106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ec:	4b8f      	ldr	r3, [pc, #572]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d112      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
 80020f8:	4b8c      	ldr	r3, [pc, #560]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d10b      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002106:	4b89      	ldr	r3, [pc, #548]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d06c      	beq.n	80021ec <HAL_RCC_OscConfig+0x12c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d168      	bne.n	80021ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e246      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x76>
 8002128:	4b80      	ldr	r3, [pc, #512]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a7f      	ldr	r2, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e02e      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x98>
 800213e:	4b7b      	ldr	r3, [pc, #492]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7a      	ldr	r2, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b78      	ldr	r3, [pc, #480]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a77      	ldr	r2, [pc, #476]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e01d      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0xbc>
 8002162:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a71      	ldr	r2, [pc, #452]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6e      	ldr	r2, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 800217c:	4b6b      	ldr	r3, [pc, #428]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6a      	ldr	r2, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a67      	ldr	r2, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe ffd6 	bl	800114c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe ffd2 	bl	800114c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1fa      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe4>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe ffc2 	bl	800114c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe ffbe 	bl	800114c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1e6      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x10c>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d063      	beq.n	80022c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fa:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b08      	cmp	r3, #8
 8002210:	d11c      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d116      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e1ba      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4939      	ldr	r1, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	e03a      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe ff77 	bl	800114c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7fe ff73 	bl	800114c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e19b      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4927      	ldr	r1, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe ff56 	bl	800114c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7fe ff52 	bl	800114c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e17a      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d03a      	beq.n	8002344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d019      	beq.n	800230a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7fe ff36 	bl	800114c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe ff32 	bl	800114c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e15a      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002302:	2001      	movs	r0, #1
 8002304:	f000 faa6 	bl	8002854 <RCC_Delay>
 8002308:	e01c      	b.n	8002344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe ff1c 	bl	800114c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002316:	e00f      	b.n	8002338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe ff18 	bl	800114c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d908      	bls.n	8002338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e140      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	42420000 	.word	0x42420000
 8002334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	4b9e      	ldr	r3, [pc, #632]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e9      	bne.n	8002318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a6 	beq.w	800249e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002356:	4b97      	ldr	r3, [pc, #604]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10d      	bne.n	800237e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	4b94      	ldr	r3, [pc, #592]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a93      	ldr	r2, [pc, #588]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b91      	ldr	r3, [pc, #580]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b8e      	ldr	r3, [pc, #568]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d118      	bne.n	80023bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a8a      	ldr	r2, [pc, #552]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7fe fed9 	bl	800114c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239e:	f7fe fed5 	bl	800114c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0fd      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x312>
 80023c4:	4b7b      	ldr	r3, [pc, #492]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e02d      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x334>
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	4b73      	ldr	r3, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a72      	ldr	r2, [pc, #456]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	e01c      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_OscConfig+0x356>
 80023fc:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a6c      	ldr	r2, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e00b      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a63      	ldr	r2, [pc, #396]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe fe89 	bl	800114c <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fe85 	bl	800114c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0ab      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ee      	beq.n	800243e <HAL_RCC_OscConfig+0x37e>
 8002460:	e014      	b.n	800248c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe fe73 	bl	800114c <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fe6f 	bl	800114c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e095      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8081 	beq.w	80025aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a8:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d061      	beq.n	8002578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d146      	bne.n	800254a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe fe43 	bl	800114c <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe fe3f 	bl	800114c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e067      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	492d      	ldr	r1, [pc, #180]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a19      	ldr	r1, [r3, #32]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	430b      	orrs	r3, r1
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fe13 	bl	800114c <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fe0f 	bl	800114c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e037      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x46a>
 8002548:	e02f      	b.n	80025aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fdfc 	bl	800114c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fdf8 	bl	800114c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e020      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x498>
 8002576:	e018      	b.n	80025aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e013      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	429a      	cmp	r2, r3
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	42420060 	.word	0x42420060

080025c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0d0      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4965      	ldr	r1, [pc, #404]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002626:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800263e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	494d      	ldr	r1, [pc, #308]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d040      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d115      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e07f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e073      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06b      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7fe fd4c 	bl	800114c <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7fe fd48 	bl	800114c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e053      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d210      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4922      	ldr	r1, [pc, #136]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e032      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4916      	ldr	r1, [pc, #88]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274e:	f000 f821 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002752:	4602      	mov	r2, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	490a      	ldr	r1, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1cc>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fcaa 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40022000 	.word	0x40022000
 8002784:	40021000 	.word	0x40021000
 8002788:	08003ee8 	.word	0x08003ee8
 800278c:	20000000 	.word	0x20000000
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	b490      	push	{r4, r7}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb0>)
 800279c:	1d3c      	adds	r4, r7, #4
 800279e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a4:	f240 2301 	movw	r3, #513	; 0x201
 80027a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x40>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d003      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x46>
 80027d2:	e02d      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d6:	623b      	str	r3, [r7, #32]
      break;
 80027d8:	e02d      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e6:	4413      	add	r3, r2
 80027e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0c5b      	lsrs	r3, r3, #17
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002806:	4413      	add	r3, r2
 8002808:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800280c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a0e      	ldr	r2, [pc, #56]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002812:	fb02 f203 	mul.w	r2, r2, r3
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	e004      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	623b      	str	r3, [r7, #32]
      break;
 800282e:	e002      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002832:	623b      	str	r3, [r7, #32]
      break;
 8002834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002836:	6a3b      	ldr	r3, [r7, #32]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc90      	pop	{r4, r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	08003ed8 	.word	0x08003ed8
 8002848:	40021000 	.word	0x40021000
 800284c:	007a1200 	.word	0x007a1200
 8002850:	003d0900 	.word	0x003d0900

08002854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <RCC_Delay+0x34>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <RCC_Delay+0x38>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0a5b      	lsrs	r3, r3, #9
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002870:	bf00      	nop
  }
  while (Delay --);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	60fa      	str	r2, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f9      	bne.n	8002870 <RCC_Delay+0x1c>
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000000 	.word	0x20000000
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e041      	b.n	8002926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe fb76 	bl	8000fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 f94a 	bl	8002b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d001      	beq.n	8002948 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e03c      	b.n	80029c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_TIM_Base_Start+0x9c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d018      	beq.n	800298c <HAL_TIM_Base_Start+0x5c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_TIM_Base_Start+0xa0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_TIM_Base_Start+0x5c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296c:	d00e      	beq.n	800298c <HAL_TIM_Base_Start+0x5c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_TIM_Base_Start+0xa4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_TIM_Base_Start+0x5c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <HAL_TIM_Base_Start+0xa8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_TIM_Base_Start+0x5c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a15      	ldr	r2, [pc, #84]	; (80029dc <HAL_TIM_Base_Start+0xac>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b06      	cmp	r3, #6
 800299c:	d010      	beq.n	80029c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ae:	e007      	b.n	80029c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40013400 	.word	0x40013400
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800
 80029dc:	40000c00 	.word	0x40000c00

080029e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_ConfigClockSource+0x18>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0b3      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x180>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a30:	d03e      	beq.n	8002ab0 <HAL_TIM_ConfigClockSource+0xd0>
 8002a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a36:	f200 8087 	bhi.w	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3e:	f000 8085 	beq.w	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	d87f      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a48:	2b70      	cmp	r3, #112	; 0x70
 8002a4a:	d01a      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0xa2>
 8002a4c:	2b70      	cmp	r3, #112	; 0x70
 8002a4e:	d87b      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a50:	2b60      	cmp	r3, #96	; 0x60
 8002a52:	d050      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x116>
 8002a54:	2b60      	cmp	r3, #96	; 0x60
 8002a56:	d877      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a58:	2b50      	cmp	r3, #80	; 0x50
 8002a5a:	d03c      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0xf6>
 8002a5c:	2b50      	cmp	r3, #80	; 0x50
 8002a5e:	d873      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d058      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x136>
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d86f      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a68:	2b30      	cmp	r3, #48	; 0x30
 8002a6a:	d064      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x156>
 8002a6c:	2b30      	cmp	r3, #48	; 0x30
 8002a6e:	d86b      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d060      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x156>
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d867      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05c      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x156>
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d05a      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a80:	e062      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f000 f95a 	bl	8002d4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aa4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	609a      	str	r2, [r3, #8]
      break;
 8002aae:	e04e      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f000 f943 	bl	8002d4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad2:	609a      	str	r2, [r3, #8]
      break;
 8002ad4:	e03b      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 f8ba 	bl	8002c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2150      	movs	r1, #80	; 0x50
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f911 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002af4:	e02b      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 f8d8 	bl	8002cb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2160      	movs	r1, #96	; 0x60
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f901 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002b14:	e01b      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 f89a 	bl	8002c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f8f1 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002b34:	e00b      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f000 f8e8 	bl	8002d16 <TIM_ITRx_SetConfig>
        break;
 8002b46:	e002      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b48:	bf00      	nop
 8002b4a:	e000      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a33      	ldr	r2, [pc, #204]	; (8002c48 <TIM_Base_SetConfig+0xe0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a32      	ldr	r2, [pc, #200]	; (8002c4c <TIM_Base_SetConfig+0xe4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00f      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8e:	d00b      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a2f      	ldr	r2, [pc, #188]	; (8002c50 <TIM_Base_SetConfig+0xe8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a2e      	ldr	r2, [pc, #184]	; (8002c54 <TIM_Base_SetConfig+0xec>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <TIM_Base_SetConfig+0xf0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d108      	bne.n	8002bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <TIM_Base_SetConfig+0xe0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <TIM_Base_SetConfig+0x82>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <TIM_Base_SetConfig+0xe4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00f      	beq.n	8002bea <TIM_Base_SetConfig+0x82>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd0:	d00b      	beq.n	8002bea <TIM_Base_SetConfig+0x82>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <TIM_Base_SetConfig+0xe8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <TIM_Base_SetConfig+0x82>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <TIM_Base_SetConfig+0xec>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <TIM_Base_SetConfig+0x82>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <TIM_Base_SetConfig+0xf0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d108      	bne.n	8002bfc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <TIM_Base_SetConfig+0xe0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d003      	beq.n	8002c30 <TIM_Base_SetConfig+0xc8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <TIM_Base_SetConfig+0xe4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d103      	bne.n	8002c38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	615a      	str	r2, [r3, #20]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40013400 	.word	0x40013400
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40000c00 	.word	0x40000c00

08002c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f023 0201 	bic.w	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f023 030a 	bic.w	r3, r3, #10
 8002c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	621a      	str	r2, [r3, #32]
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f023 0210 	bic.w	r2, r3, #16
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ce2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	031b      	lsls	r3, r3, #12
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	621a      	str	r2, [r3, #32]
}
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f043 0307 	orr.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	021a      	lsls	r2, r3, #8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	609a      	str	r2, [r3, #8]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e050      	b.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d018      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d00e      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10c      	bne.n	8002e30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40013400 	.word	0x40013400
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00

08002e60 <__libc_init_array>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	2600      	movs	r6, #0
 8002e64:	4d0c      	ldr	r5, [pc, #48]	; (8002e98 <__libc_init_array+0x38>)
 8002e66:	4c0d      	ldr	r4, [pc, #52]	; (8002e9c <__libc_init_array+0x3c>)
 8002e68:	1b64      	subs	r4, r4, r5
 8002e6a:	10a4      	asrs	r4, r4, #2
 8002e6c:	42a6      	cmp	r6, r4
 8002e6e:	d109      	bne.n	8002e84 <__libc_init_array+0x24>
 8002e70:	f001 f824 	bl	8003ebc <_init>
 8002e74:	2600      	movs	r6, #0
 8002e76:	4d0a      	ldr	r5, [pc, #40]	; (8002ea0 <__libc_init_array+0x40>)
 8002e78:	4c0a      	ldr	r4, [pc, #40]	; (8002ea4 <__libc_init_array+0x44>)
 8002e7a:	1b64      	subs	r4, r4, r5
 8002e7c:	10a4      	asrs	r4, r4, #2
 8002e7e:	42a6      	cmp	r6, r4
 8002e80:	d105      	bne.n	8002e8e <__libc_init_array+0x2e>
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
 8002e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e88:	4798      	blx	r3
 8002e8a:	3601      	adds	r6, #1
 8002e8c:	e7ee      	b.n	8002e6c <__libc_init_array+0xc>
 8002e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e92:	4798      	blx	r3
 8002e94:	3601      	adds	r6, #1
 8002e96:	e7f2      	b.n	8002e7e <__libc_init_array+0x1e>
 8002e98:	080040d0 	.word	0x080040d0
 8002e9c:	080040d0 	.word	0x080040d0
 8002ea0:	080040d0 	.word	0x080040d0
 8002ea4:	080040d4 	.word	0x080040d4

08002ea8 <memset>:
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4402      	add	r2, r0
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <memset+0xa>
 8002eb0:	4770      	bx	lr
 8002eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb6:	e7f9      	b.n	8002eac <memset+0x4>

08002eb8 <sin>:
 8002eb8:	b530      	push	{r4, r5, lr}
 8002eba:	4a20      	ldr	r2, [pc, #128]	; (8002f3c <sin+0x84>)
 8002ebc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	dc06      	bgt.n	8002ed4 <sin+0x1c>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2200      	movs	r2, #0
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f000 fe33 	bl	8003b38 <__kernel_sin>
 8002ed2:	e006      	b.n	8002ee2 <sin+0x2a>
 8002ed4:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <sin+0x88>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	dd05      	ble.n	8002ee6 <sin+0x2e>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	f7fd f9a7 	bl	8000230 <__aeabi_dsub>
 8002ee2:	b007      	add	sp, #28
 8002ee4:	bd30      	pop	{r4, r5, pc}
 8002ee6:	aa02      	add	r2, sp, #8
 8002ee8:	f000 f82e 	bl	8002f48 <__ieee754_rem_pio2>
 8002eec:	f000 0003 	and.w	r0, r0, #3
 8002ef0:	2801      	cmp	r0, #1
 8002ef2:	d009      	beq.n	8002f08 <sin+0x50>
 8002ef4:	2802      	cmp	r0, #2
 8002ef6:	d00e      	beq.n	8002f16 <sin+0x5e>
 8002ef8:	b9c0      	cbnz	r0, 8002f2c <sin+0x74>
 8002efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002efe:	2301      	movs	r3, #1
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f06:	e7e2      	b.n	8002ece <sin+0x16>
 8002f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f10:	f000 fa0a 	bl	8003328 <__kernel_cos>
 8002f14:	e7e5      	b.n	8002ee2 <sin+0x2a>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f22:	f000 fe09 	bl	8003b38 <__kernel_sin>
 8002f26:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002f2a:	e7da      	b.n	8002ee2 <sin+0x2a>
 8002f2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f34:	f000 f9f8 	bl	8003328 <__kernel_cos>
 8002f38:	e7f5      	b.n	8002f26 <sin+0x6e>
 8002f3a:	bf00      	nop
 8002f3c:	3fe921fb 	.word	0x3fe921fb
 8002f40:	7fefffff 	.word	0x7fefffff
 8002f44:	00000000 	.word	0x00000000

08002f48 <__ieee754_rem_pio2>:
 8002f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	4ac4      	ldr	r2, [pc, #784]	; (8003260 <__ieee754_rem_pio2+0x318>)
 8002f50:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8002f54:	b08d      	sub	sp, #52	; 0x34
 8002f56:	4592      	cmp	sl, r2
 8002f58:	9104      	str	r1, [sp, #16]
 8002f5a:	dc07      	bgt.n	8002f6c <__ieee754_rem_pio2+0x24>
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e9c4 0100 	strd	r0, r1, [r4]
 8002f64:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002f68:	2500      	movs	r5, #0
 8002f6a:	e024      	b.n	8002fb6 <__ieee754_rem_pio2+0x6e>
 8002f6c:	4abd      	ldr	r2, [pc, #756]	; (8003264 <__ieee754_rem_pio2+0x31c>)
 8002f6e:	4592      	cmp	sl, r2
 8002f70:	dc72      	bgt.n	8003058 <__ieee754_rem_pio2+0x110>
 8002f72:	9b04      	ldr	r3, [sp, #16]
 8002f74:	4dbc      	ldr	r5, [pc, #752]	; (8003268 <__ieee754_rem_pio2+0x320>)
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	a3ab      	add	r3, pc, #684	; (adr r3, 8003228 <__ieee754_rem_pio2+0x2e0>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	dd36      	ble.n	8002fee <__ieee754_rem_pio2+0xa6>
 8002f80:	f7fd f956 	bl	8000230 <__aeabi_dsub>
 8002f84:	45aa      	cmp	sl, r5
 8002f86:	4606      	mov	r6, r0
 8002f88:	460f      	mov	r7, r1
 8002f8a:	d018      	beq.n	8002fbe <__ieee754_rem_pio2+0x76>
 8002f8c:	a3a8      	add	r3, pc, #672	; (adr r3, 8003230 <__ieee754_rem_pio2+0x2e8>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	f7fd f94d 	bl	8000230 <__aeabi_dsub>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	e9c4 2300 	strd	r2, r3, [r4]
 8002fa0:	4639      	mov	r1, r7
 8002fa2:	f7fd f945 	bl	8000230 <__aeabi_dsub>
 8002fa6:	a3a2      	add	r3, pc, #648	; (adr r3, 8003230 <__ieee754_rem_pio2+0x2e8>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f7fd f940 	bl	8000230 <__aeabi_dsub>
 8002fb0:	2501      	movs	r5, #1
 8002fb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	b00d      	add	sp, #52	; 0x34
 8002fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fbe:	a39e      	add	r3, pc, #632	; (adr r3, 8003238 <__ieee754_rem_pio2+0x2f0>)
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f7fd f934 	bl	8000230 <__aeabi_dsub>
 8002fc8:	a39d      	add	r3, pc, #628	; (adr r3, 8003240 <__ieee754_rem_pio2+0x2f8>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	4606      	mov	r6, r0
 8002fd0:	460f      	mov	r7, r1
 8002fd2:	f7fd f92d 	bl	8000230 <__aeabi_dsub>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4630      	mov	r0, r6
 8002fdc:	e9c4 2300 	strd	r2, r3, [r4]
 8002fe0:	4639      	mov	r1, r7
 8002fe2:	f7fd f925 	bl	8000230 <__aeabi_dsub>
 8002fe6:	a396      	add	r3, pc, #600	; (adr r3, 8003240 <__ieee754_rem_pio2+0x2f8>)
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	e7de      	b.n	8002fac <__ieee754_rem_pio2+0x64>
 8002fee:	f7fd f921 	bl	8000234 <__adddf3>
 8002ff2:	45aa      	cmp	sl, r5
 8002ff4:	4606      	mov	r6, r0
 8002ff6:	460f      	mov	r7, r1
 8002ff8:	d016      	beq.n	8003028 <__ieee754_rem_pio2+0xe0>
 8002ffa:	a38d      	add	r3, pc, #564	; (adr r3, 8003230 <__ieee754_rem_pio2+0x2e8>)
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd f918 	bl	8000234 <__adddf3>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4630      	mov	r0, r6
 800300a:	e9c4 2300 	strd	r2, r3, [r4]
 800300e:	4639      	mov	r1, r7
 8003010:	f7fd f90e 	bl	8000230 <__aeabi_dsub>
 8003014:	a386      	add	r3, pc, #536	; (adr r3, 8003230 <__ieee754_rem_pio2+0x2e8>)
 8003016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301a:	f7fd f90b 	bl	8000234 <__adddf3>
 800301e:	f04f 35ff 	mov.w	r5, #4294967295
 8003022:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003026:	e7c6      	b.n	8002fb6 <__ieee754_rem_pio2+0x6e>
 8003028:	a383      	add	r3, pc, #524	; (adr r3, 8003238 <__ieee754_rem_pio2+0x2f0>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f7fd f901 	bl	8000234 <__adddf3>
 8003032:	a383      	add	r3, pc, #524	; (adr r3, 8003240 <__ieee754_rem_pio2+0x2f8>)
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	4606      	mov	r6, r0
 800303a:	460f      	mov	r7, r1
 800303c:	f7fd f8fa 	bl	8000234 <__adddf3>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4630      	mov	r0, r6
 8003046:	e9c4 2300 	strd	r2, r3, [r4]
 800304a:	4639      	mov	r1, r7
 800304c:	f7fd f8f0 	bl	8000230 <__aeabi_dsub>
 8003050:	a37b      	add	r3, pc, #492	; (adr r3, 8003240 <__ieee754_rem_pio2+0x2f8>)
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	e7e0      	b.n	800301a <__ieee754_rem_pio2+0xd2>
 8003058:	4a84      	ldr	r2, [pc, #528]	; (800326c <__ieee754_rem_pio2+0x324>)
 800305a:	4592      	cmp	sl, r2
 800305c:	f300 80d5 	bgt.w	800320a <__ieee754_rem_pio2+0x2c2>
 8003060:	f000 fe20 	bl	8003ca4 <fabs>
 8003064:	a378      	add	r3, pc, #480	; (adr r3, 8003248 <__ieee754_rem_pio2+0x300>)
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	4606      	mov	r6, r0
 800306c:	460f      	mov	r7, r1
 800306e:	f7fd fa97 	bl	80005a0 <__aeabi_dmul>
 8003072:	2200      	movs	r2, #0
 8003074:	4b7e      	ldr	r3, [pc, #504]	; (8003270 <__ieee754_rem_pio2+0x328>)
 8003076:	f7fd f8dd 	bl	8000234 <__adddf3>
 800307a:	f7fd fd2b 	bl	8000ad4 <__aeabi_d2iz>
 800307e:	4605      	mov	r5, r0
 8003080:	f7fd fa24 	bl	80004cc <__aeabi_i2d>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800308c:	a366      	add	r3, pc, #408	; (adr r3, 8003228 <__ieee754_rem_pio2+0x2e0>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd fa85 	bl	80005a0 <__aeabi_dmul>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4630      	mov	r0, r6
 800309c:	4639      	mov	r1, r7
 800309e:	f7fd f8c7 	bl	8000230 <__aeabi_dsub>
 80030a2:	a363      	add	r3, pc, #396	; (adr r3, 8003230 <__ieee754_rem_pio2+0x2e8>)
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	4680      	mov	r8, r0
 80030aa:	4689      	mov	r9, r1
 80030ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030b0:	f7fd fa76 	bl	80005a0 <__aeabi_dmul>
 80030b4:	2d1f      	cmp	r5, #31
 80030b6:	4606      	mov	r6, r0
 80030b8:	460f      	mov	r7, r1
 80030ba:	dc0e      	bgt.n	80030da <__ieee754_rem_pio2+0x192>
 80030bc:	4b6d      	ldr	r3, [pc, #436]	; (8003274 <__ieee754_rem_pio2+0x32c>)
 80030be:	1e6a      	subs	r2, r5, #1
 80030c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c4:	4553      	cmp	r3, sl
 80030c6:	d008      	beq.n	80030da <__ieee754_rem_pio2+0x192>
 80030c8:	4632      	mov	r2, r6
 80030ca:	463b      	mov	r3, r7
 80030cc:	4640      	mov	r0, r8
 80030ce:	4649      	mov	r1, r9
 80030d0:	f7fd f8ae 	bl	8000230 <__aeabi_dsub>
 80030d4:	e9c4 0100 	strd	r0, r1, [r4]
 80030d8:	e013      	b.n	8003102 <__ieee754_rem_pio2+0x1ba>
 80030da:	463b      	mov	r3, r7
 80030dc:	4632      	mov	r2, r6
 80030de:	4640      	mov	r0, r8
 80030e0:	4649      	mov	r1, r9
 80030e2:	f7fd f8a5 	bl	8000230 <__aeabi_dsub>
 80030e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80030ea:	9305      	str	r3, [sp, #20]
 80030ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80030f0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80030f4:	f1ba 0f10 	cmp.w	sl, #16
 80030f8:	dc1f      	bgt.n	800313a <__ieee754_rem_pio2+0x1f2>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	e9c4 2300 	strd	r2, r3, [r4]
 8003102:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8003106:	4640      	mov	r0, r8
 8003108:	4653      	mov	r3, sl
 800310a:	4649      	mov	r1, r9
 800310c:	f7fd f890 	bl	8000230 <__aeabi_dsub>
 8003110:	4632      	mov	r2, r6
 8003112:	463b      	mov	r3, r7
 8003114:	f7fd f88c 	bl	8000230 <__aeabi_dsub>
 8003118:	460b      	mov	r3, r1
 800311a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800311e:	9904      	ldr	r1, [sp, #16]
 8003120:	4602      	mov	r2, r0
 8003122:	2900      	cmp	r1, #0
 8003124:	f6bf af47 	bge.w	8002fb6 <__ieee754_rem_pio2+0x6e>
 8003128:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800312c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8003130:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003134:	60e3      	str	r3, [r4, #12]
 8003136:	426d      	negs	r5, r5
 8003138:	e73d      	b.n	8002fb6 <__ieee754_rem_pio2+0x6e>
 800313a:	a33f      	add	r3, pc, #252	; (adr r3, 8003238 <__ieee754_rem_pio2+0x2f0>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003144:	f7fd fa2c 	bl	80005a0 <__aeabi_dmul>
 8003148:	4606      	mov	r6, r0
 800314a:	460f      	mov	r7, r1
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4640      	mov	r0, r8
 8003152:	4649      	mov	r1, r9
 8003154:	f7fd f86c 	bl	8000230 <__aeabi_dsub>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4682      	mov	sl, r0
 800315e:	468b      	mov	fp, r1
 8003160:	4640      	mov	r0, r8
 8003162:	4649      	mov	r1, r9
 8003164:	f7fd f864 	bl	8000230 <__aeabi_dsub>
 8003168:	4632      	mov	r2, r6
 800316a:	463b      	mov	r3, r7
 800316c:	f7fd f860 	bl	8000230 <__aeabi_dsub>
 8003170:	a333      	add	r3, pc, #204	; (adr r3, 8003240 <__ieee754_rem_pio2+0x2f8>)
 8003172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003176:	4606      	mov	r6, r0
 8003178:	460f      	mov	r7, r1
 800317a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800317e:	f7fd fa0f 	bl	80005a0 <__aeabi_dmul>
 8003182:	4632      	mov	r2, r6
 8003184:	463b      	mov	r3, r7
 8003186:	f7fd f853 	bl	8000230 <__aeabi_dsub>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4606      	mov	r6, r0
 8003190:	460f      	mov	r7, r1
 8003192:	4650      	mov	r0, sl
 8003194:	4659      	mov	r1, fp
 8003196:	f7fd f84b 	bl	8000230 <__aeabi_dsub>
 800319a:	9a05      	ldr	r2, [sp, #20]
 800319c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b31      	cmp	r3, #49	; 0x31
 80031a4:	dc06      	bgt.n	80031b4 <__ieee754_rem_pio2+0x26c>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	46d0      	mov	r8, sl
 80031ac:	46d9      	mov	r9, fp
 80031ae:	e9c4 2300 	strd	r2, r3, [r4]
 80031b2:	e7a6      	b.n	8003102 <__ieee754_rem_pio2+0x1ba>
 80031b4:	a326      	add	r3, pc, #152	; (adr r3, 8003250 <__ieee754_rem_pio2+0x308>)
 80031b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031be:	f7fd f9ef 	bl	80005a0 <__aeabi_dmul>
 80031c2:	4606      	mov	r6, r0
 80031c4:	460f      	mov	r7, r1
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4650      	mov	r0, sl
 80031cc:	4659      	mov	r1, fp
 80031ce:	f7fd f82f 	bl	8000230 <__aeabi_dsub>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4680      	mov	r8, r0
 80031d8:	4689      	mov	r9, r1
 80031da:	4650      	mov	r0, sl
 80031dc:	4659      	mov	r1, fp
 80031de:	f7fd f827 	bl	8000230 <__aeabi_dsub>
 80031e2:	4632      	mov	r2, r6
 80031e4:	463b      	mov	r3, r7
 80031e6:	f7fd f823 	bl	8000230 <__aeabi_dsub>
 80031ea:	a31b      	add	r3, pc, #108	; (adr r3, 8003258 <__ieee754_rem_pio2+0x310>)
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	4606      	mov	r6, r0
 80031f2:	460f      	mov	r7, r1
 80031f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031f8:	f7fd f9d2 	bl	80005a0 <__aeabi_dmul>
 80031fc:	4632      	mov	r2, r6
 80031fe:	463b      	mov	r3, r7
 8003200:	f7fd f816 	bl	8000230 <__aeabi_dsub>
 8003204:	4606      	mov	r6, r0
 8003206:	460f      	mov	r7, r1
 8003208:	e75e      	b.n	80030c8 <__ieee754_rem_pio2+0x180>
 800320a:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <__ieee754_rem_pio2+0x330>)
 800320c:	4592      	cmp	sl, r2
 800320e:	dd35      	ble.n	800327c <__ieee754_rem_pio2+0x334>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	f7fd f80c 	bl	8000230 <__aeabi_dsub>
 8003218:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800321c:	e9c4 0100 	strd	r0, r1, [r4]
 8003220:	e6a2      	b.n	8002f68 <__ieee754_rem_pio2+0x20>
 8003222:	bf00      	nop
 8003224:	f3af 8000 	nop.w
 8003228:	54400000 	.word	0x54400000
 800322c:	3ff921fb 	.word	0x3ff921fb
 8003230:	1a626331 	.word	0x1a626331
 8003234:	3dd0b461 	.word	0x3dd0b461
 8003238:	1a600000 	.word	0x1a600000
 800323c:	3dd0b461 	.word	0x3dd0b461
 8003240:	2e037073 	.word	0x2e037073
 8003244:	3ba3198a 	.word	0x3ba3198a
 8003248:	6dc9c883 	.word	0x6dc9c883
 800324c:	3fe45f30 	.word	0x3fe45f30
 8003250:	2e000000 	.word	0x2e000000
 8003254:	3ba3198a 	.word	0x3ba3198a
 8003258:	252049c1 	.word	0x252049c1
 800325c:	397b839a 	.word	0x397b839a
 8003260:	3fe921fb 	.word	0x3fe921fb
 8003264:	4002d97b 	.word	0x4002d97b
 8003268:	3ff921fb 	.word	0x3ff921fb
 800326c:	413921fb 	.word	0x413921fb
 8003270:	3fe00000 	.word	0x3fe00000
 8003274:	08003ef8 	.word	0x08003ef8
 8003278:	7fefffff 	.word	0x7fefffff
 800327c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8003280:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003284:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8003288:	460f      	mov	r7, r1
 800328a:	4606      	mov	r6, r0
 800328c:	f7fd fc22 	bl	8000ad4 <__aeabi_d2iz>
 8003290:	f7fd f91c 	bl	80004cc <__aeabi_i2d>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4630      	mov	r0, r6
 800329a:	4639      	mov	r1, r7
 800329c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80032a0:	f7fc ffc6 	bl	8000230 <__aeabi_dsub>
 80032a4:	2200      	movs	r2, #0
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <__ieee754_rem_pio2+0x3d8>)
 80032a8:	f7fd f97a 	bl	80005a0 <__aeabi_dmul>
 80032ac:	460f      	mov	r7, r1
 80032ae:	4606      	mov	r6, r0
 80032b0:	f7fd fc10 	bl	8000ad4 <__aeabi_d2iz>
 80032b4:	f7fd f90a 	bl	80004cc <__aeabi_i2d>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4630      	mov	r0, r6
 80032be:	4639      	mov	r1, r7
 80032c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80032c4:	f7fc ffb4 	bl	8000230 <__aeabi_dsub>
 80032c8:	2200      	movs	r2, #0
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <__ieee754_rem_pio2+0x3d8>)
 80032cc:	f7fd f968 	bl	80005a0 <__aeabi_dmul>
 80032d0:	f04f 0803 	mov.w	r8, #3
 80032d4:	2600      	movs	r6, #0
 80032d6:	2700      	movs	r7, #0
 80032d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80032dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80032e0:	4632      	mov	r2, r6
 80032e2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80032e6:	463b      	mov	r3, r7
 80032e8:	46c2      	mov	sl, r8
 80032ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80032ee:	f7fd fbbf 	bl	8000a70 <__aeabi_dcmpeq>
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d1f4      	bne.n	80032e0 <__ieee754_rem_pio2+0x398>
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <__ieee754_rem_pio2+0x3dc>)
 80032f8:	462a      	mov	r2, r5
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	2302      	movs	r3, #2
 80032fe:	4621      	mov	r1, r4
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	a806      	add	r0, sp, #24
 8003304:	4653      	mov	r3, sl
 8003306:	f000 f8cd 	bl	80034a4 <__kernel_rem_pio2>
 800330a:	9b04      	ldr	r3, [sp, #16]
 800330c:	4605      	mov	r5, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	f6bf ae51 	bge.w	8002fb6 <__ieee754_rem_pio2+0x6e>
 8003314:	6863      	ldr	r3, [r4, #4]
 8003316:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800331a:	6063      	str	r3, [r4, #4]
 800331c:	68e3      	ldr	r3, [r4, #12]
 800331e:	e707      	b.n	8003130 <__ieee754_rem_pio2+0x1e8>
 8003320:	41700000 	.word	0x41700000
 8003324:	08003f78 	.word	0x08003f78

08003328 <__kernel_cos>:
 8003328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003330:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003334:	4680      	mov	r8, r0
 8003336:	460f      	mov	r7, r1
 8003338:	e9cd 2300 	strd	r2, r3, [sp]
 800333c:	da04      	bge.n	8003348 <__kernel_cos+0x20>
 800333e:	f7fd fbc9 	bl	8000ad4 <__aeabi_d2iz>
 8003342:	2800      	cmp	r0, #0
 8003344:	f000 8086 	beq.w	8003454 <__kernel_cos+0x12c>
 8003348:	4642      	mov	r2, r8
 800334a:	463b      	mov	r3, r7
 800334c:	4640      	mov	r0, r8
 800334e:	4639      	mov	r1, r7
 8003350:	f7fd f926 	bl	80005a0 <__aeabi_dmul>
 8003354:	2200      	movs	r2, #0
 8003356:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <__kernel_cos+0x168>)
 8003358:	4604      	mov	r4, r0
 800335a:	460d      	mov	r5, r1
 800335c:	f7fd f920 	bl	80005a0 <__aeabi_dmul>
 8003360:	a33f      	add	r3, pc, #252	; (adr r3, 8003460 <__kernel_cos+0x138>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	4682      	mov	sl, r0
 8003368:	468b      	mov	fp, r1
 800336a:	4620      	mov	r0, r4
 800336c:	4629      	mov	r1, r5
 800336e:	f7fd f917 	bl	80005a0 <__aeabi_dmul>
 8003372:	a33d      	add	r3, pc, #244	; (adr r3, 8003468 <__kernel_cos+0x140>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fc ff5c 	bl	8000234 <__adddf3>
 800337c:	4622      	mov	r2, r4
 800337e:	462b      	mov	r3, r5
 8003380:	f7fd f90e 	bl	80005a0 <__aeabi_dmul>
 8003384:	a33a      	add	r3, pc, #232	; (adr r3, 8003470 <__kernel_cos+0x148>)
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f7fc ff51 	bl	8000230 <__aeabi_dsub>
 800338e:	4622      	mov	r2, r4
 8003390:	462b      	mov	r3, r5
 8003392:	f7fd f905 	bl	80005a0 <__aeabi_dmul>
 8003396:	a338      	add	r3, pc, #224	; (adr r3, 8003478 <__kernel_cos+0x150>)
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f7fc ff4a 	bl	8000234 <__adddf3>
 80033a0:	4622      	mov	r2, r4
 80033a2:	462b      	mov	r3, r5
 80033a4:	f7fd f8fc 	bl	80005a0 <__aeabi_dmul>
 80033a8:	a335      	add	r3, pc, #212	; (adr r3, 8003480 <__kernel_cos+0x158>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f7fc ff3f 	bl	8000230 <__aeabi_dsub>
 80033b2:	4622      	mov	r2, r4
 80033b4:	462b      	mov	r3, r5
 80033b6:	f7fd f8f3 	bl	80005a0 <__aeabi_dmul>
 80033ba:	a333      	add	r3, pc, #204	; (adr r3, 8003488 <__kernel_cos+0x160>)
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f7fc ff38 	bl	8000234 <__adddf3>
 80033c4:	4622      	mov	r2, r4
 80033c6:	462b      	mov	r3, r5
 80033c8:	f7fd f8ea 	bl	80005a0 <__aeabi_dmul>
 80033cc:	4622      	mov	r2, r4
 80033ce:	462b      	mov	r3, r5
 80033d0:	f7fd f8e6 	bl	80005a0 <__aeabi_dmul>
 80033d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033d8:	4604      	mov	r4, r0
 80033da:	460d      	mov	r5, r1
 80033dc:	4640      	mov	r0, r8
 80033de:	4639      	mov	r1, r7
 80033e0:	f7fd f8de 	bl	80005a0 <__aeabi_dmul>
 80033e4:	460b      	mov	r3, r1
 80033e6:	4602      	mov	r2, r0
 80033e8:	4629      	mov	r1, r5
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7fc ff20 	bl	8000230 <__aeabi_dsub>
 80033f0:	4b28      	ldr	r3, [pc, #160]	; (8003494 <__kernel_cos+0x16c>)
 80033f2:	4680      	mov	r8, r0
 80033f4:	429e      	cmp	r6, r3
 80033f6:	4689      	mov	r9, r1
 80033f8:	dc0e      	bgt.n	8003418 <__kernel_cos+0xf0>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4650      	mov	r0, sl
 8003400:	4659      	mov	r1, fp
 8003402:	f7fc ff15 	bl	8000230 <__aeabi_dsub>
 8003406:	4602      	mov	r2, r0
 8003408:	2000      	movs	r0, #0
 800340a:	460b      	mov	r3, r1
 800340c:	4922      	ldr	r1, [pc, #136]	; (8003498 <__kernel_cos+0x170>)
 800340e:	f7fc ff0f 	bl	8000230 <__aeabi_dsub>
 8003412:	b003      	add	sp, #12
 8003414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003418:	2400      	movs	r4, #0
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <__kernel_cos+0x174>)
 800341c:	4622      	mov	r2, r4
 800341e:	429e      	cmp	r6, r3
 8003420:	bfcc      	ite	gt
 8003422:	4d1f      	ldrgt	r5, [pc, #124]	; (80034a0 <__kernel_cos+0x178>)
 8003424:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8003428:	462b      	mov	r3, r5
 800342a:	2000      	movs	r0, #0
 800342c:	491a      	ldr	r1, [pc, #104]	; (8003498 <__kernel_cos+0x170>)
 800342e:	f7fc feff 	bl	8000230 <__aeabi_dsub>
 8003432:	4622      	mov	r2, r4
 8003434:	4606      	mov	r6, r0
 8003436:	460f      	mov	r7, r1
 8003438:	462b      	mov	r3, r5
 800343a:	4650      	mov	r0, sl
 800343c:	4659      	mov	r1, fp
 800343e:	f7fc fef7 	bl	8000230 <__aeabi_dsub>
 8003442:	4642      	mov	r2, r8
 8003444:	464b      	mov	r3, r9
 8003446:	f7fc fef3 	bl	8000230 <__aeabi_dsub>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4630      	mov	r0, r6
 8003450:	4639      	mov	r1, r7
 8003452:	e7dc      	b.n	800340e <__kernel_cos+0xe6>
 8003454:	2000      	movs	r0, #0
 8003456:	4910      	ldr	r1, [pc, #64]	; (8003498 <__kernel_cos+0x170>)
 8003458:	e7db      	b.n	8003412 <__kernel_cos+0xea>
 800345a:	bf00      	nop
 800345c:	f3af 8000 	nop.w
 8003460:	be8838d4 	.word	0xbe8838d4
 8003464:	bda8fae9 	.word	0xbda8fae9
 8003468:	bdb4b1c4 	.word	0xbdb4b1c4
 800346c:	3e21ee9e 	.word	0x3e21ee9e
 8003470:	809c52ad 	.word	0x809c52ad
 8003474:	3e927e4f 	.word	0x3e927e4f
 8003478:	19cb1590 	.word	0x19cb1590
 800347c:	3efa01a0 	.word	0x3efa01a0
 8003480:	16c15177 	.word	0x16c15177
 8003484:	3f56c16c 	.word	0x3f56c16c
 8003488:	5555554c 	.word	0x5555554c
 800348c:	3fa55555 	.word	0x3fa55555
 8003490:	3fe00000 	.word	0x3fe00000
 8003494:	3fd33332 	.word	0x3fd33332
 8003498:	3ff00000 	.word	0x3ff00000
 800349c:	3fe90000 	.word	0x3fe90000
 80034a0:	3fd20000 	.word	0x3fd20000

080034a4 <__kernel_rem_pio2>:
 80034a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80034ac:	9308      	str	r3, [sp, #32]
 80034ae:	9101      	str	r1, [sp, #4]
 80034b0:	4bc0      	ldr	r3, [pc, #768]	; (80037b4 <__kernel_rem_pio2+0x310>)
 80034b2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80034b4:	f112 0f14 	cmn.w	r2, #20
 80034b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034bc:	bfa8      	it	ge
 80034be:	1ed4      	subge	r4, r2, #3
 80034c0:	9304      	str	r3, [sp, #16]
 80034c2:	9b08      	ldr	r3, [sp, #32]
 80034c4:	bfb8      	it	lt
 80034c6:	2400      	movlt	r4, #0
 80034c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80034cc:	9306      	str	r3, [sp, #24]
 80034ce:	bfa4      	itt	ge
 80034d0:	2318      	movge	r3, #24
 80034d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80034d6:	f06f 0317 	mvn.w	r3, #23
 80034da:	fb04 3303 	mla	r3, r4, r3, r3
 80034de:	eb03 0a02 	add.w	sl, r3, r2
 80034e2:	9a06      	ldr	r2, [sp, #24]
 80034e4:	9b04      	ldr	r3, [sp, #16]
 80034e6:	1aa7      	subs	r7, r4, r2
 80034e8:	eb03 0802 	add.w	r8, r3, r2
 80034ec:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80034ee:	2500      	movs	r5, #0
 80034f0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80034f4:	2200      	movs	r2, #0
 80034f6:	2300      	movs	r3, #0
 80034f8:	9009      	str	r0, [sp, #36]	; 0x24
 80034fa:	ae20      	add	r6, sp, #128	; 0x80
 80034fc:	4545      	cmp	r5, r8
 80034fe:	dd19      	ble.n	8003534 <__kernel_rem_pio2+0x90>
 8003500:	9b08      	ldr	r3, [sp, #32]
 8003502:	aa20      	add	r2, sp, #128	; 0x80
 8003504:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003508:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800350c:	f1c3 0301 	rsb	r3, r3, #1
 8003510:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003514:	9307      	str	r3, [sp, #28]
 8003516:	9b07      	ldr	r3, [sp, #28]
 8003518:	9a04      	ldr	r2, [sp, #16]
 800351a:	4443      	add	r3, r8
 800351c:	429a      	cmp	r2, r3
 800351e:	db35      	blt.n	800358c <__kernel_rem_pio2+0xe8>
 8003520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003522:	2200      	movs	r2, #0
 8003524:	f1a3 0908 	sub.w	r9, r3, #8
 8003528:	2300      	movs	r3, #0
 800352a:	462f      	mov	r7, r5
 800352c:	2600      	movs	r6, #0
 800352e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003532:	e01f      	b.n	8003574 <__kernel_rem_pio2+0xd0>
 8003534:	42ef      	cmn	r7, r5
 8003536:	d40b      	bmi.n	8003550 <__kernel_rem_pio2+0xac>
 8003538:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800353c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003540:	f7fc ffc4 	bl	80004cc <__aeabi_i2d>
 8003544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003548:	e8e6 0102 	strd	r0, r1, [r6], #8
 800354c:	3501      	adds	r5, #1
 800354e:	e7d5      	b.n	80034fc <__kernel_rem_pio2+0x58>
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	e7f8      	b.n	8003548 <__kernel_rem_pio2+0xa4>
 8003556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800355a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800355e:	f7fd f81f 	bl	80005a0 <__aeabi_dmul>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800356a:	f7fc fe63 	bl	8000234 <__adddf3>
 800356e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003572:	3601      	adds	r6, #1
 8003574:	9b06      	ldr	r3, [sp, #24]
 8003576:	3f08      	subs	r7, #8
 8003578:	429e      	cmp	r6, r3
 800357a:	ddec      	ble.n	8003556 <__kernel_rem_pio2+0xb2>
 800357c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003580:	3508      	adds	r5, #8
 8003582:	e8eb 2302 	strd	r2, r3, [fp], #8
 8003586:	f108 0801 	add.w	r8, r8, #1
 800358a:	e7c4      	b.n	8003516 <__kernel_rem_pio2+0x72>
 800358c:	9b04      	ldr	r3, [sp, #16]
 800358e:	aa0c      	add	r2, sp, #48	; 0x30
 8003590:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003594:	930b      	str	r3, [sp, #44]	; 0x2c
 8003596:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003598:	9f04      	ldr	r7, [sp, #16]
 800359a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800359e:	930a      	str	r3, [sp, #40]	; 0x28
 80035a0:	463e      	mov	r6, r7
 80035a2:	ab98      	add	r3, sp, #608	; 0x260
 80035a4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80035a8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80035ac:	f8cd b008 	str.w	fp, [sp, #8]
 80035b0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80035b4:	2e00      	cmp	r6, #0
 80035b6:	dc71      	bgt.n	800369c <__kernel_rem_pio2+0x1f8>
 80035b8:	4652      	mov	r2, sl
 80035ba:	4620      	mov	r0, r4
 80035bc:	4629      	mov	r1, r5
 80035be:	f000 fbf7 	bl	8003db0 <scalbn>
 80035c2:	2200      	movs	r2, #0
 80035c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80035c8:	4604      	mov	r4, r0
 80035ca:	460d      	mov	r5, r1
 80035cc:	f7fc ffe8 	bl	80005a0 <__aeabi_dmul>
 80035d0:	f000 fb6e 	bl	8003cb0 <floor>
 80035d4:	2200      	movs	r2, #0
 80035d6:	4b78      	ldr	r3, [pc, #480]	; (80037b8 <__kernel_rem_pio2+0x314>)
 80035d8:	f7fc ffe2 	bl	80005a0 <__aeabi_dmul>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4620      	mov	r0, r4
 80035e2:	4629      	mov	r1, r5
 80035e4:	f7fc fe24 	bl	8000230 <__aeabi_dsub>
 80035e8:	460d      	mov	r5, r1
 80035ea:	4604      	mov	r4, r0
 80035ec:	f7fd fa72 	bl	8000ad4 <__aeabi_d2iz>
 80035f0:	9007      	str	r0, [sp, #28]
 80035f2:	f7fc ff6b 	bl	80004cc <__aeabi_i2d>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4620      	mov	r0, r4
 80035fc:	4629      	mov	r1, r5
 80035fe:	f7fc fe17 	bl	8000230 <__aeabi_dsub>
 8003602:	f1ba 0f00 	cmp.w	sl, #0
 8003606:	4680      	mov	r8, r0
 8003608:	4689      	mov	r9, r1
 800360a:	dd70      	ble.n	80036ee <__kernel_rem_pio2+0x24a>
 800360c:	1e7a      	subs	r2, r7, #1
 800360e:	ab0c      	add	r3, sp, #48	; 0x30
 8003610:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003614:	9c07      	ldr	r4, [sp, #28]
 8003616:	f1ca 0118 	rsb	r1, sl, #24
 800361a:	fa40 f301 	asr.w	r3, r0, r1
 800361e:	441c      	add	r4, r3
 8003620:	408b      	lsls	r3, r1
 8003622:	1ac0      	subs	r0, r0, r3
 8003624:	ab0c      	add	r3, sp, #48	; 0x30
 8003626:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800362a:	f1ca 0317 	rsb	r3, sl, #23
 800362e:	9407      	str	r4, [sp, #28]
 8003630:	fa40 f303 	asr.w	r3, r0, r3
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	9b02      	ldr	r3, [sp, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	dd66      	ble.n	800370a <__kernel_rem_pio2+0x266>
 800363c:	2200      	movs	r2, #0
 800363e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003642:	4614      	mov	r4, r2
 8003644:	9b07      	ldr	r3, [sp, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	9307      	str	r3, [sp, #28]
 800364a:	4297      	cmp	r7, r2
 800364c:	f300 809f 	bgt.w	800378e <__kernel_rem_pio2+0x2ea>
 8003650:	f1ba 0f00 	cmp.w	sl, #0
 8003654:	dd07      	ble.n	8003666 <__kernel_rem_pio2+0x1c2>
 8003656:	f1ba 0f01 	cmp.w	sl, #1
 800365a:	f000 80b9 	beq.w	80037d0 <__kernel_rem_pio2+0x32c>
 800365e:	f1ba 0f02 	cmp.w	sl, #2
 8003662:	f000 80bf 	beq.w	80037e4 <__kernel_rem_pio2+0x340>
 8003666:	9b02      	ldr	r3, [sp, #8]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d14e      	bne.n	800370a <__kernel_rem_pio2+0x266>
 800366c:	4642      	mov	r2, r8
 800366e:	464b      	mov	r3, r9
 8003670:	2000      	movs	r0, #0
 8003672:	4952      	ldr	r1, [pc, #328]	; (80037bc <__kernel_rem_pio2+0x318>)
 8003674:	f7fc fddc 	bl	8000230 <__aeabi_dsub>
 8003678:	4680      	mov	r8, r0
 800367a:	4689      	mov	r9, r1
 800367c:	2c00      	cmp	r4, #0
 800367e:	d044      	beq.n	800370a <__kernel_rem_pio2+0x266>
 8003680:	4652      	mov	r2, sl
 8003682:	2000      	movs	r0, #0
 8003684:	494d      	ldr	r1, [pc, #308]	; (80037bc <__kernel_rem_pio2+0x318>)
 8003686:	f000 fb93 	bl	8003db0 <scalbn>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4640      	mov	r0, r8
 8003690:	4649      	mov	r1, r9
 8003692:	f7fc fdcd 	bl	8000230 <__aeabi_dsub>
 8003696:	4680      	mov	r8, r0
 8003698:	4689      	mov	r9, r1
 800369a:	e036      	b.n	800370a <__kernel_rem_pio2+0x266>
 800369c:	2200      	movs	r2, #0
 800369e:	4b48      	ldr	r3, [pc, #288]	; (80037c0 <__kernel_rem_pio2+0x31c>)
 80036a0:	4620      	mov	r0, r4
 80036a2:	4629      	mov	r1, r5
 80036a4:	f7fc ff7c 	bl	80005a0 <__aeabi_dmul>
 80036a8:	f7fd fa14 	bl	8000ad4 <__aeabi_d2iz>
 80036ac:	f7fc ff0e 	bl	80004cc <__aeabi_i2d>
 80036b0:	2200      	movs	r2, #0
 80036b2:	4b44      	ldr	r3, [pc, #272]	; (80037c4 <__kernel_rem_pio2+0x320>)
 80036b4:	4680      	mov	r8, r0
 80036b6:	4689      	mov	r9, r1
 80036b8:	f7fc ff72 	bl	80005a0 <__aeabi_dmul>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4620      	mov	r0, r4
 80036c2:	4629      	mov	r1, r5
 80036c4:	f7fc fdb4 	bl	8000230 <__aeabi_dsub>
 80036c8:	f7fd fa04 	bl	8000ad4 <__aeabi_d2iz>
 80036cc:	9b02      	ldr	r3, [sp, #8]
 80036ce:	3e01      	subs	r6, #1
 80036d0:	f843 0b04 	str.w	r0, [r3], #4
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80036d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80036dc:	4640      	mov	r0, r8
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	4649      	mov	r1, r9
 80036e4:	f7fc fda6 	bl	8000234 <__adddf3>
 80036e8:	4604      	mov	r4, r0
 80036ea:	460d      	mov	r5, r1
 80036ec:	e762      	b.n	80035b4 <__kernel_rem_pio2+0x110>
 80036ee:	d105      	bne.n	80036fc <__kernel_rem_pio2+0x258>
 80036f0:	1e7b      	subs	r3, r7, #1
 80036f2:	aa0c      	add	r2, sp, #48	; 0x30
 80036f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80036f8:	15c3      	asrs	r3, r0, #23
 80036fa:	e79b      	b.n	8003634 <__kernel_rem_pio2+0x190>
 80036fc:	2200      	movs	r2, #0
 80036fe:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <__kernel_rem_pio2+0x324>)
 8003700:	f7fd f9d4 	bl	8000aac <__aeabi_dcmpge>
 8003704:	2800      	cmp	r0, #0
 8003706:	d13f      	bne.n	8003788 <__kernel_rem_pio2+0x2e4>
 8003708:	9002      	str	r0, [sp, #8]
 800370a:	2200      	movs	r2, #0
 800370c:	2300      	movs	r3, #0
 800370e:	4640      	mov	r0, r8
 8003710:	4649      	mov	r1, r9
 8003712:	f7fd f9ad 	bl	8000a70 <__aeabi_dcmpeq>
 8003716:	2800      	cmp	r0, #0
 8003718:	f000 80b5 	beq.w	8003886 <__kernel_rem_pio2+0x3e2>
 800371c:	1e7c      	subs	r4, r7, #1
 800371e:	4623      	mov	r3, r4
 8003720:	2200      	movs	r2, #0
 8003722:	9904      	ldr	r1, [sp, #16]
 8003724:	428b      	cmp	r3, r1
 8003726:	da64      	bge.n	80037f2 <__kernel_rem_pio2+0x34e>
 8003728:	2a00      	cmp	r2, #0
 800372a:	d078      	beq.n	800381e <__kernel_rem_pio2+0x37a>
 800372c:	ab0c      	add	r3, sp, #48	; 0x30
 800372e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003732:	f1aa 0a18 	sub.w	sl, sl, #24
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80a3 	beq.w	8003882 <__kernel_rem_pio2+0x3de>
 800373c:	4652      	mov	r2, sl
 800373e:	2000      	movs	r0, #0
 8003740:	491e      	ldr	r1, [pc, #120]	; (80037bc <__kernel_rem_pio2+0x318>)
 8003742:	f000 fb35 	bl	8003db0 <scalbn>
 8003746:	46a2      	mov	sl, r4
 8003748:	4606      	mov	r6, r0
 800374a:	460f      	mov	r7, r1
 800374c:	f04f 0800 	mov.w	r8, #0
 8003750:	00e3      	lsls	r3, r4, #3
 8003752:	9306      	str	r3, [sp, #24]
 8003754:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80037c0 <__kernel_rem_pio2+0x31c>
 8003758:	ab70      	add	r3, sp, #448	; 0x1c0
 800375a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800375e:	f1ba 0f00 	cmp.w	sl, #0
 8003762:	f280 80c6 	bge.w	80038f2 <__kernel_rem_pio2+0x44e>
 8003766:	4627      	mov	r7, r4
 8003768:	f04f 0800 	mov.w	r8, #0
 800376c:	2f00      	cmp	r7, #0
 800376e:	f2c0 80f3 	blt.w	8003958 <__kernel_rem_pio2+0x4b4>
 8003772:	4b16      	ldr	r3, [pc, #88]	; (80037cc <__kernel_rem_pio2+0x328>)
 8003774:	f04f 0a00 	mov.w	sl, #0
 8003778:	461d      	mov	r5, r3
 800377a:	ab70      	add	r3, sp, #448	; 0x1c0
 800377c:	f04f 0b00 	mov.w	fp, #0
 8003780:	2600      	movs	r6, #0
 8003782:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8003786:	e0d9      	b.n	800393c <__kernel_rem_pio2+0x498>
 8003788:	2302      	movs	r3, #2
 800378a:	9302      	str	r3, [sp, #8]
 800378c:	e756      	b.n	800363c <__kernel_rem_pio2+0x198>
 800378e:	f8db 3000 	ldr.w	r3, [fp]
 8003792:	b954      	cbnz	r4, 80037aa <__kernel_rem_pio2+0x306>
 8003794:	b123      	cbz	r3, 80037a0 <__kernel_rem_pio2+0x2fc>
 8003796:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800379a:	f8cb 3000 	str.w	r3, [fp]
 800379e:	2301      	movs	r3, #1
 80037a0:	461c      	mov	r4, r3
 80037a2:	3201      	adds	r2, #1
 80037a4:	f10b 0b04 	add.w	fp, fp, #4
 80037a8:	e74f      	b.n	800364a <__kernel_rem_pio2+0x1a6>
 80037aa:	1acb      	subs	r3, r1, r3
 80037ac:	f8cb 3000 	str.w	r3, [fp]
 80037b0:	4623      	mov	r3, r4
 80037b2:	e7f5      	b.n	80037a0 <__kernel_rem_pio2+0x2fc>
 80037b4:	080040c0 	.word	0x080040c0
 80037b8:	40200000 	.word	0x40200000
 80037bc:	3ff00000 	.word	0x3ff00000
 80037c0:	3e700000 	.word	0x3e700000
 80037c4:	41700000 	.word	0x41700000
 80037c8:	3fe00000 	.word	0x3fe00000
 80037cc:	08004080 	.word	0x08004080
 80037d0:	1e7a      	subs	r2, r7, #1
 80037d2:	ab0c      	add	r3, sp, #48	; 0x30
 80037d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80037dc:	a90c      	add	r1, sp, #48	; 0x30
 80037de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80037e2:	e740      	b.n	8003666 <__kernel_rem_pio2+0x1c2>
 80037e4:	1e7a      	subs	r2, r7, #1
 80037e6:	ab0c      	add	r3, sp, #48	; 0x30
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80037f0:	e7f4      	b.n	80037dc <__kernel_rem_pio2+0x338>
 80037f2:	a90c      	add	r1, sp, #48	; 0x30
 80037f4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	430a      	orrs	r2, r1
 80037fc:	e791      	b.n	8003722 <__kernel_rem_pio2+0x27e>
 80037fe:	3401      	adds	r4, #1
 8003800:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003804:	2a00      	cmp	r2, #0
 8003806:	d0fa      	beq.n	80037fe <__kernel_rem_pio2+0x35a>
 8003808:	9b08      	ldr	r3, [sp, #32]
 800380a:	1c7e      	adds	r6, r7, #1
 800380c:	18fd      	adds	r5, r7, r3
 800380e:	ab20      	add	r3, sp, #128	; 0x80
 8003810:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003814:	443c      	add	r4, r7
 8003816:	42b4      	cmp	r4, r6
 8003818:	da04      	bge.n	8003824 <__kernel_rem_pio2+0x380>
 800381a:	4627      	mov	r7, r4
 800381c:	e6c0      	b.n	80035a0 <__kernel_rem_pio2+0xfc>
 800381e:	2401      	movs	r4, #1
 8003820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003822:	e7ed      	b.n	8003800 <__kernel_rem_pio2+0x35c>
 8003824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003826:	462f      	mov	r7, r5
 8003828:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800382c:	f7fc fe4e 	bl	80004cc <__aeabi_i2d>
 8003830:	f04f 0b00 	mov.w	fp, #0
 8003834:	f04f 0800 	mov.w	r8, #0
 8003838:	f04f 0900 	mov.w	r9, #0
 800383c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800383e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8003842:	3b08      	subs	r3, #8
 8003844:	9302      	str	r3, [sp, #8]
 8003846:	9b06      	ldr	r3, [sp, #24]
 8003848:	459b      	cmp	fp, r3
 800384a:	dd07      	ble.n	800385c <__kernel_rem_pio2+0x3b8>
 800384c:	ab70      	add	r3, sp, #448	; 0x1c0
 800384e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003852:	463d      	mov	r5, r7
 8003854:	e9c3 8900 	strd	r8, r9, [r3]
 8003858:	3601      	adds	r6, #1
 800385a:	e7dc      	b.n	8003816 <__kernel_rem_pio2+0x372>
 800385c:	9902      	ldr	r1, [sp, #8]
 800385e:	f10b 0b01 	add.w	fp, fp, #1
 8003862:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003866:	9102      	str	r1, [sp, #8]
 8003868:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800386c:	f7fc fe98 	bl	80005a0 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4640      	mov	r0, r8
 8003876:	4649      	mov	r1, r9
 8003878:	f7fc fcdc 	bl	8000234 <__adddf3>
 800387c:	4680      	mov	r8, r0
 800387e:	4689      	mov	r9, r1
 8003880:	e7e1      	b.n	8003846 <__kernel_rem_pio2+0x3a2>
 8003882:	3c01      	subs	r4, #1
 8003884:	e752      	b.n	800372c <__kernel_rem_pio2+0x288>
 8003886:	f1ca 0200 	rsb	r2, sl, #0
 800388a:	4640      	mov	r0, r8
 800388c:	4649      	mov	r1, r9
 800388e:	f000 fa8f 	bl	8003db0 <scalbn>
 8003892:	2200      	movs	r2, #0
 8003894:	4ba5      	ldr	r3, [pc, #660]	; (8003b2c <__kernel_rem_pio2+0x688>)
 8003896:	4604      	mov	r4, r0
 8003898:	460d      	mov	r5, r1
 800389a:	f7fd f907 	bl	8000aac <__aeabi_dcmpge>
 800389e:	b1f8      	cbz	r0, 80038e0 <__kernel_rem_pio2+0x43c>
 80038a0:	2200      	movs	r2, #0
 80038a2:	4ba3      	ldr	r3, [pc, #652]	; (8003b30 <__kernel_rem_pio2+0x68c>)
 80038a4:	4620      	mov	r0, r4
 80038a6:	4629      	mov	r1, r5
 80038a8:	f7fc fe7a 	bl	80005a0 <__aeabi_dmul>
 80038ac:	f7fd f912 	bl	8000ad4 <__aeabi_d2iz>
 80038b0:	4606      	mov	r6, r0
 80038b2:	f7fc fe0b 	bl	80004cc <__aeabi_i2d>
 80038b6:	2200      	movs	r2, #0
 80038b8:	4b9c      	ldr	r3, [pc, #624]	; (8003b2c <__kernel_rem_pio2+0x688>)
 80038ba:	f7fc fe71 	bl	80005a0 <__aeabi_dmul>
 80038be:	460b      	mov	r3, r1
 80038c0:	4602      	mov	r2, r0
 80038c2:	4629      	mov	r1, r5
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7fc fcb3 	bl	8000230 <__aeabi_dsub>
 80038ca:	f7fd f903 	bl	8000ad4 <__aeabi_d2iz>
 80038ce:	1c7c      	adds	r4, r7, #1
 80038d0:	ab0c      	add	r3, sp, #48	; 0x30
 80038d2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80038d6:	f10a 0a18 	add.w	sl, sl, #24
 80038da:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80038de:	e72d      	b.n	800373c <__kernel_rem_pio2+0x298>
 80038e0:	4620      	mov	r0, r4
 80038e2:	4629      	mov	r1, r5
 80038e4:	f7fd f8f6 	bl	8000ad4 <__aeabi_d2iz>
 80038e8:	ab0c      	add	r3, sp, #48	; 0x30
 80038ea:	463c      	mov	r4, r7
 80038ec:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80038f0:	e724      	b.n	800373c <__kernel_rem_pio2+0x298>
 80038f2:	ab0c      	add	r3, sp, #48	; 0x30
 80038f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80038f8:	f7fc fde8 	bl	80004cc <__aeabi_i2d>
 80038fc:	4632      	mov	r2, r6
 80038fe:	463b      	mov	r3, r7
 8003900:	f7fc fe4e 	bl	80005a0 <__aeabi_dmul>
 8003904:	4642      	mov	r2, r8
 8003906:	e86b 0102 	strd	r0, r1, [fp], #-8
 800390a:	464b      	mov	r3, r9
 800390c:	4630      	mov	r0, r6
 800390e:	4639      	mov	r1, r7
 8003910:	f7fc fe46 	bl	80005a0 <__aeabi_dmul>
 8003914:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003918:	4606      	mov	r6, r0
 800391a:	460f      	mov	r7, r1
 800391c:	e71f      	b.n	800375e <__kernel_rem_pio2+0x2ba>
 800391e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003922:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003926:	f7fc fe3b 	bl	80005a0 <__aeabi_dmul>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4650      	mov	r0, sl
 8003930:	4659      	mov	r1, fp
 8003932:	f7fc fc7f 	bl	8000234 <__adddf3>
 8003936:	4682      	mov	sl, r0
 8003938:	468b      	mov	fp, r1
 800393a:	3601      	adds	r6, #1
 800393c:	9b04      	ldr	r3, [sp, #16]
 800393e:	429e      	cmp	r6, r3
 8003940:	dc01      	bgt.n	8003946 <__kernel_rem_pio2+0x4a2>
 8003942:	45b0      	cmp	r8, r6
 8003944:	daeb      	bge.n	800391e <__kernel_rem_pio2+0x47a>
 8003946:	ab48      	add	r3, sp, #288	; 0x120
 8003948:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800394c:	e9c3 ab00 	strd	sl, fp, [r3]
 8003950:	3f01      	subs	r7, #1
 8003952:	f108 0801 	add.w	r8, r8, #1
 8003956:	e709      	b.n	800376c <__kernel_rem_pio2+0x2c8>
 8003958:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800395a:	2b02      	cmp	r3, #2
 800395c:	dc09      	bgt.n	8003972 <__kernel_rem_pio2+0x4ce>
 800395e:	2b00      	cmp	r3, #0
 8003960:	dc34      	bgt.n	80039cc <__kernel_rem_pio2+0x528>
 8003962:	d05e      	beq.n	8003a22 <__kernel_rem_pio2+0x57e>
 8003964:	9b07      	ldr	r3, [sp, #28]
 8003966:	f003 0007 	and.w	r0, r3, #7
 800396a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800396e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003972:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003974:	2b03      	cmp	r3, #3
 8003976:	d1f5      	bne.n	8003964 <__kernel_rem_pio2+0x4c0>
 8003978:	9a06      	ldr	r2, [sp, #24]
 800397a:	ab48      	add	r3, sp, #288	; 0x120
 800397c:	441a      	add	r2, r3
 800397e:	4615      	mov	r5, r2
 8003980:	4692      	mov	sl, r2
 8003982:	46a3      	mov	fp, r4
 8003984:	f1bb 0f00 	cmp.w	fp, #0
 8003988:	dc7a      	bgt.n	8003a80 <__kernel_rem_pio2+0x5dc>
 800398a:	46aa      	mov	sl, r5
 800398c:	46a3      	mov	fp, r4
 800398e:	f1bb 0f01 	cmp.w	fp, #1
 8003992:	f300 8094 	bgt.w	8003abe <__kernel_rem_pio2+0x61a>
 8003996:	2700      	movs	r7, #0
 8003998:	463e      	mov	r6, r7
 800399a:	2c01      	cmp	r4, #1
 800399c:	f300 80ae 	bgt.w	8003afc <__kernel_rem_pio2+0x658>
 80039a0:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80039a4:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80039a8:	9b02      	ldr	r3, [sp, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 80b0 	bne.w	8003b10 <__kernel_rem_pio2+0x66c>
 80039b0:	4603      	mov	r3, r0
 80039b2:	462a      	mov	r2, r5
 80039b4:	9801      	ldr	r0, [sp, #4]
 80039b6:	e9c0 2300 	strd	r2, r3, [r0]
 80039ba:	4622      	mov	r2, r4
 80039bc:	460b      	mov	r3, r1
 80039be:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80039c2:	463a      	mov	r2, r7
 80039c4:	4633      	mov	r3, r6
 80039c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80039ca:	e7cb      	b.n	8003964 <__kernel_rem_pio2+0x4c0>
 80039cc:	2000      	movs	r0, #0
 80039ce:	9a06      	ldr	r2, [sp, #24]
 80039d0:	ab48      	add	r3, sp, #288	; 0x120
 80039d2:	441a      	add	r2, r3
 80039d4:	4615      	mov	r5, r2
 80039d6:	46a0      	mov	r8, r4
 80039d8:	4601      	mov	r1, r0
 80039da:	f1b8 0f00 	cmp.w	r8, #0
 80039de:	da3c      	bge.n	8003a5a <__kernel_rem_pio2+0x5b6>
 80039e0:	9b02      	ldr	r3, [sp, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d040      	beq.n	8003a68 <__kernel_rem_pio2+0x5c4>
 80039e6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80039ea:	4602      	mov	r2, r0
 80039ec:	462b      	mov	r3, r5
 80039ee:	9d01      	ldr	r5, [sp, #4]
 80039f0:	2601      	movs	r6, #1
 80039f2:	e9c5 2300 	strd	r2, r3, [r5]
 80039f6:	460b      	mov	r3, r1
 80039f8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80039fc:	f7fc fc18 	bl	8000230 <__aeabi_dsub>
 8003a00:	4684      	mov	ip, r0
 8003a02:	460f      	mov	r7, r1
 8003a04:	ad48      	add	r5, sp, #288	; 0x120
 8003a06:	42b4      	cmp	r4, r6
 8003a08:	f105 0508 	add.w	r5, r5, #8
 8003a0c:	da2e      	bge.n	8003a6c <__kernel_rem_pio2+0x5c8>
 8003a0e:	9b02      	ldr	r3, [sp, #8]
 8003a10:	b10b      	cbz	r3, 8003a16 <__kernel_rem_pio2+0x572>
 8003a12:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003a16:	4662      	mov	r2, ip
 8003a18:	463b      	mov	r3, r7
 8003a1a:	9901      	ldr	r1, [sp, #4]
 8003a1c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003a20:	e7a0      	b.n	8003964 <__kernel_rem_pio2+0x4c0>
 8003a22:	9a06      	ldr	r2, [sp, #24]
 8003a24:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8003a26:	ab48      	add	r3, sp, #288	; 0x120
 8003a28:	441a      	add	r2, r3
 8003a2a:	4615      	mov	r5, r2
 8003a2c:	4637      	mov	r7, r6
 8003a2e:	2c00      	cmp	r4, #0
 8003a30:	da09      	bge.n	8003a46 <__kernel_rem_pio2+0x5a2>
 8003a32:	9b02      	ldr	r3, [sp, #8]
 8003a34:	b10b      	cbz	r3, 8003a3a <__kernel_rem_pio2+0x596>
 8003a36:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8003a3a:	4632      	mov	r2, r6
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	9901      	ldr	r1, [sp, #4]
 8003a40:	e9c1 2300 	strd	r2, r3, [r1]
 8003a44:	e78e      	b.n	8003964 <__kernel_rem_pio2+0x4c0>
 8003a46:	4630      	mov	r0, r6
 8003a48:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003a4c:	4639      	mov	r1, r7
 8003a4e:	f7fc fbf1 	bl	8000234 <__adddf3>
 8003a52:	3c01      	subs	r4, #1
 8003a54:	4606      	mov	r6, r0
 8003a56:	460f      	mov	r7, r1
 8003a58:	e7e9      	b.n	8003a2e <__kernel_rem_pio2+0x58a>
 8003a5a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003a5e:	f7fc fbe9 	bl	8000234 <__adddf3>
 8003a62:	f108 38ff 	add.w	r8, r8, #4294967295
 8003a66:	e7b8      	b.n	80039da <__kernel_rem_pio2+0x536>
 8003a68:	460d      	mov	r5, r1
 8003a6a:	e7be      	b.n	80039ea <__kernel_rem_pio2+0x546>
 8003a6c:	4660      	mov	r0, ip
 8003a6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003a72:	4639      	mov	r1, r7
 8003a74:	f7fc fbde 	bl	8000234 <__adddf3>
 8003a78:	3601      	adds	r6, #1
 8003a7a:	4684      	mov	ip, r0
 8003a7c:	460f      	mov	r7, r1
 8003a7e:	e7c2      	b.n	8003a06 <__kernel_rem_pio2+0x562>
 8003a80:	e9da 6700 	ldrd	r6, r7, [sl]
 8003a84:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8003a88:	4632      	mov	r2, r6
 8003a8a:	463b      	mov	r3, r7
 8003a8c:	4640      	mov	r0, r8
 8003a8e:	4649      	mov	r1, r9
 8003a90:	f7fc fbd0 	bl	8000234 <__adddf3>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	f7fc fbc6 	bl	8000230 <__aeabi_dsub>
 8003aa4:	4632      	mov	r2, r6
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	f7fc fbc4 	bl	8000234 <__adddf3>
 8003aac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ab0:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003ab4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ab8:	e9ca 2300 	strd	r2, r3, [sl]
 8003abc:	e762      	b.n	8003984 <__kernel_rem_pio2+0x4e0>
 8003abe:	e9da 8900 	ldrd	r8, r9, [sl]
 8003ac2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8003ac6:	4642      	mov	r2, r8
 8003ac8:	464b      	mov	r3, r9
 8003aca:	4630      	mov	r0, r6
 8003acc:	4639      	mov	r1, r7
 8003ace:	f7fc fbb1 	bl	8000234 <__adddf3>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ada:	4630      	mov	r0, r6
 8003adc:	4639      	mov	r1, r7
 8003ade:	f7fc fba7 	bl	8000230 <__aeabi_dsub>
 8003ae2:	4642      	mov	r2, r8
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	f7fc fba5 	bl	8000234 <__adddf3>
 8003aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003aee:	e86a 0102 	strd	r0, r1, [sl], #-8
 8003af2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003af6:	e9ca 2300 	strd	r2, r3, [sl]
 8003afa:	e748      	b.n	800398e <__kernel_rem_pio2+0x4ea>
 8003afc:	4638      	mov	r0, r7
 8003afe:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8003b02:	4631      	mov	r1, r6
 8003b04:	f7fc fb96 	bl	8000234 <__adddf3>
 8003b08:	3c01      	subs	r4, #1
 8003b0a:	4607      	mov	r7, r0
 8003b0c:	460e      	mov	r6, r1
 8003b0e:	e744      	b.n	800399a <__kernel_rem_pio2+0x4f6>
 8003b10:	9b01      	ldr	r3, [sp, #4]
 8003b12:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003b16:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003b1a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003b1e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8003b22:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8003b26:	601d      	str	r5, [r3, #0]
 8003b28:	615e      	str	r6, [r3, #20]
 8003b2a:	e71b      	b.n	8003964 <__kernel_rem_pio2+0x4c0>
 8003b2c:	41700000 	.word	0x41700000
 8003b30:	3e700000 	.word	0x3e700000
 8003b34:	00000000 	.word	0x00000000

08003b38 <__kernel_sin>:
 8003b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	e9cd 2300 	strd	r2, r3, [sp]
 8003b42:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003b46:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003b4a:	4682      	mov	sl, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003b50:	da03      	bge.n	8003b5a <__kernel_sin+0x22>
 8003b52:	f7fc ffbf 	bl	8000ad4 <__aeabi_d2iz>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d050      	beq.n	8003bfc <__kernel_sin+0xc4>
 8003b5a:	4652      	mov	r2, sl
 8003b5c:	4623      	mov	r3, r4
 8003b5e:	4650      	mov	r0, sl
 8003b60:	4621      	mov	r1, r4
 8003b62:	f7fc fd1d 	bl	80005a0 <__aeabi_dmul>
 8003b66:	4606      	mov	r6, r0
 8003b68:	460f      	mov	r7, r1
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4650      	mov	r0, sl
 8003b70:	4621      	mov	r1, r4
 8003b72:	f7fc fd15 	bl	80005a0 <__aeabi_dmul>
 8003b76:	a33e      	add	r3, pc, #248	; (adr r3, 8003c70 <__kernel_sin+0x138>)
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	4680      	mov	r8, r0
 8003b7e:	4689      	mov	r9, r1
 8003b80:	4630      	mov	r0, r6
 8003b82:	4639      	mov	r1, r7
 8003b84:	f7fc fd0c 	bl	80005a0 <__aeabi_dmul>
 8003b88:	a33b      	add	r3, pc, #236	; (adr r3, 8003c78 <__kernel_sin+0x140>)
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f7fc fb4f 	bl	8000230 <__aeabi_dsub>
 8003b92:	4632      	mov	r2, r6
 8003b94:	463b      	mov	r3, r7
 8003b96:	f7fc fd03 	bl	80005a0 <__aeabi_dmul>
 8003b9a:	a339      	add	r3, pc, #228	; (adr r3, 8003c80 <__kernel_sin+0x148>)
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f7fc fb48 	bl	8000234 <__adddf3>
 8003ba4:	4632      	mov	r2, r6
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	f7fc fcfa 	bl	80005a0 <__aeabi_dmul>
 8003bac:	a336      	add	r3, pc, #216	; (adr r3, 8003c88 <__kernel_sin+0x150>)
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	f7fc fb3d 	bl	8000230 <__aeabi_dsub>
 8003bb6:	4632      	mov	r2, r6
 8003bb8:	463b      	mov	r3, r7
 8003bba:	f7fc fcf1 	bl	80005a0 <__aeabi_dmul>
 8003bbe:	a334      	add	r3, pc, #208	; (adr r3, 8003c90 <__kernel_sin+0x158>)
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	f7fc fb36 	bl	8000234 <__adddf3>
 8003bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bcc:	b9dd      	cbnz	r5, 8003c06 <__kernel_sin+0xce>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	4639      	mov	r1, r7
 8003bd6:	f7fc fce3 	bl	80005a0 <__aeabi_dmul>
 8003bda:	a32f      	add	r3, pc, #188	; (adr r3, 8003c98 <__kernel_sin+0x160>)
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f7fc fb26 	bl	8000230 <__aeabi_dsub>
 8003be4:	4642      	mov	r2, r8
 8003be6:	464b      	mov	r3, r9
 8003be8:	f7fc fcda 	bl	80005a0 <__aeabi_dmul>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4650      	mov	r0, sl
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	f7fc fb1e 	bl	8000234 <__adddf3>
 8003bf8:	4682      	mov	sl, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	4650      	mov	r0, sl
 8003bfe:	4621      	mov	r1, r4
 8003c00:	b006      	add	sp, #24
 8003c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c06:	2200      	movs	r2, #0
 8003c08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c0c:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <__kernel_sin+0x168>)
 8003c0e:	f7fc fcc7 	bl	80005a0 <__aeabi_dmul>
 8003c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	f7fc fcbf 	bl	80005a0 <__aeabi_dmul>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c2a:	f7fc fb01 	bl	8000230 <__aeabi_dsub>
 8003c2e:	4632      	mov	r2, r6
 8003c30:	463b      	mov	r3, r7
 8003c32:	f7fc fcb5 	bl	80005a0 <__aeabi_dmul>
 8003c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c3a:	f7fc faf9 	bl	8000230 <__aeabi_dsub>
 8003c3e:	a316      	add	r3, pc, #88	; (adr r3, 8003c98 <__kernel_sin+0x160>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	4606      	mov	r6, r0
 8003c46:	460f      	mov	r7, r1
 8003c48:	4640      	mov	r0, r8
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	f7fc fca8 	bl	80005a0 <__aeabi_dmul>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4630      	mov	r0, r6
 8003c56:	4639      	mov	r1, r7
 8003c58:	f7fc faec 	bl	8000234 <__adddf3>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4650      	mov	r0, sl
 8003c62:	4621      	mov	r1, r4
 8003c64:	f7fc fae4 	bl	8000230 <__aeabi_dsub>
 8003c68:	e7c6      	b.n	8003bf8 <__kernel_sin+0xc0>
 8003c6a:	bf00      	nop
 8003c6c:	f3af 8000 	nop.w
 8003c70:	5acfd57c 	.word	0x5acfd57c
 8003c74:	3de5d93a 	.word	0x3de5d93a
 8003c78:	8a2b9ceb 	.word	0x8a2b9ceb
 8003c7c:	3e5ae5e6 	.word	0x3e5ae5e6
 8003c80:	57b1fe7d 	.word	0x57b1fe7d
 8003c84:	3ec71de3 	.word	0x3ec71de3
 8003c88:	19c161d5 	.word	0x19c161d5
 8003c8c:	3f2a01a0 	.word	0x3f2a01a0
 8003c90:	1110f8a6 	.word	0x1110f8a6
 8003c94:	3f811111 	.word	0x3f811111
 8003c98:	55555549 	.word	0x55555549
 8003c9c:	3fc55555 	.word	0x3fc55555
 8003ca0:	3fe00000 	.word	0x3fe00000

08003ca4 <fabs>:
 8003ca4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003ca8:	4770      	bx	lr
 8003caa:	0000      	movs	r0, r0
 8003cac:	0000      	movs	r0, r0
	...

08003cb0 <floor>:
 8003cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cb4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003cb8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8003cbc:	2e13      	cmp	r6, #19
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4607      	mov	r7, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	dc34      	bgt.n	8003d34 <floor+0x84>
 8003cca:	2e00      	cmp	r6, #0
 8003ccc:	da15      	bge.n	8003cfa <floor+0x4a>
 8003cce:	a334      	add	r3, pc, #208	; (adr r3, 8003da0 <floor+0xf0>)
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f7fc faae 	bl	8000234 <__adddf3>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f7fc fef0 	bl	8000ac0 <__aeabi_dcmpgt>
 8003ce0:	b140      	cbz	r0, 8003cf4 <floor+0x44>
 8003ce2:	2c00      	cmp	r4, #0
 8003ce4:	da59      	bge.n	8003d9a <floor+0xea>
 8003ce6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003cea:	ea57 0503 	orrs.w	r5, r7, r3
 8003cee:	d001      	beq.n	8003cf4 <floor+0x44>
 8003cf0:	2500      	movs	r5, #0
 8003cf2:	4c2d      	ldr	r4, [pc, #180]	; (8003da8 <floor+0xf8>)
 8003cf4:	4623      	mov	r3, r4
 8003cf6:	462f      	mov	r7, r5
 8003cf8:	e025      	b.n	8003d46 <floor+0x96>
 8003cfa:	4a2c      	ldr	r2, [pc, #176]	; (8003dac <floor+0xfc>)
 8003cfc:	fa42 f806 	asr.w	r8, r2, r6
 8003d00:	ea01 0208 	and.w	r2, r1, r8
 8003d04:	4302      	orrs	r2, r0
 8003d06:	d01e      	beq.n	8003d46 <floor+0x96>
 8003d08:	a325      	add	r3, pc, #148	; (adr r3, 8003da0 <floor+0xf0>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f7fc fa91 	bl	8000234 <__adddf3>
 8003d12:	2200      	movs	r2, #0
 8003d14:	2300      	movs	r3, #0
 8003d16:	f7fc fed3 	bl	8000ac0 <__aeabi_dcmpgt>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d0ea      	beq.n	8003cf4 <floor+0x44>
 8003d1e:	2c00      	cmp	r4, #0
 8003d20:	bfbe      	ittt	lt
 8003d22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003d26:	fa43 f606 	asrlt.w	r6, r3, r6
 8003d2a:	19a4      	addlt	r4, r4, r6
 8003d2c:	2500      	movs	r5, #0
 8003d2e:	ea24 0408 	bic.w	r4, r4, r8
 8003d32:	e7df      	b.n	8003cf4 <floor+0x44>
 8003d34:	2e33      	cmp	r6, #51	; 0x33
 8003d36:	dd0a      	ble.n	8003d4e <floor+0x9e>
 8003d38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003d3c:	d103      	bne.n	8003d46 <floor+0x96>
 8003d3e:	f7fc fa79 	bl	8000234 <__adddf3>
 8003d42:	4607      	mov	r7, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4638      	mov	r0, r7
 8003d48:	4619      	mov	r1, r3
 8003d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8003d56:	fa22 f808 	lsr.w	r8, r2, r8
 8003d5a:	ea18 0f00 	tst.w	r8, r0
 8003d5e:	d0f2      	beq.n	8003d46 <floor+0x96>
 8003d60:	a30f      	add	r3, pc, #60	; (adr r3, 8003da0 <floor+0xf0>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fa65 	bl	8000234 <__adddf3>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f7fc fea7 	bl	8000ac0 <__aeabi_dcmpgt>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d0be      	beq.n	8003cf4 <floor+0x44>
 8003d76:	2c00      	cmp	r4, #0
 8003d78:	da02      	bge.n	8003d80 <floor+0xd0>
 8003d7a:	2e14      	cmp	r6, #20
 8003d7c:	d103      	bne.n	8003d86 <floor+0xd6>
 8003d7e:	3401      	adds	r4, #1
 8003d80:	ea25 0508 	bic.w	r5, r5, r8
 8003d84:	e7b6      	b.n	8003cf4 <floor+0x44>
 8003d86:	2301      	movs	r3, #1
 8003d88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003d8c:	fa03 f606 	lsl.w	r6, r3, r6
 8003d90:	4435      	add	r5, r6
 8003d92:	42bd      	cmp	r5, r7
 8003d94:	bf38      	it	cc
 8003d96:	18e4      	addcc	r4, r4, r3
 8003d98:	e7f2      	b.n	8003d80 <floor+0xd0>
 8003d9a:	2500      	movs	r5, #0
 8003d9c:	462c      	mov	r4, r5
 8003d9e:	e7a9      	b.n	8003cf4 <floor+0x44>
 8003da0:	8800759c 	.word	0x8800759c
 8003da4:	7e37e43c 	.word	0x7e37e43c
 8003da8:	bff00000 	.word	0xbff00000
 8003dac:	000fffff 	.word	0x000fffff

08003db0 <scalbn>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003db6:	4604      	mov	r4, r0
 8003db8:	460d      	mov	r5, r1
 8003dba:	4617      	mov	r7, r2
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	b996      	cbnz	r6, 8003de6 <scalbn+0x36>
 8003dc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003dc4:	4303      	orrs	r3, r0
 8003dc6:	d039      	beq.n	8003e3c <scalbn+0x8c>
 8003dc8:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <scalbn+0xf0>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f7fc fbe8 	bl	80005a0 <__aeabi_dmul>
 8003dd0:	4b34      	ldr	r3, [pc, #208]	; (8003ea4 <scalbn+0xf4>)
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	429f      	cmp	r7, r3
 8003dd6:	460d      	mov	r5, r1
 8003dd8:	da0f      	bge.n	8003dfa <scalbn+0x4a>
 8003dda:	a32d      	add	r3, pc, #180	; (adr r3, 8003e90 <scalbn+0xe0>)
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f7fc fbde 	bl	80005a0 <__aeabi_dmul>
 8003de4:	e006      	b.n	8003df4 <scalbn+0x44>
 8003de6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003dea:	4296      	cmp	r6, r2
 8003dec:	d10a      	bne.n	8003e04 <scalbn+0x54>
 8003dee:	4602      	mov	r2, r0
 8003df0:	f7fc fa20 	bl	8000234 <__adddf3>
 8003df4:	4604      	mov	r4, r0
 8003df6:	460d      	mov	r5, r1
 8003df8:	e020      	b.n	8003e3c <scalbn+0x8c>
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003e00:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8003e04:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003e08:	19b9      	adds	r1, r7, r6
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	dd0e      	ble.n	8003e2c <scalbn+0x7c>
 8003e0e:	a322      	add	r3, pc, #136	; (adr r3, 8003e98 <scalbn+0xe8>)
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003e18:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003e1c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003e20:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003e24:	4820      	ldr	r0, [pc, #128]	; (8003ea8 <scalbn+0xf8>)
 8003e26:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003e2a:	e7d9      	b.n	8003de0 <scalbn+0x30>
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	dd08      	ble.n	8003e42 <scalbn+0x92>
 8003e30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003e34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	4629      	mov	r1, r5
 8003e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e42:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8003e46:	da16      	bge.n	8003e76 <scalbn+0xc6>
 8003e48:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003e4c:	429f      	cmp	r7, r3
 8003e4e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8003e52:	dd08      	ble.n	8003e66 <scalbn+0xb6>
 8003e54:	4c15      	ldr	r4, [pc, #84]	; (8003eac <scalbn+0xfc>)
 8003e56:	4814      	ldr	r0, [pc, #80]	; (8003ea8 <scalbn+0xf8>)
 8003e58:	f363 74df 	bfi	r4, r3, #31, #1
 8003e5c:	a30e      	add	r3, pc, #56	; (adr r3, 8003e98 <scalbn+0xe8>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	4621      	mov	r1, r4
 8003e64:	e7bc      	b.n	8003de0 <scalbn+0x30>
 8003e66:	4c12      	ldr	r4, [pc, #72]	; (8003eb0 <scalbn+0x100>)
 8003e68:	4812      	ldr	r0, [pc, #72]	; (8003eb4 <scalbn+0x104>)
 8003e6a:	f363 74df 	bfi	r4, r3, #31, #1
 8003e6e:	a308      	add	r3, pc, #32	; (adr r3, 8003e90 <scalbn+0xe0>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	e7f5      	b.n	8003e62 <scalbn+0xb2>
 8003e76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003e7a:	3136      	adds	r1, #54	; 0x36
 8003e7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003e84:	4620      	mov	r0, r4
 8003e86:	4629      	mov	r1, r5
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <scalbn+0x108>)
 8003e8c:	e7a8      	b.n	8003de0 <scalbn+0x30>
 8003e8e:	bf00      	nop
 8003e90:	c2f8f359 	.word	0xc2f8f359
 8003e94:	01a56e1f 	.word	0x01a56e1f
 8003e98:	8800759c 	.word	0x8800759c
 8003e9c:	7e37e43c 	.word	0x7e37e43c
 8003ea0:	43500000 	.word	0x43500000
 8003ea4:	ffff3cb0 	.word	0xffff3cb0
 8003ea8:	8800759c 	.word	0x8800759c
 8003eac:	7e37e43c 	.word	0x7e37e43c
 8003eb0:	01a56e1f 	.word	0x01a56e1f
 8003eb4:	c2f8f359 	.word	0xc2f8f359
 8003eb8:	3c900000 	.word	0x3c900000

08003ebc <_init>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr

08003ec8 <_fini>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr
