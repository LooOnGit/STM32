
TEstboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006128  08006128  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006128  08006128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006130  08006130  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006134  08006134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007dc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000086c  2000086c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018919  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003573  00000000  00000000  000389d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  0003bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea8  00000000  00000000  0003cf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235d8  00000000  00000000  0003ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b42  00000000  00000000  000613c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb1ec  00000000  00000000  00075f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001410f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000444c  00000000  00000000  0014114c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080060f4 	.word	0x080060f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080060f4 	.word	0x080060f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fbe2 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f832 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f928 	bl	8000720 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8c2 	bl	8000658 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d4:	f000 f8ee 	bl	80006b4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d8:	f005 fa52 	bl	8005980 <MX_USB_HOST_Init>
  MX_DAC_Init();
 80004dc:	f000 f892 	bl	8000604 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80004e0:	2100      	movs	r1, #0
 80004e2:	4812      	ldr	r0, [pc, #72]	; (800052c <main+0x6c>)
 80004e4:	f000 fd9b 	bl	800101e <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80004e8:	2300      	movs	r3, #0
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	480f      	ldr	r0, [pc, #60]	; (800052c <main+0x6c>)
 80004f0:	f000 fde7 	bl	80010c2 <HAL_DAC_SetValue>
	  HAL_Delay(2000);
 80004f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004f8:	f000 fc3a 	bl	8000d70 <HAL_Delay>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 80004fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	4809      	ldr	r0, [pc, #36]	; (800052c <main+0x6c>)
 8000506:	f000 fddc 	bl	80010c2 <HAL_DAC_SetValue>
	  HAL_Delay(2000);
 800050a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800050e:	f000 fc2f 	bl	8000d70 <HAL_Delay>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 8000512:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	4804      	ldr	r0, [pc, #16]	; (800052c <main+0x6c>)
 800051c:	f000 fdd1 	bl	80010c2 <HAL_DAC_SetValue>
	  HAL_Delay(2000);
 8000520:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000524:	f000 fc24 	bl	8000d70 <HAL_Delay>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000528:	e7de      	b.n	80004e8 <main+0x28>
 800052a:	bf00      	nop
 800052c:	20000110 	.word	0x20000110

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f005 fd08 	bl	8005f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fce0 	bl	8002f7c <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f9bb 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 ff41 	bl	800346c <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f9a4 	bl	800093c <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DAC_Init+0x4c>)
 8000614:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <MX_DAC_Init+0x50>)
 8000616:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <MX_DAC_Init+0x4c>)
 800061a:	f000 fcde 	bl	8000fda <HAL_DAC_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000624:	f000 f98a 	bl	800093c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <MX_DAC_Init+0x4c>)
 8000638:	f000 fd68 	bl	800110c <HAL_DAC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000642:	f000 f97b 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000110 	.word	0x20000110
 8000654:	40007400 	.word	0x40007400

08000658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x50>)
 800065e:	4a13      	ldr	r2, [pc, #76]	; (80006ac <MX_I2C1_Init+0x54>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_I2C1_Init+0x58>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800067a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_I2C1_Init+0x50>)
 8000696:	f002 fb2d 	bl	8002cf4 <HAL_I2C_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a0:	f000 f94c 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200000bc 	.word	0x200000bc
 80006ac:	40005400 	.word	0x40005400
 80006b0:	000186a0 	.word	0x000186a0

080006b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_SPI1_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_SPI1_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_SPI1_Init+0x64>)
 8000706:	f003 f899 	bl	800383c <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f914 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000124 	.word	0x20000124
 800071c:	40013000 	.word	0x40013000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	4b7a      	ldr	r3, [pc, #488]	; (8000924 <MX_GPIO_Init+0x204>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a79      	ldr	r2, [pc, #484]	; (8000924 <MX_GPIO_Init+0x204>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b77      	ldr	r3, [pc, #476]	; (8000924 <MX_GPIO_Init+0x204>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	4b73      	ldr	r3, [pc, #460]	; (8000924 <MX_GPIO_Init+0x204>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a72      	ldr	r2, [pc, #456]	; (8000924 <MX_GPIO_Init+0x204>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b70      	ldr	r3, [pc, #448]	; (8000924 <MX_GPIO_Init+0x204>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b6c      	ldr	r3, [pc, #432]	; (8000924 <MX_GPIO_Init+0x204>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a6b      	ldr	r2, [pc, #428]	; (8000924 <MX_GPIO_Init+0x204>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b69      	ldr	r3, [pc, #420]	; (8000924 <MX_GPIO_Init+0x204>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b65      	ldr	r3, [pc, #404]	; (8000924 <MX_GPIO_Init+0x204>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a64      	ldr	r2, [pc, #400]	; (8000924 <MX_GPIO_Init+0x204>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b62      	ldr	r3, [pc, #392]	; (8000924 <MX_GPIO_Init+0x204>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <MX_GPIO_Init+0x204>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a5d      	ldr	r2, [pc, #372]	; (8000924 <MX_GPIO_Init+0x204>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b5b      	ldr	r3, [pc, #364]	; (8000924 <MX_GPIO_Init+0x204>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b57      	ldr	r3, [pc, #348]	; (8000924 <MX_GPIO_Init+0x204>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a56      	ldr	r2, [pc, #344]	; (8000924 <MX_GPIO_Init+0x204>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b54      	ldr	r3, [pc, #336]	; (8000924 <MX_GPIO_Init+0x204>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	4851      	ldr	r0, [pc, #324]	; (8000928 <MX_GPIO_Init+0x208>)
 80007e4:	f000 fe7e 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2101      	movs	r1, #1
 80007ec:	484f      	ldr	r0, [pc, #316]	; (800092c <MX_GPIO_Init+0x20c>)
 80007ee:	f000 fe79 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f2:	2200      	movs	r2, #0
 80007f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f8:	484d      	ldr	r0, [pc, #308]	; (8000930 <MX_GPIO_Init+0x210>)
 80007fa:	f000 fe73 	bl	80014e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fe:	2308      	movs	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4844      	ldr	r0, [pc, #272]	; (8000928 <MX_GPIO_Init+0x208>)
 8000816:	f000 fcc9 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	483e      	ldr	r0, [pc, #248]	; (800092c <MX_GPIO_Init+0x20c>)
 8000832:	f000 fcbb 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4836      	ldr	r0, [pc, #216]	; (800092c <MX_GPIO_Init+0x20c>)
 8000852:	f000 fcab 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4832      	ldr	r0, [pc, #200]	; (8000934 <MX_GPIO_Init+0x214>)
 800086c:	f000 fc9e 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000870:	2304      	movs	r3, #4
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	482d      	ldr	r0, [pc, #180]	; (8000938 <MX_GPIO_Init+0x218>)
 8000884:	f000 fc92 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4824      	ldr	r0, [pc, #144]	; (8000938 <MX_GPIO_Init+0x218>)
 80008a6:	f000 fc81 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008aa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	481b      	ldr	r0, [pc, #108]	; (8000930 <MX_GPIO_Init+0x210>)
 80008c4:	f000 fc72 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008da:	2306      	movs	r3, #6
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4811      	ldr	r0, [pc, #68]	; (800092c <MX_GPIO_Init+0x20c>)
 80008e6:	f000 fc61 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008ea:	2320      	movs	r3, #32
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_GPIO_Init+0x210>)
 80008fe:	f000 fc55 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000902:	2302      	movs	r3, #2
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000906:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_GPIO_Init+0x208>)
 8000918:	f000 fc48 	bl	80011ac <HAL_GPIO_Init>

}
 800091c:	bf00      	nop
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40021000 	.word	0x40021000
 800092c:	40020800 	.word	0x40020800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40020000 	.word	0x40020000
 8000938:	40020400 	.word	0x40020400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000986:	2007      	movs	r0, #7
 8000988:	f000 fae6 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_DAC_MspInit+0x7c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d127      	bne.n	8000a0a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <HAL_DAC_MspInit+0x80>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_DAC_MspInit+0x80>)
 80009c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_DAC_MspInit+0x80>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_DAC_MspInit+0x80>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_DAC_MspInit+0x80>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_DAC_MspInit+0x80>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009f2:	2310      	movs	r3, #16
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <HAL_DAC_MspInit+0x84>)
 8000a06:	f000 fbd1 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40007400 	.word	0x40007400
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_I2C_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12c      	bne.n	8000a9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <HAL_I2C_MspInit+0x8c>)
 8000a7c:	f000 fb96 	bl	80011ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	; 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_SPI_MspInit+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12b      	bne.n	8000b2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_SPI_MspInit+0x88>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_SPI_MspInit+0x88>)
 8000adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_SPI_MspInit+0x88>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_SPI_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_SPI_MspInit+0x88>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_SPI_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b0a:	23e0      	movs	r3, #224	; 0xe0
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_SPI_MspInit+0x8c>)
 8000b26:	f000 fb41 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40013000 	.word	0x40013000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f8d0 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <OTG_FS_IRQHandler+0x10>)
 8000b9a:	f000 ff27 	bl	80019ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000558 	.word	0x20000558

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f005 f982 	bl	8005ee0 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20020000 	.word	0x20020000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	200000ac 	.word	0x200000ac
 8000c10:	20000870 	.word	0x20000870

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f005 f941 	bl	8005eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc29 	bl	80004c0 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c7c:	08006138 	.word	0x08006138
  ldr r2, =_sbss
 8000c80:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c84:	2000086c 	.word	0x2000086c

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f94f 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe42 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f967 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f92f 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	2000017c 	.word	0x2000017c

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	2000017c 	.word	0x2000017c

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffde 	bl	8000d58 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e014      	b.n	8001016 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	791b      	ldrb	r3, [r3, #4]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d105      	bne.n	8001002 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff fccb 	bl	8000998 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2202      	movs	r2, #2
 8001006:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	795b      	ldrb	r3, [r3, #5]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_DAC_Start+0x16>
 8001030:	2302      	movs	r3, #2
 8001032:	e040      	b.n	80010b6 <HAL_DAC_Start+0x98>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2202      	movs	r2, #2
 800103e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	2201      	movs	r2, #1
 800104e:	409a      	lsls	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10f      	bne.n	800107e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001068:	2b3c      	cmp	r3, #60	; 0x3c
 800106a:	d11d      	bne.n	80010a8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	e014      	b.n	80010a8 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	213c      	movs	r1, #60	; 0x3c
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	429a      	cmp	r2, r3
 8001096:	d107      	bne.n	80010a8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0202 	orr.w	r2, r2, #2
 80010a6:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b087      	sub	sp, #28
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d105      	bne.n	80010ec <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	3308      	adds	r3, #8
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e004      	b.n	80010f6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	3314      	adds	r3, #20
 80010f4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	461a      	mov	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	795b      	ldrb	r3, [r3, #5]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <HAL_DAC_ConfigChannel+0x18>
 8001120:	2302      	movs	r3, #2
 8001122:	e03c      	b.n	800119e <HAL_DAC_ConfigChannel+0x92>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2201      	movs	r2, #1
 8001128:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2202      	movs	r2, #2
 800112e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	4013      	ands	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6819      	ldr	r1, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	22c0      	movs	r2, #192	; 0xc0
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2201      	movs	r2, #1
 8001194:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	e16b      	b.n	80014a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 815a 	bne.w	800149a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d130      	bne.n	8001260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 0201 	and.w	r2, r3, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b03      	cmp	r3, #3
 800126a:	d017      	beq.n	800129c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d123      	bne.n	80012f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	69b9      	ldr	r1, [r7, #24]
 80012ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0203 	and.w	r2, r3, #3
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80b4 	beq.w	800149a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <HAL_GPIO_Init+0x30c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a5f      	ldr	r2, [pc, #380]	; (80014b8 <HAL_GPIO_Init+0x30c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <HAL_GPIO_Init+0x30c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134e:	4a5b      	ldr	r2, [pc, #364]	; (80014bc <HAL_GPIO_Init+0x310>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a52      	ldr	r2, [pc, #328]	; (80014c0 <HAL_GPIO_Init+0x314>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d02b      	beq.n	80013d2 <HAL_GPIO_Init+0x226>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <HAL_GPIO_Init+0x318>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d025      	beq.n	80013ce <HAL_GPIO_Init+0x222>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_GPIO_Init+0x31c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01f      	beq.n	80013ca <HAL_GPIO_Init+0x21e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <HAL_GPIO_Init+0x320>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0x21a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4e      	ldr	r2, [pc, #312]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x216>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4d      	ldr	r2, [pc, #308]	; (80014d4 <HAL_GPIO_Init+0x328>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x212>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x32c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x20e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <HAL_GPIO_Init+0x330>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x20a>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e00e      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013b6:	2308      	movs	r3, #8
 80013b8:	e00c      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013ba:	2306      	movs	r3, #6
 80013bc:	e00a      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013be:	2305      	movs	r3, #5
 80013c0:	e008      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013d2:	2300      	movs	r3, #0
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	f002 0203 	and.w	r2, r2, #3
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4093      	lsls	r3, r2
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e4:	4935      	ldr	r1, [pc, #212]	; (80014bc <HAL_GPIO_Init+0x310>)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <HAL_GPIO_Init+0x334>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_GPIO_Init+0x334>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146a:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_GPIO_Init+0x334>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3301      	adds	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	f67f ae90 	bls.w	80011c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40013800 	.word	0x40013800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40020800 	.word	0x40020800
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40021400 	.word	0x40021400
 80014d8:	40021800 	.word	0x40021800
 80014dc:	40021c00 	.word	0x40021c00
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001518:	b08f      	sub	sp, #60	; 0x3c
 800151a:	af0a      	add	r7, sp, #40	; 0x28
 800151c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e054      	b.n	80015d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f004 fa70 	bl	8005a28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2203      	movs	r2, #3
 800154c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fa63 	bl	8003a32 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	687e      	ldr	r6, [r7, #4]
 8001574:	466d      	mov	r5, sp
 8001576:	f106 0410 	add.w	r4, r6, #16
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001586:	e885 0003 	stmia.w	r5, {r0, r1}
 800158a:	1d33      	adds	r3, r6, #4
 800158c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f002 f9dd 	bl	800394e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2101      	movs	r1, #1
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fa5a 	bl	8003a54 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	687e      	ldr	r6, [r7, #4]
 80015a8:	466d      	mov	r5, sp
 80015aa:	f106 0410 	add.w	r4, r6, #16
 80015ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80015be:	1d33      	adds	r3, r6, #4
 80015c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f002 fbe2 	bl	8003d8c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015da:	b590      	push	{r4, r7, lr}
 80015dc:	b089      	sub	sp, #36	; 0x24
 80015de:	af04      	add	r7, sp, #16
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	4608      	mov	r0, r1
 80015e4:	4611      	mov	r1, r2
 80015e6:	461a      	mov	r2, r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	70fb      	strb	r3, [r7, #3]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70bb      	strb	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_HCD_HC_Init+0x28>
 80015fe:	2302      	movs	r3, #2
 8001600:	e076      	b.n	80016f0 <HAL_HCD_HC_Init+0x116>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	212c      	movs	r1, #44	; 0x2c
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	4413      	add	r3, r2
 8001616:	333d      	adds	r3, #61	; 0x3d
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	212c      	movs	r1, #44	; 0x2c
 8001622:	fb01 f303 	mul.w	r3, r1, r3
 8001626:	4413      	add	r3, r2
 8001628:	3338      	adds	r3, #56	; 0x38
 800162a:	787a      	ldrb	r2, [r7, #1]
 800162c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	212c      	movs	r1, #44	; 0x2c
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3340      	adds	r3, #64	; 0x40
 800163c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800163e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	212c      	movs	r1, #44	; 0x2c
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	3339      	adds	r3, #57	; 0x39
 800164e:	78fa      	ldrb	r2, [r7, #3]
 8001650:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	212c      	movs	r1, #44	; 0x2c
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	4413      	add	r3, r2
 800165e:	333f      	adds	r3, #63	; 0x3f
 8001660:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	78ba      	ldrb	r2, [r7, #2]
 800166a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800166e:	b2d0      	uxtb	r0, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	212c      	movs	r1, #44	; 0x2c
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	4413      	add	r3, r2
 800167a:	333a      	adds	r3, #58	; 0x3a
 800167c:	4602      	mov	r2, r0
 800167e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001680:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da09      	bge.n	800169c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	212c      	movs	r1, #44	; 0x2c
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	333b      	adds	r3, #59	; 0x3b
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e008      	b.n	80016ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	333b      	adds	r3, #59	; 0x3b
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	333c      	adds	r3, #60	; 0x3c
 80016bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	787c      	ldrb	r4, [r7, #1]
 80016c8:	78ba      	ldrb	r2, [r7, #2]
 80016ca:	78f9      	ldrb	r1, [r7, #3]
 80016cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4623      	mov	r3, r4
 80016de:	f002 fcb1 	bl	8004044 <USB_HC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}

080016f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_HCD_HC_Halt+0x1e>
 8001712:	2302      	movs	r3, #2
 8001714:	e00f      	b.n	8001736 <HAL_HCD_HC_Halt+0x3e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f002 ff01 	bl	800452e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	461a      	mov	r2, r3
 800174e:	4603      	mov	r3, r0
 8001750:	70fb      	strb	r3, [r7, #3]
 8001752:	460b      	mov	r3, r1
 8001754:	70bb      	strb	r3, [r7, #2]
 8001756:	4613      	mov	r3, r2
 8001758:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	333b      	adds	r3, #59	; 0x3b
 8001768:	78ba      	ldrb	r2, [r7, #2]
 800176a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	212c      	movs	r1, #44	; 0x2c
 8001772:	fb01 f303 	mul.w	r3, r1, r3
 8001776:	4413      	add	r3, r2
 8001778:	333f      	adds	r3, #63	; 0x3f
 800177a:	787a      	ldrb	r2, [r7, #1]
 800177c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800177e:	7c3b      	ldrb	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d112      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	3342      	adds	r3, #66	; 0x42
 8001792:	2203      	movs	r2, #3
 8001794:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	333d      	adds	r3, #61	; 0x3d
 80017a4:	7f3a      	ldrb	r2, [r7, #28]
 80017a6:	701a      	strb	r2, [r3, #0]
 80017a8:	e008      	b.n	80017bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	3342      	adds	r3, #66	; 0x42
 80017b8:	2202      	movs	r2, #2
 80017ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	f200 80c6 	bhi.w	8001950 <HAL_HCD_HC_SubmitRequest+0x210>
 80017c4:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ca:	bf00      	nop
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	0800193d 	.word	0x0800193d
 80017d4:	08001841 	.word	0x08001841
 80017d8:	080018bf 	.word	0x080018bf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017dc:	7c3b      	ldrb	r3, [r7, #16]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f040 80b8 	bne.w	8001954 <HAL_HCD_HC_SubmitRequest+0x214>
 80017e4:	78bb      	ldrb	r3, [r7, #2]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 80b4 	bne.w	8001954 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017ec:	8b3b      	ldrh	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	212c      	movs	r1, #44	; 0x2c
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3355      	adds	r3, #85	; 0x55
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3355      	adds	r3, #85	; 0x55
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3342      	adds	r3, #66	; 0x42
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800182a:	e093      	b.n	8001954 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2202      	movs	r2, #2
 800183c:	701a      	strb	r2, [r3, #0]
      break;
 800183e:	e089      	b.n	8001954 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001840:	78bb      	ldrb	r3, [r7, #2]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d11d      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	3355      	adds	r3, #85	; 0x55
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3342      	adds	r3, #66	; 0x42
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800186c:	e073      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	3342      	adds	r3, #66	; 0x42
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
      break;
 8001880:	e069      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3354      	adds	r3, #84	; 0x54
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3342      	adds	r3, #66	; 0x42
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
      break;
 80018a8:	e055      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3342      	adds	r3, #66	; 0x42
 80018b8:	2202      	movs	r2, #2
 80018ba:	701a      	strb	r2, [r3, #0]
      break;
 80018bc:	e04b      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018be:	78bb      	ldrb	r3, [r7, #2]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d11d      	bne.n	8001900 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3355      	adds	r3, #85	; 0x55
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3342      	adds	r3, #66	; 0x42
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018ea:	e034      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	3342      	adds	r3, #66	; 0x42
 80018fa:	2202      	movs	r2, #2
 80018fc:	701a      	strb	r2, [r3, #0]
      break;
 80018fe:	e02a      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3354      	adds	r3, #84	; 0x54
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3342      	adds	r3, #66	; 0x42
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
      break;
 8001926:	e016      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3342      	adds	r3, #66	; 0x42
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
      break;
 800193a:	e00c      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3342      	adds	r3, #66	; 0x42
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e002      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001950:	bf00      	nop
 8001952:	e000      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001954:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3344      	adds	r3, #68	; 0x44
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	8b3a      	ldrh	r2, [r7, #24]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	202c      	movs	r0, #44	; 0x2c
 8001970:	fb00 f303 	mul.w	r3, r0, r3
 8001974:	440b      	add	r3, r1
 8001976:	334c      	adds	r3, #76	; 0x4c
 8001978:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3360      	adds	r3, #96	; 0x60
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3350      	adds	r3, #80	; 0x50
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3339      	adds	r3, #57	; 0x39
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3361      	adds	r3, #97	; 0x61
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	222c      	movs	r2, #44	; 0x2c
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	3338      	adds	r3, #56	; 0x38
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	18d1      	adds	r1, r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	f002 fc54 	bl	8004288 <USB_HC_StartXfer>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop

080019ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 f97f 	bl	8003d06 <USB_GetMode>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	f040 80f6 	bne.w	8001bfc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 f963 	bl	8003ce0 <USB_ReadInterrupts>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80ec 	beq.w	8001bfa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 f95a 	bl	8003ce0 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a36:	d104      	bne.n	8001a42 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 f94a 	bl	8003ce0 <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a56:	d104      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 f93a 	bl	8003ce0 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a76:	d104      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 f92a 	bl	8003ce0 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d103      	bne.n	8001a9e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 f91c 	bl	8003ce0 <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ab2:	d11c      	bne.n	8001aee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001abc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ace:	2110      	movs	r1, #16
 8001ad0:	6938      	ldr	r0, [r7, #16]
 8001ad2:	f002 f80b 	bl	8003aec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ad6:	6938      	ldr	r0, [r7, #16]
 8001ad8:	f002 f83c 	bl	8003b54 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fa12 	bl	8003f0c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f004 f81b 	bl	8005b24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 f8f4 	bl	8003ce0 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001afe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b02:	d102      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f001 f882 	bl	8002c0e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 f8e6 	bl	8003ce0 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d106      	bne.n	8001b2c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f003 ffe4 	bl	8005aec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 f8d5 	bl	8003ce0 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d101      	bne.n	8001b44 <HAL_HCD_IRQHandler+0x158>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_HCD_IRQHandler+0x15a>
 8001b44:	2300      	movs	r3, #0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d012      	beq.n	8001b70 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0210 	bic.w	r2, r2, #16
 8001b58:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 ff85 	bl	8002a6a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0210 	orr.w	r2, r2, #16
 8001b6e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 f8b3 	bl	8003ce0 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b84:	d13a      	bne.n	8001bfc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fcbe 	bl	800450c <USB_HC_ReadInterrupt>
 8001b90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e025      	b.n	8001be4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d018      	beq.n	8001bde <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f88f 	bl	8001cee <HCD_HC_IN_IRQHandler>
 8001bd0:	e005      	b.n	8001bde <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fbdd 	bl	8002398 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3d4      	bcc.n	8001b98 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf6:	615a      	str	r2, [r3, #20]
 8001bf8:	e000      	b.n	8001bfc <HAL_HCD_IRQHandler+0x210>
      return;
 8001bfa:	bf00      	nop
    }
  }
}
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_HCD_Start+0x16>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e013      	b.n	8001c40 <HAL_HCD_Start+0x3e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 f9aa 	bl	8003f80 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 feed 	bl	8003a10 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_HCD_Stop+0x16>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e00d      	b.n	8001c7a <HAL_HCD_Stop+0x32>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fd98 	bl	80047a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	212c      	movs	r1, #44	; 0x2c
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	3360      	adds	r3, #96	; 0x60
 8001c9c:	781b      	ldrb	r3, [r3, #0]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3350      	adds	r3, #80	; 0x50
 8001cc4:	681b      	ldr	r3, [r3, #0]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 f99e 	bl	8004020 <USB_GetCurrentFrame>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d11a      	bne.n	8001d54 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3361      	adds	r3, #97	; 0x61
 8001d3e:	2206      	movs	r2, #6
 8001d40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 fbee 	bl	800452e <USB_HC_Halt>
 8001d52:	e0af      	b.n	8001eb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6a:	d11b      	bne.n	8001da4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3361      	adds	r3, #97	; 0x61
 8001d8e:	2207      	movs	r2, #7
 8001d90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fbc6 	bl	800452e <USB_HC_Halt>
 8001da2:	e087      	b.n	8001eb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	d109      	bne.n	8001dce <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2320      	movs	r3, #32
 8001dca:	6093      	str	r3, [r2, #8]
 8001dcc:	e072      	b.n	8001eb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d11a      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	461a      	mov	r2, r3
 8001df2:	2308      	movs	r3, #8
 8001df4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	212c      	movs	r1, #44	; 0x2c
 8001dfc:	fb01 f303 	mul.w	r3, r1, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	3361      	adds	r3, #97	; 0x61
 8001e04:	2205      	movs	r2, #5
 8001e06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 fb8b 	bl	800452e <USB_HC_Halt>
 8001e18:	e04c      	b.n	8001eb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e30:	d11b      	bne.n	8001e6a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3361      	adds	r3, #97	; 0x61
 8001e54:	2208      	movs	r2, #8
 8001e56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 fb63 	bl	800452e <USB_HC_Halt>
 8001e68:	e024      	b.n	8001eb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d119      	bne.n	8001eb4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3361      	adds	r3, #97	; 0x61
 8001ea0:	2206      	movs	r2, #6
 8001ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fb3d 	bl	800452e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eca:	d112      	bne.n	8001ef2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fb29 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eee:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ef0:	e24e      	b.n	8002390 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	f040 80df 	bne.w	80020c8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d019      	beq.n	8001f46 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3348      	adds	r3, #72	; 0x48
 8001f20:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	0159      	lsls	r1, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f34:	1ad2      	subs	r2, r2, r3
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	202c      	movs	r0, #44	; 0x2c
 8001f3c:	fb00 f303 	mul.w	r3, r0, r3
 8001f40:	440b      	add	r3, r1
 8001f42:	3350      	adds	r3, #80	; 0x50
 8001f44:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3361      	adds	r3, #97	; 0x61
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	212c      	movs	r1, #44	; 0x2c
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	335c      	adds	r3, #92	; 0x5c
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	461a      	mov	r2, r3
 8001f78:	2301      	movs	r3, #1
 8001f7a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	333f      	adds	r3, #63	; 0x3f
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d009      	beq.n	8001fa4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	333f      	adds	r3, #63	; 0x3f
 8001f9e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d111      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fabd 	bl	800452e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2310      	movs	r3, #16
 8001fc4:	6093      	str	r3, [r2, #8]
 8001fc6:	e03a      	b.n	800203e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d009      	beq.n	8001ff0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	333f      	adds	r3, #63	; 0x3f
 8001fea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d126      	bne.n	800203e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	0151      	lsls	r1, r2, #5
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	440a      	add	r2, r1
 8002006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800200a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800200e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3360      	adds	r3, #96	; 0x60
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	b2d9      	uxtb	r1, r3
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	202c      	movs	r0, #44	; 0x2c
 800202c:	fb00 f303 	mul.w	r3, r0, r3
 8002030:	4413      	add	r3, r2
 8002032:	3360      	adds	r3, #96	; 0x60
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f003 fd81 	bl	8005b40 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d12b      	bne.n	800209e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3348      	adds	r3, #72	; 0x48
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	202c      	movs	r0, #44	; 0x2c
 800205c:	fb00 f202 	mul.w	r2, r0, r2
 8002060:	440a      	add	r2, r1
 8002062:	3240      	adds	r2, #64	; 0x40
 8002064:	8812      	ldrh	r2, [r2, #0]
 8002066:	fbb3 f3f2 	udiv	r3, r3, r2
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 818e 	beq.w	8002390 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3354      	adds	r3, #84	; 0x54
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	f083 0301 	eor.w	r3, r3, #1
 8002088:	b2d8      	uxtb	r0, r3
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3354      	adds	r3, #84	; 0x54
 8002098:	4602      	mov	r2, r0
 800209a:	701a      	strb	r2, [r3, #0]
}
 800209c:	e178      	b.n	8002390 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3354      	adds	r3, #84	; 0x54
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	f083 0301 	eor.w	r3, r3, #1
 80020b2:	b2d8      	uxtb	r0, r3
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3354      	adds	r3, #84	; 0x54
 80020c2:	4602      	mov	r2, r0
 80020c4:	701a      	strb	r2, [r3, #0]
}
 80020c6:	e163      	b.n	8002390 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	f040 80f6 	bne.w	80022cc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	3361      	adds	r3, #97	; 0x61
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d109      	bne.n	8002108 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3360      	adds	r3, #96	; 0x60
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e0c9      	b.n	800229c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3361      	adds	r3, #97	; 0x61
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d109      	bne.n	8002130 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	3360      	adds	r3, #96	; 0x60
 800212a:	2205      	movs	r2, #5
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e0b5      	b.n	800229c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	3361      	adds	r3, #97	; 0x61
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b06      	cmp	r3, #6
 8002142:	d009      	beq.n	8002158 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3361      	adds	r3, #97	; 0x61
 8002152:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002154:	2b08      	cmp	r3, #8
 8002156:	d150      	bne.n	80021fa <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	335c      	adds	r3, #92	; 0x5c
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	202c      	movs	r0, #44	; 0x2c
 8002170:	fb00 f303 	mul.w	r3, r0, r3
 8002174:	440b      	add	r3, r1
 8002176:	335c      	adds	r3, #92	; 0x5c
 8002178:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	335c      	adds	r3, #92	; 0x5c
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d912      	bls.n	80021b4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	335c      	adds	r3, #92	; 0x5c
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3360      	adds	r3, #96	; 0x60
 80021ae:	2204      	movs	r2, #4
 80021b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021b2:	e073      	b.n	800229c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3360      	adds	r3, #96	; 0x60
 80021c2:	2202      	movs	r2, #2
 80021c4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021dc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021e4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021f8:	e050      	b.n	800229c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3361      	adds	r3, #97	; 0x61
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d122      	bne.n	8002254 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	3360      	adds	r3, #96	; 0x60
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002236:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800223e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e023      	b.n	800229c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3361      	adds	r3, #97	; 0x61
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b07      	cmp	r3, #7
 8002266:	d119      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	335c      	adds	r3, #92	; 0x5c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	202c      	movs	r0, #44	; 0x2c
 8002280:	fb00 f303 	mul.w	r3, r0, r3
 8002284:	440b      	add	r3, r1
 8002286:	335c      	adds	r3, #92	; 0x5c
 8002288:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	3360      	adds	r3, #96	; 0x60
 8002298:	2204      	movs	r2, #4
 800229a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	461a      	mov	r2, r3
 80022aa:	2302      	movs	r3, #2
 80022ac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	b2d9      	uxtb	r1, r3
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	202c      	movs	r0, #44	; 0x2c
 80022b8:	fb00 f303 	mul.w	r3, r0, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3360      	adds	r3, #96	; 0x60
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f003 fc3b 	bl	8005b40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022ca:	e061      	b.n	8002390 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d156      	bne.n	8002390 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	333f      	adds	r3, #63	; 0x3f
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d111      	bne.n	800231a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	335c      	adds	r3, #92	; 0x5c
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f002 f90b 	bl	800452e <USB_HC_Halt>
 8002318:	e031      	b.n	800237e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	333f      	adds	r3, #63	; 0x3f
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	333f      	adds	r3, #63	; 0x3f
 800233c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800233e:	2b02      	cmp	r3, #2
 8002340:	d11d      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	335c      	adds	r3, #92	; 0x5c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d110      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3361      	adds	r3, #97	; 0x61
 800236a:	2203      	movs	r2, #3
 800236c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f002 f8d8 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	461a      	mov	r2, r3
 800238c:	2310      	movs	r3, #16
 800238e:	6093      	str	r3, [r2, #8]
}
 8002390:	bf00      	nop
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d11a      	bne.n	80023fe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	461a      	mov	r2, r3
 80023d6:	2304      	movs	r3, #4
 80023d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3361      	adds	r3, #97	; 0x61
 80023e8:	2206      	movs	r2, #6
 80023ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 f899 	bl	800452e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023fc:	e331      	b.n	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b20      	cmp	r3, #32
 8002412:	d12e      	bne.n	8002472 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	461a      	mov	r2, r3
 8002422:	2320      	movs	r3, #32
 8002424:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	333d      	adds	r3, #61	; 0x3d
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	f040 8313 	bne.w	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	333d      	adds	r3, #61	; 0x3d
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3360      	adds	r3, #96	; 0x60
 800245c:	2202      	movs	r2, #2
 800245e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f002 f85f 	bl	800452e <USB_HC_Halt>
}
 8002470:	e2f7      	b.n	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d112      	bne.n	80024b0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	461a      	mov	r2, r3
 8002498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f002 f840 	bl	800452e <USB_HC_Halt>
}
 80024ae:	e2d8      	b.n	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d140      	bne.n	8002548 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	335c      	adds	r3, #92	; 0x5c
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d111      	bne.n	8002512 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	333d      	adds	r3, #61	; 0x3d
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	461a      	mov	r2, r3
 800250e:	2340      	movs	r3, #64	; 0x40
 8002510:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	461a      	mov	r2, r3
 8002520:	2301      	movs	r3, #1
 8002522:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3361      	adds	r3, #97	; 0x61
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f001 fff4 	bl	800452e <USB_HC_Halt>
}
 8002546:	e28c      	b.n	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d12c      	bne.n	80025b8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3361      	adds	r3, #97	; 0x61
 800256c:	2204      	movs	r2, #4
 800256e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	333d      	adds	r3, #61	; 0x3d
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	335c      	adds	r3, #92	; 0x5c
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 ffc5 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	461a      	mov	r2, r3
 80025b2:	2340      	movs	r3, #64	; 0x40
 80025b4:	6093      	str	r3, [r2, #8]
}
 80025b6:	e254      	b.n	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11a      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	461a      	mov	r2, r3
 80025dc:	2308      	movs	r3, #8
 80025de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3361      	adds	r3, #97	; 0x61
 80025ee:	2205      	movs	r2, #5
 80025f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 ff96 	bl	800452e <USB_HC_Halt>
}
 8002602:	e22e      	b.n	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b10      	cmp	r3, #16
 8002618:	d140      	bne.n	800269c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	2203      	movs	r2, #3
 800263c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	333d      	adds	r3, #61	; 0x3d
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d112      	bne.n	8002678 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	333c      	adds	r3, #60	; 0x3c
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	333d      	adds	r3, #61	; 0x3d
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f001 ff53 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	2310      	movs	r3, #16
 8002698:	6093      	str	r3, [r2, #8]
}
 800269a:	e1e2      	b.n	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b80      	cmp	r3, #128	; 0x80
 80026b0:	d164      	bne.n	800277c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d111      	bne.n	80026de <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3361      	adds	r3, #97	; 0x61
 80026c8:	2206      	movs	r2, #6
 80026ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 ff29 	bl	800452e <USB_HC_Halt>
 80026dc:	e044      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	335c      	adds	r3, #92	; 0x5c
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	202c      	movs	r0, #44	; 0x2c
 80026f6:	fb00 f303 	mul.w	r3, r0, r3
 80026fa:	440b      	add	r3, r1
 80026fc:	335c      	adds	r3, #92	; 0x5c
 80026fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	335c      	adds	r3, #92	; 0x5c
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d920      	bls.n	8002756 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	335c      	adds	r3, #92	; 0x5c
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3360      	adds	r3, #96	; 0x60
 8002734:	2204      	movs	r2, #4
 8002736:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	b2d9      	uxtb	r1, r3
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	202c      	movs	r0, #44	; 0x2c
 8002742:	fb00 f303 	mul.w	r3, r0, r3
 8002746:	4413      	add	r3, r2
 8002748:	3360      	adds	r3, #96	; 0x60
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f003 f9f6 	bl	8005b40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002754:	e008      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3360      	adds	r3, #96	; 0x60
 8002764:	2202      	movs	r2, #2
 8002766:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	461a      	mov	r2, r3
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	6093      	str	r3, [r2, #8]
}
 800277a:	e172      	b.n	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002792:	d11b      	bne.n	80027cc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3361      	adds	r3, #97	; 0x61
 80027a2:	2208      	movs	r2, #8
 80027a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 febc 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	461a      	mov	r2, r3
 80027c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027c8:	6093      	str	r3, [r2, #8]
}
 80027ca:	e14a      	b.n	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b02      	cmp	r3, #2
 80027e0:	f040 813f 	bne.w	8002a62 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3361      	adds	r3, #97	; 0x61
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d17d      	bne.n	80028f4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3360      	adds	r3, #96	; 0x60
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	333f      	adds	r3, #63	; 0x3f
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d00a      	beq.n	8002834 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	333f      	adds	r3, #63	; 0x3f
 800282c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800282e:	2b03      	cmp	r3, #3
 8002830:	f040 8100 	bne.w	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d113      	bne.n	8002864 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3355      	adds	r3, #85	; 0x55
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2d8      	uxtb	r0, r3
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3355      	adds	r3, #85	; 0x55
 8002860:	4602      	mov	r2, r0
 8002862:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b01      	cmp	r3, #1
 800286a:	f040 80e3 	bne.w	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	334c      	adds	r3, #76	; 0x4c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80d8 	beq.w	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	334c      	adds	r3, #76	; 0x4c
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	202c      	movs	r0, #44	; 0x2c
 800289a:	fb00 f202 	mul.w	r2, r0, r2
 800289e:	440a      	add	r2, r1
 80028a0:	3240      	adds	r2, #64	; 0x40
 80028a2:	8812      	ldrh	r2, [r2, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	3b01      	subs	r3, #1
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	202c      	movs	r0, #44	; 0x2c
 80028ae:	fb00 f202 	mul.w	r2, r0, r2
 80028b2:	440a      	add	r2, r1
 80028b4:	3240      	adds	r2, #64	; 0x40
 80028b6:	8812      	ldrh	r2, [r2, #0]
 80028b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80b5 	beq.w	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3355      	adds	r3, #85	; 0x55
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	f083 0301 	eor.w	r3, r3, #1
 80028de:	b2d8      	uxtb	r0, r3
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3355      	adds	r3, #85	; 0x55
 80028ee:	4602      	mov	r2, r0
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e09f      	b.n	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3361      	adds	r3, #97	; 0x61
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d109      	bne.n	800291c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	2202      	movs	r2, #2
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e08b      	b.n	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3361      	adds	r3, #97	; 0x61
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d109      	bne.n	8002944 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3360      	adds	r3, #96	; 0x60
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e077      	b.n	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3361      	adds	r3, #97	; 0x61
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d109      	bne.n	800296c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3360      	adds	r3, #96	; 0x60
 8002966:	2205      	movs	r2, #5
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e063      	b.n	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3361      	adds	r3, #97	; 0x61
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b06      	cmp	r3, #6
 800297e:	d009      	beq.n	8002994 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3361      	adds	r3, #97	; 0x61
 800298e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002990:	2b08      	cmp	r3, #8
 8002992:	d14f      	bne.n	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	335c      	adds	r3, #92	; 0x5c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	202c      	movs	r0, #44	; 0x2c
 80029ac:	fb00 f303 	mul.w	r3, r0, r3
 80029b0:	440b      	add	r3, r1
 80029b2:	335c      	adds	r3, #92	; 0x5c
 80029b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	335c      	adds	r3, #92	; 0x5c
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d912      	bls.n	80029f0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	335c      	adds	r3, #92	; 0x5c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3360      	adds	r3, #96	; 0x60
 80029ea:	2204      	movs	r2, #4
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e021      	b.n	8002a34 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3360      	adds	r3, #96	; 0x60
 80029fe:	2202      	movs	r2, #2
 8002a00:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a18:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a20:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2e:	461a      	mov	r2, r3
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	461a      	mov	r2, r3
 8002a42:	2302      	movs	r3, #2
 8002a44:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	b2d9      	uxtb	r1, r3
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	202c      	movs	r0, #44	; 0x2c
 8002a50:	fb00 f303 	mul.w	r3, r0, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3360      	adds	r3, #96	; 0x60
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f003 f86f 	bl	8005b40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a62:	bf00      	nop
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b08a      	sub	sp, #40	; 0x28
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	0c5b      	lsrs	r3, r3, #17
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a9e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d004      	beq.n	8002ab0 <HCD_RXQLVL_IRQHandler+0x46>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	f000 80a9 	beq.w	8002c00 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002aae:	e0aa      	b.n	8002c06 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80a6 	beq.w	8002c04 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3344      	adds	r3, #68	; 0x44
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 809b 	beq.w	8002c04 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3350      	adds	r3, #80	; 0x50
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	441a      	add	r2, r3
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	202c      	movs	r0, #44	; 0x2c
 8002ae8:	fb00 f303 	mul.w	r3, r0, r3
 8002aec:	440b      	add	r3, r1
 8002aee:	334c      	adds	r3, #76	; 0x4c
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d87a      	bhi.n	8002bec <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3344      	adds	r3, #68	; 0x44
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f001 f88e 	bl	8003c30 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3344      	adds	r3, #68	; 0x44
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	441a      	add	r2, r3
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	202c      	movs	r0, #44	; 0x2c
 8002b2e:	fb00 f303 	mul.w	r3, r0, r3
 8002b32:	440b      	add	r3, r1
 8002b34:	3344      	adds	r3, #68	; 0x44
 8002b36:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3350      	adds	r3, #80	; 0x50
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	441a      	add	r2, r3
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	202c      	movs	r0, #44	; 0x2c
 8002b52:	fb00 f303 	mul.w	r3, r0, r3
 8002b56:	440b      	add	r3, r1
 8002b58:	3350      	adds	r3, #80	; 0x50
 8002b5a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	0cdb      	lsrs	r3, r3, #19
 8002b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b70:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3340      	adds	r3, #64	; 0x40
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d13c      	bne.n	8002c04 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d039      	beq.n	8002c04 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ba6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bae:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3354      	adds	r3, #84	; 0x54
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2d8      	uxtb	r0, r3
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3354      	adds	r3, #84	; 0x54
 8002be6:	4602      	mov	r2, r0
 8002be8:	701a      	strb	r2, [r3, #0]
      break;
 8002bea:	e00b      	b.n	8002c04 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3360      	adds	r3, #96	; 0x60
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	701a      	strb	r2, [r3, #0]
      break;
 8002bfe:	e001      	b.n	8002c04 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c00:	bf00      	nop
 8002c02:	e000      	b.n	8002c06 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c04:	bf00      	nop
  }
}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	; 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c3a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d10b      	bne.n	8002c5e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f002 ff59 	bl	8005b08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d132      	bne.n	8002cce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d126      	bne.n	8002cc8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d113      	bne.n	8002caa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c8c:	d106      	bne.n	8002c9c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2102      	movs	r1, #2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 f939 	bl	8003f0c <USB_InitFSLSPClkSel>
 8002c9a:	e011      	b.n	8002cc0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 f932 	bl	8003f0c <USB_InitFSLSPClkSel>
 8002ca8:	e00a      	b.n	8002cc0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d106      	bne.n	8002cc0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cbe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f002 ff4b 	bl	8005b5c <HAL_HCD_PortEnabled_Callback>
 8002cc6:	e002      	b.n	8002cce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f002 ff55 	bl	8005b78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d103      	bne.n	8002ce0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f043 0320 	orr.w	r3, r3, #32
 8002cde:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e12b      	b.n	8002f5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fe80 	bl	8000a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d58:	f000 fd5c 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8002d5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a81      	ldr	r2, [pc, #516]	; (8002f68 <HAL_I2C_Init+0x274>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d807      	bhi.n	8002d78 <HAL_I2C_Init+0x84>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4a80      	ldr	r2, [pc, #512]	; (8002f6c <HAL_I2C_Init+0x278>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	bf94      	ite	ls
 8002d70:	2301      	movls	r3, #1
 8002d72:	2300      	movhi	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e006      	b.n	8002d86 <HAL_I2C_Init+0x92>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a7d      	ldr	r2, [pc, #500]	; (8002f70 <HAL_I2C_Init+0x27c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	bf94      	ite	ls
 8002d80:	2301      	movls	r3, #1
 8002d82:	2300      	movhi	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0e7      	b.n	8002f5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4a78      	ldr	r2, [pc, #480]	; (8002f74 <HAL_I2C_Init+0x280>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	0c9b      	lsrs	r3, r3, #18
 8002d98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4a6a      	ldr	r2, [pc, #424]	; (8002f68 <HAL_I2C_Init+0x274>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d802      	bhi.n	8002dc8 <HAL_I2C_Init+0xd4>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	e009      	b.n	8002ddc <HAL_I2C_Init+0xe8>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	4a69      	ldr	r2, [pc, #420]	; (8002f78 <HAL_I2C_Init+0x284>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	3301      	adds	r3, #1
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	495c      	ldr	r1, [pc, #368]	; (8002f68 <HAL_I2C_Init+0x274>)
 8002df8:	428b      	cmp	r3, r1
 8002dfa:	d819      	bhi.n	8002e30 <HAL_I2C_Init+0x13c>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1e59      	subs	r1, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e0a:	1c59      	adds	r1, r3, #1
 8002e0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e10:	400b      	ands	r3, r1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_I2C_Init+0x138>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1e59      	subs	r1, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2a:	e051      	b.n	8002ed0 <HAL_I2C_Init+0x1dc>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	e04f      	b.n	8002ed0 <HAL_I2C_Init+0x1dc>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d111      	bne.n	8002e5c <HAL_I2C_Init+0x168>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1e58      	subs	r0, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e012      	b.n	8002e82 <HAL_I2C_Init+0x18e>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Init+0x196>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e022      	b.n	8002ed0 <HAL_I2C_Init+0x1dc>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10e      	bne.n	8002eb0 <HAL_I2C_Init+0x1bc>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1e58      	subs	r0, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	440b      	add	r3, r1
 8002ea0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eae:	e00f      	b.n	8002ed0 <HAL_I2C_Init+0x1dc>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1e58      	subs	r0, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	0099      	lsls	r1, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	6809      	ldr	r1, [r1, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002efe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6911      	ldr	r1, [r2, #16]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68d2      	ldr	r2, [r2, #12]
 8002f0a:	4311      	orrs	r1, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	000186a0 	.word	0x000186a0
 8002f6c:	001e847f 	.word	0x001e847f
 8002f70:	003d08ff 	.word	0x003d08ff
 8002f74:	431bde83 	.word	0x431bde83
 8002f78:	10624dd3 	.word	0x10624dd3

08002f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e264      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d075      	beq.n	8003086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f9a:	4ba3      	ldr	r3, [pc, #652]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa6:	4ba0      	ldr	r3, [pc, #640]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d112      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb2:	4b9d      	ldr	r3, [pc, #628]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	4b99      	ldr	r3, [pc, #612]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d05b      	beq.n	8003084 <HAL_RCC_OscConfig+0x108>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d157      	bne.n	8003084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e23f      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d106      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x74>
 8002fe2:	4b91      	ldr	r3, [pc, #580]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a90      	ldr	r2, [pc, #576]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e01d      	b.n	800302c <HAL_RCC_OscConfig+0xb0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x98>
 8002ffa:	4b8b      	ldr	r3, [pc, #556]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a8a      	ldr	r2, [pc, #552]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a87      	ldr	r2, [pc, #540]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0xb0>
 8003014:	4b84      	ldr	r3, [pc, #528]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a83      	ldr	r2, [pc, #524]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b81      	ldr	r3, [pc, #516]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a80      	ldr	r2, [pc, #512]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd fe90 	bl	8000d58 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800303c:	f7fd fe8c 	bl	8000d58 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e204      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0xc0>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fd fe7c 	bl	8000d58 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7fd fe78 	bl	8000d58 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1f0      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0xe8>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d063      	beq.n	800315a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d11c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	4b5c      	ldr	r3, [pc, #368]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x152>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e1c4      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b56      	ldr	r3, [pc, #344]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4952      	ldr	r1, [pc, #328]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e03a      	b.n	800315a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b4f      	ldr	r3, [pc, #316]	; (800322c <HAL_RCC_OscConfig+0x2b0>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fd fe31 	bl	8000d58 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fd fe2d 	bl	8000d58 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e1a5      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4940      	ldr	r1, [pc, #256]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
 800312c:	e015      	b.n	800315a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_RCC_OscConfig+0x2b0>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fd fe10 	bl	8000d58 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313c:	f7fd fe0c 	bl	8000d58 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e184      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	4b36      	ldr	r3, [pc, #216]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d030      	beq.n	80031c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d016      	beq.n	800319c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b30      	ldr	r3, [pc, #192]	; (8003230 <HAL_RCC_OscConfig+0x2b4>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fd fdf0 	bl	8000d58 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317c:	f7fd fdec 	bl	8000d58 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e164      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x200>
 800319a:	e015      	b.n	80031c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCC_OscConfig+0x2b4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a2:	f7fd fdd9 	bl	8000d58 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fd fdd5 	bl	8000d58 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e14d      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80a0 	beq.w	8003316 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x2b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d121      	bne.n	8003256 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_RCC_OscConfig+0x2b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321e:	f7fd fd9b 	bl	8000d58 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003224:	e011      	b.n	800324a <HAL_RCC_OscConfig+0x2ce>
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	42470000 	.word	0x42470000
 8003230:	42470e80 	.word	0x42470e80
 8003234:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003238:	f7fd fd8e 	bl	8000d58 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e106      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b85      	ldr	r3, [pc, #532]	; (8003460 <HAL_RCC_OscConfig+0x4e4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d106      	bne.n	800326c <HAL_RCC_OscConfig+0x2f0>
 800325e:	4b81      	ldr	r3, [pc, #516]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a80      	ldr	r2, [pc, #512]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
 800326a:	e01c      	b.n	80032a6 <HAL_RCC_OscConfig+0x32a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b05      	cmp	r3, #5
 8003272:	d10c      	bne.n	800328e <HAL_RCC_OscConfig+0x312>
 8003274:	4b7b      	ldr	r3, [pc, #492]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a7a      	ldr	r2, [pc, #488]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 800327a:	f043 0304 	orr.w	r3, r3, #4
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	4b78      	ldr	r3, [pc, #480]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a77      	ldr	r2, [pc, #476]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
 800328c:	e00b      	b.n	80032a6 <HAL_RCC_OscConfig+0x32a>
 800328e:	4b75      	ldr	r3, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a74      	ldr	r2, [pc, #464]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	4b72      	ldr	r3, [pc, #456]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a71      	ldr	r2, [pc, #452]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d015      	beq.n	80032da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fd fd53 	bl	8000d58 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fd fd4f 	bl	8000d58 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0c5      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032cc:	4b65      	ldr	r3, [pc, #404]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ee      	beq.n	80032b6 <HAL_RCC_OscConfig+0x33a>
 80032d8:	e014      	b.n	8003304 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fd fd3d 	bl	8000d58 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fd fd39 	bl	8000d58 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0af      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f8:	4b5a      	ldr	r3, [pc, #360]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ee      	bne.n	80032e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330a:	4b56      	ldr	r3, [pc, #344]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a55      	ldr	r2, [pc, #340]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 809b 	beq.w	8003456 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b08      	cmp	r3, #8
 800332a:	d05c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d141      	bne.n	80033b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003334:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <HAL_RCC_OscConfig+0x4ec>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fd fd0d 	bl	8000d58 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fd fd09 	bl	8000d58 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e081      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003354:	4b43      	ldr	r3, [pc, #268]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f0      	bne.n	8003342 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	019b      	lsls	r3, r3, #6
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	4937      	ldr	r1, [pc, #220]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338a:	4b37      	ldr	r3, [pc, #220]	; (8003468 <HAL_RCC_OscConfig+0x4ec>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fd fce2 	bl	8000d58 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003398:	f7fd fcde 	bl	8000d58 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e056      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x41c>
 80033b6:	e04e      	b.n	8003456 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCC_OscConfig+0x4ec>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fd fccb 	bl	8000d58 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fd fcc7 	bl	8000d58 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e03f      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d8:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x44a>
 80033e4:	e037      	b.n	8003456 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e032      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033f2:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <HAL_RCC_OscConfig+0x4e8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d028      	beq.n	8003452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d121      	bne.n	8003452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d11a      	bne.n	8003452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003422:	4013      	ands	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003428:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800342a:	4293      	cmp	r3, r2
 800342c:	d111      	bne.n	8003452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	3b01      	subs	r3, #1
 800343c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d107      	bne.n	8003452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40007000 	.word	0x40007000
 8003464:	40023800 	.word	0x40023800
 8003468:	42470060 	.word	0x42470060

0800346c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0cc      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b68      	ldr	r3, [pc, #416]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d90c      	bls.n	80034a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b65      	ldr	r3, [pc, #404]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003496:	4b63      	ldr	r3, [pc, #396]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0b8      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c0:	4b59      	ldr	r3, [pc, #356]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a58      	ldr	r2, [pc, #352]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d8:	4b53      	ldr	r3, [pc, #332]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a52      	ldr	r2, [pc, #328]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e4:	4b50      	ldr	r3, [pc, #320]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	494d      	ldr	r1, [pc, #308]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d044      	beq.n	800358c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d119      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e07f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d003      	beq.n	800352a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003526:	2b03      	cmp	r3, #3
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b3f      	ldr	r3, [pc, #252]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e067      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b37      	ldr	r3, [pc, #220]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4934      	ldr	r1, [pc, #208]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355c:	f7fd fbfc 	bl	8000d58 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fd fbf8 	bl	8000d58 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e04f      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d20c      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e032      	b.n	800361a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c0:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4916      	ldr	r1, [pc, #88]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035de:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	490e      	ldr	r1, [pc, #56]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035f2:	f000 f821 	bl	8003638 <HAL_RCC_GetSysClockFreq>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	490a      	ldr	r1, [pc, #40]	; (800362c <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	5ccb      	ldrb	r3, [r1, r3]
 8003606:	fa22 f303 	lsr.w	r3, r2, r3
 800360a:	4a09      	ldr	r2, [pc, #36]	; (8003630 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fb5c 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023c00 	.word	0x40023c00
 8003628:	40023800 	.word	0x40023800
 800362c:	08006110 	.word	0x08006110
 8003630:	20000000 	.word	0x20000000
 8003634:	20000004 	.word	0x20000004

08003638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	2300      	movs	r3, #0
 800364a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003650:	4b67      	ldr	r3, [pc, #412]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b08      	cmp	r3, #8
 800365a:	d00d      	beq.n	8003678 <HAL_RCC_GetSysClockFreq+0x40>
 800365c:	2b08      	cmp	r3, #8
 800365e:	f200 80bd 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x34>
 8003666:	2b04      	cmp	r3, #4
 8003668:	d003      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x3a>
 800366a:	e0b7      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800366e:	60bb      	str	r3, [r7, #8]
       break;
 8003670:	e0b7      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003672:	4b61      	ldr	r3, [pc, #388]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003674:	60bb      	str	r3, [r7, #8]
      break;
 8003676:	e0b4      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003678:	4b5d      	ldr	r3, [pc, #372]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003680:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003682:	4b5b      	ldr	r3, [pc, #364]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d04d      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b58      	ldr	r3, [pc, #352]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	461a      	mov	r2, r3
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	ea02 0800 	and.w	r8, r2, r0
 80036a6:	ea03 0901 	and.w	r9, r3, r1
 80036aa:	4640      	mov	r0, r8
 80036ac:	4649      	mov	r1, r9
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	014b      	lsls	r3, r1, #5
 80036b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036bc:	0142      	lsls	r2, r0, #5
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	ebb0 0008 	subs.w	r0, r0, r8
 80036c6:	eb61 0109 	sbc.w	r1, r1, r9
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	018b      	lsls	r3, r1, #6
 80036d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036d8:	0182      	lsls	r2, r0, #6
 80036da:	1a12      	subs	r2, r2, r0
 80036dc:	eb63 0301 	sbc.w	r3, r3, r1
 80036e0:	f04f 0000 	mov.w	r0, #0
 80036e4:	f04f 0100 	mov.w	r1, #0
 80036e8:	00d9      	lsls	r1, r3, #3
 80036ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ee:	00d0      	lsls	r0, r2, #3
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	eb12 0208 	adds.w	r2, r2, r8
 80036f8:	eb43 0309 	adc.w	r3, r3, r9
 80036fc:	f04f 0000 	mov.w	r0, #0
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	0259      	lsls	r1, r3, #9
 8003706:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800370a:	0250      	lsls	r0, r2, #9
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	461a      	mov	r2, r3
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	f7fc fd54 	bl	80001c8 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e04a      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	461a      	mov	r2, r3
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f240 10ff 	movw	r0, #511	; 0x1ff
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	ea02 0400 	and.w	r4, r2, r0
 8003742:	ea03 0501 	and.w	r5, r3, r1
 8003746:	4620      	mov	r0, r4
 8003748:	4629      	mov	r1, r5
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	014b      	lsls	r3, r1, #5
 8003754:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003758:	0142      	lsls	r2, r0, #5
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	1b00      	subs	r0, r0, r4
 8003760:	eb61 0105 	sbc.w	r1, r1, r5
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	018b      	lsls	r3, r1, #6
 800376e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003772:	0182      	lsls	r2, r0, #6
 8003774:	1a12      	subs	r2, r2, r0
 8003776:	eb63 0301 	sbc.w	r3, r3, r1
 800377a:	f04f 0000 	mov.w	r0, #0
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	00d9      	lsls	r1, r3, #3
 8003784:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003788:	00d0      	lsls	r0, r2, #3
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	1912      	adds	r2, r2, r4
 8003790:	eb45 0303 	adc.w	r3, r5, r3
 8003794:	f04f 0000 	mov.w	r0, #0
 8003798:	f04f 0100 	mov.w	r1, #0
 800379c:	0299      	lsls	r1, r3, #10
 800379e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037a2:	0290      	lsls	r0, r2, #10
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	f7fc fd08 	bl	80001c8 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	60bb      	str	r3, [r7, #8]
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037de:	60bb      	str	r3, [r7, #8]
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	68bb      	ldr	r3, [r7, #8]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	007a1200 	.word	0x007a1200

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003818:	f7ff fff0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	08006120 	.word	0x08006120

0800383c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e07b      	b.n	8003946 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	d108      	bne.n	8003868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385e:	d009      	beq.n	8003874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	61da      	str	r2, [r3, #28]
 8003866:	e005      	b.n	8003874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd f90e 	bl	8000ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	ea42 0103 	orr.w	r1, r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0104 	and.w	r1, r3, #4
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	f003 0210 	and.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003934:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800394e:	b084      	sub	sp, #16
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	f107 001c 	add.w	r0, r7, #28
 800395c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	2b01      	cmp	r3, #1
 8003964:	d122      	bne.n	80039ac <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800397a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800398e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d105      	bne.n	80039a0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f9bf 	bl	8003d24 <USB_CoreReset>
 80039a6:	4603      	mov	r3, r0
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	e01a      	b.n	80039e2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f9b3 	bl	8003d24 <USB_CoreReset>
 80039be:	4603      	mov	r3, r0
 80039c0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
 80039d4:	e005      	b.n	80039e2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10b      	bne.n	8003a00 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f043 0206 	orr.w	r2, r3, #6
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a0c:	b004      	add	sp, #16
 8003a0e:	4770      	bx	lr

08003a10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f043 0201 	orr.w	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d115      	bne.n	8003aa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f7fd f974 	bl	8000d70 <HAL_Delay>
      ms++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f939 	bl	8003d06 <USB_GetMode>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d01e      	beq.n	8003ad8 <USB_SetCurrentMode+0x84>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b31      	cmp	r3, #49	; 0x31
 8003a9e:	d9f0      	bls.n	8003a82 <USB_SetCurrentMode+0x2e>
 8003aa0:	e01a      	b.n	8003ad8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d115      	bne.n	8003ad4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f7fd f95b 	bl	8000d70 <HAL_Delay>
      ms++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f920 	bl	8003d06 <USB_GetMode>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <USB_SetCurrentMode+0x84>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b31      	cmp	r3, #49	; 0x31
 8003ad0:	d9f0      	bls.n	8003ab4 <USB_SetCurrentMode+0x60>
 8003ad2:	e001      	b.n	8003ad8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e005      	b.n	8003ae4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b32      	cmp	r3, #50	; 0x32
 8003adc:	d101      	bne.n	8003ae2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3301      	adds	r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <USB_FlushTxFifo+0x64>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e01b      	b.n	8003b44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	daf2      	bge.n	8003afa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	019b      	lsls	r3, r3, #6
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3301      	adds	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <USB_FlushTxFifo+0x64>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e006      	b.n	8003b44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d0f0      	beq.n	8003b24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	00030d40 	.word	0x00030d40

08003b54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <USB_FlushRxFifo+0x5c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e018      	b.n	8003ba4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	daf2      	bge.n	8003b60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2210      	movs	r2, #16
 8003b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <USB_FlushRxFifo+0x5c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e006      	b.n	8003ba4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d0f0      	beq.n	8003b84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	00030d40 	.word	0x00030d40

08003bb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	71fb      	strb	r3, [r7, #7]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d123      	bne.n	8003c22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003bda:	88bb      	ldrh	r3, [r7, #4]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	e018      	b.n	8003c1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	031a      	lsls	r2, r3, #12
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3301      	adds	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	3301      	adds	r3, #1
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3e2      	bcc.n	8003be8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3724      	adds	r7, #36	; 0x24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b08b      	sub	sp, #44	; 0x2c
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]
 8003c5a:	e014      	b.n	8003c86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	3301      	adds	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	3301      	adds	r3, #1
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	3301      	adds	r3, #1
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	6a3a      	ldr	r2, [r7, #32]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3e6      	bcc.n	8003c5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003c8e:	8bfb      	ldrh	r3, [r7, #30]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01e      	beq.n	8003cd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f107 0310 	add.w	r3, r7, #16
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	701a      	strb	r2, [r3, #0]
      i++;
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	623b      	str	r3, [r7, #32]
      pDest++;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003cc6:	8bfb      	ldrh	r3, [r7, #30]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ccc:	8bfb      	ldrh	r3, [r7, #30]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1ea      	bne.n	8003ca8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	372c      	adds	r7, #44	; 0x2c
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0301 	and.w	r3, r3, #1
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <USB_CoreReset+0x64>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e01b      	b.n	8003d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	daf2      	bge.n	8003d30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <USB_CoreReset+0x64>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e006      	b.n	8003d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d0f0      	beq.n	8003d5a <USB_CoreReset+0x36>

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	00030d40 	.word	0x00030d40

08003d8c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dac:	461a      	mov	r2, r3
 8003dae:	2300      	movs	r3, #0
 8003db0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10a      	bne.n	8003dfe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003df6:	f043 0304 	orr.w	r3, r3, #4
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	e014      	b.n	8003e28 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e009      	b.n	8003e28 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e22:	f023 0304 	bic.w	r3, r3, #4
 8003e26:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e28:	2110      	movs	r1, #16
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fe5e 	bl	8003aec <USB_FlushTxFifo>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fe8a 	bl	8003b54 <USB_FlushRxFifo>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e015      	b.n	8003e7c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	461a      	mov	r2, r3
 8003e72:	2300      	movs	r3, #0
 8003e74:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d3e5      	bcc.n	8003e50 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e90:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <USB_HostInit+0x16c>)
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a13      	ldr	r2, [pc, #76]	; (8003efc <USB_HostInit+0x170>)
 8003eb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003eb4:	e009      	b.n	8003eca <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a10      	ldr	r2, [pc, #64]	; (8003f00 <USB_HostInit+0x174>)
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a0f      	ldr	r2, [pc, #60]	; (8003f04 <USB_HostInit+0x178>)
 8003ec6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d105      	bne.n	8003edc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f043 0210 	orr.w	r2, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <USB_HostInit+0x17c>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ef4:	b004      	add	sp, #16
 8003ef6:	4770      	bx	lr
 8003ef8:	01000200 	.word	0x01000200
 8003efc:	00e00300 	.word	0x00e00300
 8003f00:	00600080 	.word	0x00600080
 8003f04:	004000e0 	.word	0x004000e0
 8003f08:	a3200008 	.word	0xa3200008

08003f0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f44:	4313      	orrs	r3, r2
 8003f46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f54:	461a      	mov	r2, r3
 8003f56:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003f5a:	6053      	str	r3, [r2, #4]
 8003f5c:	e009      	b.n	8003f72 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d106      	bne.n	8003f72 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f241 7370 	movw	r3, #6000	; 0x1770
 8003f70:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fa4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <USB_DriveVbus+0x44>
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d106      	bne.n	8003fc4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003fbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fc2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fce:	d109      	bne.n	8003fe4 <USB_DriveVbus+0x64>
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	0c5b      	lsrs	r3, r3, #17
 8004010:	f003 0303 	and.w	r3, r3, #3
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	b29b      	uxth	r3, r3
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4603      	mov	r3, r0
 8004054:	70fb      	strb	r3, [r7, #3]
 8004056:	460b      	mov	r3, r1
 8004058:	70bb      	strb	r3, [r7, #2]
 800405a:	4613      	mov	r3, r2
 800405c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	f04f 33ff 	mov.w	r3, #4294967295
 8004078:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800407a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800407e:	2b03      	cmp	r3, #3
 8004080:	d87e      	bhi.n	8004180 <USB_HC_Init+0x13c>
 8004082:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <USB_HC_Init+0x44>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	08004099 	.word	0x08004099
 800408c:	08004143 	.word	0x08004143
 8004090:	08004099 	.word	0x08004099
 8004094:	08004105 	.word	0x08004105
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	461a      	mov	r2, r3
 80040a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80040aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80040ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da10      	bge.n	80040d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80040d4:	e057      	b.n	8004186 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d051      	beq.n	8004186 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004100:	60d3      	str	r3, [r2, #12]
      break;
 8004102:	e040      	b.n	8004186 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	461a      	mov	r2, r3
 8004112:	f240 639d 	movw	r3, #1693	; 0x69d
 8004116:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004118:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800411c:	2b00      	cmp	r3, #0
 800411e:	da34      	bge.n	800418a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	440a      	add	r2, r1
 8004136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004140:	e023      	b.n	800418a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4413      	add	r3, r2
 800414a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414e:	461a      	mov	r2, r3
 8004150:	f240 2325 	movw	r3, #549	; 0x225
 8004154:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004156:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800415a:	2b00      	cmp	r3, #0
 800415c:	da17      	bge.n	800418e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4413      	add	r3, r2
 8004166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	440a      	add	r2, r1
 8004174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004178:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800417c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800417e:	e006      	b.n	800418e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	77fb      	strb	r3, [r7, #31]
      break;
 8004184:	e004      	b.n	8004190 <USB_HC_Init+0x14c>
      break;
 8004186:	bf00      	nop
 8004188:	e002      	b.n	8004190 <USB_HC_Init+0x14c>
      break;
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <USB_HC_Init+0x14c>
      break;
 800418e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	6939      	ldr	r1, [r7, #16]
 80041c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80041ca:	4313      	orrs	r3, r2
 80041cc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80041da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da03      	bge.n	80041ea <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	e001      	b.n	80041ee <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff feff 	bl	8003ff2 <USB_GetHostSpeed>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80041f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d106      	bne.n	800420c <USB_HC_Init+0x1c8>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d003      	beq.n	800420c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e001      	b.n	8004210 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004210:	787b      	ldrb	r3, [r7, #1]
 8004212:	059b      	lsls	r3, r3, #22
 8004214:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004218:	78bb      	ldrb	r3, [r7, #2]
 800421a:	02db      	lsls	r3, r3, #11
 800421c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004220:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004222:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004226:	049b      	lsls	r3, r3, #18
 8004228:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800422c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800422e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004230:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004234:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	0159      	lsls	r1, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	440b      	add	r3, r1
 8004242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004246:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800424c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800424e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004252:	2b03      	cmp	r3, #3
 8004254:	d003      	beq.n	800425e <USB_HC_Init+0x21a>
 8004256:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10f      	bne.n	800427e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	0151      	lsls	r1, r2, #5
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	440a      	add	r2, r1
 8004274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004278:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800427c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800427e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08c      	sub	sp, #48	; 0x30
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	785b      	ldrb	r3, [r3, #1]
 800429e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80042a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02d      	beq.n	800430e <USB_HC_StartXfer+0x86>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	791b      	ldrb	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d129      	bne.n	800430e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d117      	bne.n	80042f0 <USB_HC_StartXfer+0x68>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	79db      	ldrb	r3, [r3, #7]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <USB_HC_StartXfer+0x48>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	79db      	ldrb	r3, [r3, #7]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d10f      	bne.n	80042f0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	6a3a      	ldr	r2, [r7, #32]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <USB_HC_StartXfer+0x86>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	795b      	ldrb	r3, [r3, #5]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	4619      	mov	r1, r3
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fa0f 	bl	8004728 <USB_DoPing>
      return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e0f8      	b.n	8004500 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d018      	beq.n	8004348 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	8912      	ldrh	r2, [r2, #8]
 800431e:	4413      	add	r3, r2
 8004320:	3b01      	subs	r3, #1
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	8912      	ldrh	r2, [r2, #8]
 8004326:	fbb3 f3f2 	udiv	r3, r3, r2
 800432a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800432c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800432e:	8b7b      	ldrh	r3, [r7, #26]
 8004330:	429a      	cmp	r2, r3
 8004332:	d90b      	bls.n	800434c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004334:	8b7b      	ldrh	r3, [r7, #26]
 8004336:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004338:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	8912      	ldrh	r2, [r2, #8]
 800433e:	fb02 f203 	mul.w	r2, r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	611a      	str	r2, [r3, #16]
 8004346:	e001      	b.n	800434c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004348:	2301      	movs	r3, #1
 800434a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	78db      	ldrb	r3, [r3, #3]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004354:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	8912      	ldrh	r2, [r2, #8]
 800435a:	fb02 f203 	mul.w	r2, r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	611a      	str	r2, [r3, #16]
 8004362:	e003      	b.n	800436c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004376:	04d9      	lsls	r1, r3, #19
 8004378:	4b63      	ldr	r3, [pc, #396]	; (8004508 <USB_HC_StartXfer+0x280>)
 800437a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800437c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	7a9b      	ldrb	r3, [r3, #10]
 8004382:	075b      	lsls	r3, r3, #29
 8004384:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004388:	69f9      	ldr	r1, [r7, #28]
 800438a:	0148      	lsls	r0, r1, #5
 800438c:	6a39      	ldr	r1, [r7, #32]
 800438e:	4401      	add	r1, r0
 8004390:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004394:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004396:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	68d9      	ldr	r1, [r3, #12]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ae:	460a      	mov	r2, r1
 80043b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bf0c      	ite	eq
 80043c2:	2301      	moveq	r3, #1
 80043c4:	2300      	movne	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	6a3a      	ldr	r2, [r7, #32]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80043e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	7e7b      	ldrb	r3, [r7, #25]
 80043fa:	075b      	lsls	r3, r3, #29
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	0148      	lsls	r0, r1, #5
 8004400:	6a39      	ldr	r1, [r7, #32]
 8004402:	4401      	add	r1, r0
 8004404:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004422:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	78db      	ldrb	r3, [r3, #3]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e003      	b.n	800443e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800443c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004444:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	461a      	mov	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e04e      	b.n	8004500 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	78db      	ldrb	r3, [r3, #3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d149      	bne.n	80044fe <USB_HC_StartXfer+0x276>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d045      	beq.n	80044fe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	79db      	ldrb	r3, [r3, #7]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d830      	bhi.n	80044dc <USB_HC_StartXfer+0x254>
 800447a:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <USB_HC_StartXfer+0x1f8>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	08004491 	.word	0x08004491
 8004484:	080044b5 	.word	0x080044b5
 8004488:	08004491 	.word	0x08004491
 800448c:	080044b5 	.word	0x080044b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	3303      	adds	r3, #3
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800449a:	8afa      	ldrh	r2, [r7, #22]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d91c      	bls.n	80044e0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f043 0220 	orr.w	r2, r3, #32
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80044b2:	e015      	b.n	80044e0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	3303      	adds	r3, #3
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80044be:	8afa      	ldrh	r2, [r7, #22]
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d90a      	bls.n	80044e4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80044da:	e003      	b.n	80044e4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80044dc:	bf00      	nop
 80044de:	e002      	b.n	80044e6 <USB_HC_StartXfer+0x25e>
        break;
 80044e0:	bf00      	nop
 80044e2:	e000      	b.n	80044e6 <USB_HC_StartXfer+0x25e>
        break;
 80044e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	68d9      	ldr	r1, [r3, #12]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	785a      	ldrb	r2, [r3, #1]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2000      	movs	r0, #0
 80044f6:	9000      	str	r0, [sp, #0]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fb5b 	bl	8003bb4 <USB_WritePacket>
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	1ff80000 	.word	0x1ff80000

0800450c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	b29b      	uxth	r3, r3
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800452e:	b480      	push	{r7}
 8004530:	b089      	sub	sp, #36	; 0x24
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0c9b      	lsrs	r3, r3, #18
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	0fdb      	lsrs	r3, r3, #31
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b20      	cmp	r3, #32
 800457c:	d104      	bne.n	8004588 <USB_HC_Halt+0x5a>
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	e0c8      	b.n	800471a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <USB_HC_Halt+0x66>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d163      	bne.n	800465c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 80ab 	bne.w	8004718 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d133      	bne.n	8004636 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800460c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461a:	d81d      	bhi.n	8004658 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800462e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004632:	d0ec      	beq.n	800460e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004634:	e070      	b.n	8004718 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	0151      	lsls	r1, r2, #5
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	440a      	add	r2, r1
 800464c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004654:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004656:	e05f      	b.n	8004718 <USB_HC_Halt+0x1ea>
            break;
 8004658:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800465a:	e05d      	b.n	8004718 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	440a      	add	r2, r1
 8004672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800467a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d133      	bne.n	80046f4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ca:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d8:	d81d      	bhi.n	8004716 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f0:	d0ec      	beq.n	80046cc <USB_HC_Halt+0x19e>
 80046f2:	e011      	b.n	8004718 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	440a      	add	r2, r1
 800470a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800470e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e000      	b.n	8004718 <USB_HC_Halt+0x1ea>
          break;
 8004716:	bf00      	nop
    }
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3724      	adds	r7, #36	; 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800473c:	2301      	movs	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	04da      	lsls	r2, r3, #19
 8004744:	4b15      	ldr	r3, [pc, #84]	; (800479c <USB_DoPing+0x74>)
 8004746:	4013      	ands	r3, r2
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	440a      	add	r2, r1
 8004750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004758:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	4413      	add	r3, r2
 8004762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004770:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004778:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	4413      	add	r3, r2
 8004782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	1ff80000 	.word	0x1ff80000

080047a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff f93c 	bl	8003a32 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047ba:	2110      	movs	r1, #16
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff f995 	bl	8003aec <USB_FlushTxFifo>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff f9c1 	bl	8003b54 <USB_FlushRxFifo>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80047dc:	2300      	movs	r3, #0
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e01f      	b.n	8004822 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004800:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004808:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	461a      	mov	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	3301      	adds	r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b0f      	cmp	r3, #15
 8004826:	d9dc      	bls.n	80047e2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004828:	2300      	movs	r3, #0
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	e034      	b.n	8004898 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004844:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800484c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004854:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	4413      	add	r3, r2
 800485e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004862:	461a      	mov	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3301      	adds	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004874:	d80c      	bhi.n	8004890 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800488c:	d0ec      	beq.n	8004868 <USB_StopHost+0xc8>
 800488e:	e000      	b.n	8004892 <USB_StopHost+0xf2>
        break;
 8004890:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	3301      	adds	r3, #1
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b0f      	cmp	r3, #15
 800489c:	d9c7      	bls.n	800482e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a4:	461a      	mov	r2, r3
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295
 80048aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f04f 32ff 	mov.w	r2, #4294967295
 80048b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff f8ab 	bl	8003a10 <USB_EnableGlobalInt>

  return ret;
 80048ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af04      	add	r7, sp, #16
 80048ca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80048cc:	2301      	movs	r3, #1
 80048ce:	2202      	movs	r2, #2
 80048d0:	2102      	movs	r1, #2
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fc66 	bl	80051a4 <USBH_FindInterface>
 80048d8:	4603      	mov	r3, r0
 80048da:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2bff      	cmp	r3, #255	; 0xff
 80048e0:	d002      	beq.n	80048e8 <USBH_CDC_InterfaceInit+0x24>
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d901      	bls.n	80048ec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80048e8:	2302      	movs	r3, #2
 80048ea:	e13d      	b.n	8004b68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fc3b 	bl	800516c <USBH_SelectInterface>
 80048f6:	4603      	mov	r3, r0
 80048f8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80048fa:	7bbb      	ldrb	r3, [r7, #14]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004900:	2302      	movs	r3, #2
 8004902:	e131      	b.n	8004b68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800490a:	2050      	movs	r0, #80	; 0x50
 800490c:	f001 fb12 	bl	8005f34 <malloc>
 8004910:	4603      	mov	r3, r0
 8004912:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004924:	2302      	movs	r3, #2
 8004926:	e11f      	b.n	8004b68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004928:	2250      	movs	r2, #80	; 0x50
 800492a:	2100      	movs	r1, #0
 800492c:	68b8      	ldr	r0, [r7, #8]
 800492e:	f001 fb11 	bl	8005f54 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	211a      	movs	r1, #26
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b25b      	sxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	da15      	bge.n	8004976 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	211a      	movs	r1, #26
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800495a:	781a      	ldrb	r2, [r3, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	211a      	movs	r1, #26
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004970:	881a      	ldrh	r2, [r3, #0]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	785b      	ldrb	r3, [r3, #1]
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 ff9c 	bl	80058ba <USBH_AllocPipe>
 8004982:	4603      	mov	r3, r0
 8004984:	461a      	mov	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	7819      	ldrb	r1, [r3, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	7858      	ldrb	r0, [r3, #1]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	8952      	ldrh	r2, [r2, #10]
 80049a2:	9202      	str	r2, [sp, #8]
 80049a4:	2203      	movs	r2, #3
 80049a6:	9201      	str	r2, [sp, #4]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	4623      	mov	r3, r4
 80049ac:	4602      	mov	r2, r0
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 ff54 	bl	800585c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2200      	movs	r2, #0
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f001 fa17 	bl	8005df0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80049c2:	2300      	movs	r3, #0
 80049c4:	2200      	movs	r2, #0
 80049c6:	210a      	movs	r1, #10
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fbeb 	bl	80051a4 <USBH_FindInterface>
 80049ce:	4603      	mov	r3, r0
 80049d0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2bff      	cmp	r3, #255	; 0xff
 80049d6:	d002      	beq.n	80049de <USBH_CDC_InterfaceInit+0x11a>
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d901      	bls.n	80049e2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80049de:	2302      	movs	r3, #2
 80049e0:	e0c2      	b.n	8004b68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	211a      	movs	r1, #26
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	b25b      	sxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	da16      	bge.n	8004a28 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	211a      	movs	r1, #26
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004a0a:	781a      	ldrb	r2, [r3, #0]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	211a      	movs	r1, #26
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a20:	881a      	ldrh	r2, [r3, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	835a      	strh	r2, [r3, #26]
 8004a26:	e015      	b.n	8004a54 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	211a      	movs	r1, #26
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	211a      	movs	r1, #26
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a4e:	881a      	ldrh	r2, [r3, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	211a      	movs	r1, #26
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b25b      	sxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	da16      	bge.n	8004a9a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	211a      	movs	r1, #26
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004a7c:	781a      	ldrb	r2, [r3, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	211a      	movs	r1, #26
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004a92:	881a      	ldrh	r2, [r3, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	835a      	strh	r2, [r3, #26]
 8004a98:	e015      	b.n	8004ac6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	211a      	movs	r1, #26
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004aaa:	781a      	ldrb	r2, [r3, #0]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	211a      	movs	r1, #26
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	7b9b      	ldrb	r3, [r3, #14]
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fef4 	bl	80058ba <USBH_AllocPipe>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	7bdb      	ldrb	r3, [r3, #15]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 feea 	bl	80058ba <USBH_AllocPipe>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	7b59      	ldrb	r1, [r3, #13]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	7b98      	ldrb	r0, [r3, #14]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	8b12      	ldrh	r2, [r2, #24]
 8004b06:	9202      	str	r2, [sp, #8]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	9201      	str	r2, [sp, #4]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	4623      	mov	r3, r4
 8004b10:	4602      	mov	r2, r0
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fea2 	bl	800585c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	7b19      	ldrb	r1, [r3, #12]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	7bd8      	ldrb	r0, [r3, #15]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	8b52      	ldrh	r2, [r2, #26]
 8004b30:	9202      	str	r2, [sp, #8]
 8004b32:	2202      	movs	r2, #2
 8004b34:	9201      	str	r2, [sp, #4]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	4623      	mov	r3, r4
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fe8d 	bl	800585c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	7b5b      	ldrb	r3, [r3, #13]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f001 f94c 	bl	8005df0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	7b1b      	ldrb	r3, [r3, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f001 f945 	bl	8005df0 <USBH_LL_SetToggle>

  return USBH_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}

08004b70 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00e      	beq.n	8004ba8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fe82 	bl	800589a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fead 	bl	80058fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	7b1b      	ldrb	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00e      	beq.n	8004bce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	7b1b      	ldrb	r3, [r3, #12]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fe6f 	bl	800589a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	7b1b      	ldrb	r3, [r3, #12]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fe9a 	bl	80058fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	7b5b      	ldrb	r3, [r3, #13]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00e      	beq.n	8004bf4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	7b5b      	ldrb	r3, [r3, #13]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fe5c 	bl	800589a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	7b5b      	ldrb	r3, [r3, #13]
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fe87 	bl	80058fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00b      	beq.n	8004c18 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 f99b 	bl	8005f44 <free>
    phost->pActiveClass->pData = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c14:	2200      	movs	r2, #0
 8004c16:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3340      	adds	r3, #64	; 0x40
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8b1 	bl	8004da2 <GetLineCoding>
 8004c40:	4603      	mov	r3, r0
 8004c42:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004c44:	7afb      	ldrb	r3, [r7, #11]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004c50:	2102      	movs	r1, #2
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004c56:	7afb      	ldrb	r3, [r7, #11]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d877      	bhi.n	8004d74 <USBH_CDC_Process+0x114>
 8004c84:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <USBH_CDC_Process+0x2c>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004ca1 	.word	0x08004ca1
 8004c90:	08004ca7 	.word	0x08004ca7
 8004c94:	08004cd7 	.word	0x08004cd7
 8004c98:	08004d4b 	.word	0x08004d4b
 8004c9c:	08004d59 	.word	0x08004d59
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca4:	e06d      	b.n	8004d82 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f897 	bl	8004de0 <SetLineCoding>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004cb6:	7bbb      	ldrb	r3, [r7, #14]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d104      	bne.n	8004cc6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004cc4:	e058      	b.n	8004d78 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004cc6:	7bbb      	ldrb	r3, [r7, #14]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d055      	beq.n	8004d78 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004cd4:	e050      	b.n	8004d78 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	3340      	adds	r3, #64	; 0x40
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f860 	bl	8004da2 <GetLineCoding>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004ce6:	7bbb      	ldrb	r3, [r7, #14]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d126      	bne.n	8004d3a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfe:	791b      	ldrb	r3, [r3, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d13b      	bne.n	8004d7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d133      	bne.n	8004d7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d12b      	bne.n	8004d7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d124      	bne.n	8004d7c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f958 	bl	8004fe8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004d38:	e020      	b.n	8004d7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004d3a:	7bbb      	ldrb	r3, [r7, #14]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d01d      	beq.n	8004d7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2204      	movs	r2, #4
 8004d44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004d48:	e018      	b.n	8004d7c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f867 	bl	8004e1e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f8da 	bl	8004f0a <CDC_ProcessReception>
      break;
 8004d56:	e014      	b.n	8004d82 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004d58:	2100      	movs	r1, #0
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fb08 	bl	8005370 <USBH_ClrFeature>
 8004d60:	4603      	mov	r3, r0
 8004d62:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004d64:	7bbb      	ldrb	r3, [r7, #14]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8004d72:	e005      	b.n	8004d80 <USBH_CDC_Process+0x120>

    default:
      break;
 8004d74:	bf00      	nop
 8004d76:	e004      	b.n	8004d82 <USBH_CDC_Process+0x122>
      break;
 8004d78:	bf00      	nop
 8004d7a:	e002      	b.n	8004d82 <USBH_CDC_Process+0x122>
      break;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <USBH_CDC_Process+0x122>
      break;
 8004d80:	bf00      	nop

  }

  return status;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	22a1      	movs	r2, #161	; 0xa1
 8004db0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2221      	movs	r2, #33	; 0x21
 8004db6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2207      	movs	r2, #7
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 faf1 	bl	80053b8 <USBH_CtlReq>
 8004dd6:	4603      	mov	r3, r0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2221      	movs	r2, #33	; 0x21
 8004dee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2207      	movs	r2, #7
 8004e06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2207      	movs	r2, #7
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fad2 	bl	80053b8 <USBH_CtlReq>
 8004e14:	4603      	mov	r3, r0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b086      	sub	sp, #24
 8004e22:	af02      	add	r7, sp, #8
 8004e24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d002      	beq.n	8004e44 <CDC_ProcessTransmission+0x26>
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d023      	beq.n	8004e8a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8004e42:	e05e      	b.n	8004f02 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	8b12      	ldrh	r2, [r2, #24]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d90b      	bls.n	8004e68 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8b1a      	ldrh	r2, [r3, #24]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	7b5b      	ldrb	r3, [r3, #13]
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	9000      	str	r0, [sp, #0]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fcb8 	bl	80057d6 <USBH_BulkSendData>
 8004e66:	e00b      	b.n	8004e80 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	7b5b      	ldrb	r3, [r3, #13]
 8004e76:	2001      	movs	r0, #1
 8004e78:	9000      	str	r0, [sp, #0]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fcab 	bl	80057d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004e88:	e03b      	b.n	8004f02 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	7b5b      	ldrb	r3, [r3, #13]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 ff83 	bl	8005d9c <USBH_LL_GetURBState>
 8004e96:	4603      	mov	r3, r0
 8004e98:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004e9a:	7afb      	ldrb	r3, [r7, #11]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d128      	bne.n	8004ef2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	8b12      	ldrh	r2, [r2, #24]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d90e      	bls.n	8004eca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	8b12      	ldrh	r2, [r2, #24]
 8004eb4:	1a9a      	subs	r2, r3, r2
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	8b12      	ldrh	r2, [r2, #24]
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	61da      	str	r2, [r3, #28]
 8004ec8:	e002      	b.n	8004ed0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004ee0:	e00e      	b.n	8004f00 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f868 	bl	8004fc0 <USBH_CDC_TransmitCallback>
      break;
 8004ef0:	e006      	b.n	8004f00 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d103      	bne.n	8004f00 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004f00:	bf00      	nop
  }
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b086      	sub	sp, #24
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d002      	beq.n	8004f30 <CDC_ProcessReception+0x26>
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d00e      	beq.n	8004f4c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004f2e:	e043      	b.n	8004fb8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6a19      	ldr	r1, [r3, #32]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	8b5a      	ldrh	r2, [r3, #26]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	7b1b      	ldrb	r3, [r3, #12]
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fc6f 	bl	8005820 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2204      	movs	r2, #4
 8004f46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004f4a:	e035      	b.n	8004fb8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	7b1b      	ldrb	r3, [r3, #12]
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 ff22 	bl	8005d9c <USBH_LL_GetURBState>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d129      	bne.n	8004fb6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	7b1b      	ldrb	r3, [r3, #12]
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fe85 	bl	8005c78 <USBH_LL_GetLastXferSize>
 8004f6e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d016      	beq.n	8004fa8 <CDC_ProcessReception+0x9e>
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	8b5b      	ldrh	r3, [r3, #26]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d910      	bls.n	8004fa8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad2      	subs	r2, r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	441a      	add	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004fa6:	e006      	b.n	8004fb6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f80f 	bl	8004fd4 <USBH_CDC_ReceiveCallback>
      break;
 8004fb6:	bf00      	nop
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005010:	2302      	movs	r3, #2
 8005012:	e029      	b.n	8005068 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	79fa      	ldrb	r2, [r7, #7]
 8005018:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f81f 	bl	8005070 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fd97 	bl	8005b94 <USBH_LL_Init>

  return USBH_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e009      	b.n	8005096 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	33e0      	adds	r3, #224	; 0xe0
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	2200      	movs	r2, #0
 800508e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b0f      	cmp	r3, #15
 800509a:	d9f2      	bls.n	8005082 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e009      	b.n	80050b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050bc:	d3f1      	bcc.n	80050a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2240      	movs	r2, #64	; 0x40
 80050e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d016      	beq.n	800515a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10e      	bne.n	8005154 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800513c:	1c59      	adds	r1, r3, #1
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	33de      	adds	r3, #222	; 0xde
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	73fb      	strb	r3, [r7, #15]
 8005152:	e004      	b.n	800515e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005154:	2302      	movs	r3, #2
 8005156:	73fb      	strb	r3, [r7, #15]
 8005158:	e001      	b.n	800515e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800515a:	2302      	movs	r3, #2
 800515c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800515e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005182:	78fa      	ldrb	r2, [r7, #3]
 8005184:	429a      	cmp	r2, r3
 8005186:	d204      	bcs.n	8005192 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005190:	e001      	b.n	8005196 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005192:	2302      	movs	r3, #2
 8005194:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005196:	7bfb      	ldrb	r3, [r7, #15]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	70fb      	strb	r3, [r7, #3]
 80051b6:	460b      	mov	r3, r1
 80051b8:	70bb      	strb	r3, [r7, #2]
 80051ba:	4613      	mov	r3, r2
 80051bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80051cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80051ce:	e025      	b.n	800521c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
 80051d2:	221a      	movs	r2, #26
 80051d4:	fb02 f303 	mul.w	r3, r2, r3
 80051d8:	3308      	adds	r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	3302      	adds	r3, #2
 80051e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	795b      	ldrb	r3, [r3, #5]
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d002      	beq.n	80051f2 <USBH_FindInterface+0x4e>
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	2bff      	cmp	r3, #255	; 0xff
 80051f0:	d111      	bne.n	8005216 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80051f6:	78ba      	ldrb	r2, [r7, #2]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d002      	beq.n	8005202 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80051fc:	78bb      	ldrb	r3, [r7, #2]
 80051fe:	2bff      	cmp	r3, #255	; 0xff
 8005200:	d109      	bne.n	8005216 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005206:	787a      	ldrb	r2, [r7, #1]
 8005208:	429a      	cmp	r2, r3
 800520a:	d002      	beq.n	8005212 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800520c:	787b      	ldrb	r3, [r7, #1]
 800520e:	2bff      	cmp	r3, #255	; 0xff
 8005210:	d101      	bne.n	8005216 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	e006      	b.n	8005224 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	3301      	adds	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d9d6      	bls.n	80051d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005222:	23ff      	movs	r3, #255	; 0xff
}
 8005224:	4618      	mov	r0, r3
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fce7 	bl	8005c0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800523e:	2101      	movs	r1, #1
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fdbe 	bl	8005dc2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f804 	bl	8005292 <USBH_HandleSof>
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b0b      	cmp	r3, #11
 80052a2:	d10a      	bne.n	80052ba <USBH_HandleSof+0x28>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
  }
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80052d2:	bf00      	nop
}
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80052ee:	bf00      	nop
}
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fc7a 	bl	8005c42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	791b      	ldrb	r3, [r3, #4]
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fad1 	bl	80058fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	795b      	ldrb	r3, [r3, #5]
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 facb 	bl	80058fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	789b      	ldrb	r3, [r3, #2]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d10f      	bne.n	80053a4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80053a4:	2200      	movs	r2, #0
 80053a6:	2100      	movs	r1, #0
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f805 	bl	80053b8 <USBH_CtlReq>
 80053ae:	4603      	mov	r3, r0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	789b      	ldrb	r3, [r3, #2]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d002      	beq.n	80053d8 <USBH_CtlReq+0x20>
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d00f      	beq.n	80053f6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80053d6:	e027      	b.n	8005428 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	88fa      	ldrh	r2, [r7, #6]
 80053e2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2202      	movs	r2, #2
 80053ee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
      break;
 80053f4:	e018      	b.n	8005428 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f81c 	bl	8005434 <USBH_HandleControl>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <USBH_CtlReq+0x54>
 8005406:	7dfb      	ldrb	r3, [r7, #23]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d106      	bne.n	800541a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	761a      	strb	r2, [r3, #24]
      break;
 8005418:	e005      	b.n	8005426 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800541a:	7dfb      	ldrb	r3, [r7, #23]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d102      	bne.n	8005426 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	709a      	strb	r2, [r3, #2]
      break;
 8005426:	bf00      	nop
  }
  return status;
 8005428:	7dfb      	ldrb	r3, [r7, #23]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af02      	add	r7, sp, #8
 800543a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005440:	2300      	movs	r3, #0
 8005442:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	7e1b      	ldrb	r3, [r3, #24]
 8005448:	3b01      	subs	r3, #1
 800544a:	2b0a      	cmp	r3, #10
 800544c:	f200 8156 	bhi.w	80056fc <USBH_HandleControl+0x2c8>
 8005450:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <USBH_HandleControl+0x24>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	08005485 	.word	0x08005485
 800545c:	0800549f 	.word	0x0800549f
 8005460:	08005509 	.word	0x08005509
 8005464:	0800552f 	.word	0x0800552f
 8005468:	08005567 	.word	0x08005567
 800546c:	08005591 	.word	0x08005591
 8005470:	080055e3 	.word	0x080055e3
 8005474:	08005605 	.word	0x08005605
 8005478:	08005641 	.word	0x08005641
 800547c:	08005667 	.word	0x08005667
 8005480:	080056a5 	.word	0x080056a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f103 0110 	add.w	r1, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	795b      	ldrb	r3, [r3, #5]
 800548e:	461a      	mov	r2, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f943 	bl	800571c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	761a      	strb	r2, [r3, #24]
      break;
 800549c:	e139      	b.n	8005712 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	795b      	ldrb	r3, [r3, #5]
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fc79 	bl	8005d9c <USBH_LL_GetURBState>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d11e      	bne.n	80054f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	7c1b      	ldrb	r3, [r3, #16]
 80054b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	8adb      	ldrh	r3, [r3, #22]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80054c6:	7b7b      	ldrb	r3, [r7, #13]
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d103      	bne.n	80054d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2203      	movs	r2, #3
 80054d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80054d2:	e115      	b.n	8005700 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2205      	movs	r2, #5
 80054d8:	761a      	strb	r2, [r3, #24]
      break;
 80054da:	e111      	b.n	8005700 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80054dc:	7b7b      	ldrb	r3, [r7, #13]
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d103      	bne.n	80054ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2209      	movs	r2, #9
 80054e6:	761a      	strb	r2, [r3, #24]
      break;
 80054e8:	e10a      	b.n	8005700 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2207      	movs	r2, #7
 80054ee:	761a      	strb	r2, [r3, #24]
      break;
 80054f0:	e106      	b.n	8005700 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80054f2:	7bbb      	ldrb	r3, [r7, #14]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d003      	beq.n	8005500 <USBH_HandleControl+0xcc>
 80054f8:	7bbb      	ldrb	r3, [r7, #14]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	f040 8100 	bne.w	8005700 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	220b      	movs	r2, #11
 8005504:	761a      	strb	r2, [r3, #24]
      break;
 8005506:	e0fb      	b.n	8005700 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800550e:	b29a      	uxth	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6899      	ldr	r1, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	899a      	ldrh	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	791b      	ldrb	r3, [r3, #4]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f93a 	bl	800579a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2204      	movs	r2, #4
 800552a:	761a      	strb	r2, [r3, #24]
      break;
 800552c:	e0f1      	b.n	8005712 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	791b      	ldrb	r3, [r3, #4]
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fc31 	bl	8005d9c <USBH_LL_GetURBState>
 800553a:	4603      	mov	r3, r0
 800553c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800553e:	7bbb      	ldrb	r3, [r7, #14]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d102      	bne.n	800554a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2209      	movs	r2, #9
 8005548:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	2b05      	cmp	r3, #5
 800554e:	d102      	bne.n	8005556 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005550:	2303      	movs	r3, #3
 8005552:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005554:	e0d6      	b.n	8005704 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	2b04      	cmp	r3, #4
 800555a:	f040 80d3 	bne.w	8005704 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	220b      	movs	r2, #11
 8005562:	761a      	strb	r2, [r3, #24]
      break;
 8005564:	e0ce      	b.n	8005704 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6899      	ldr	r1, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	899a      	ldrh	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	795b      	ldrb	r3, [r3, #5]
 8005572:	2001      	movs	r0, #1
 8005574:	9000      	str	r0, [sp, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8ea 	bl	8005750 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005582:	b29a      	uxth	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2206      	movs	r2, #6
 800558c:	761a      	strb	r2, [r3, #24]
      break;
 800558e:	e0c0      	b.n	8005712 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	795b      	ldrb	r3, [r3, #5]
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fc00 	bl	8005d9c <USBH_LL_GetURBState>
 800559c:	4603      	mov	r3, r0
 800559e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d103      	bne.n	80055ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2207      	movs	r2, #7
 80055aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80055ac:	e0ac      	b.n	8005708 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	2b05      	cmp	r3, #5
 80055b2:	d105      	bne.n	80055c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	220c      	movs	r2, #12
 80055b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80055ba:	2303      	movs	r3, #3
 80055bc:	73fb      	strb	r3, [r7, #15]
      break;
 80055be:	e0a3      	b.n	8005708 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80055c0:	7bbb      	ldrb	r3, [r7, #14]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d103      	bne.n	80055ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2205      	movs	r2, #5
 80055ca:	761a      	strb	r2, [r3, #24]
      break;
 80055cc:	e09c      	b.n	8005708 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80055ce:	7bbb      	ldrb	r3, [r7, #14]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	f040 8099 	bne.w	8005708 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	220b      	movs	r2, #11
 80055da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80055dc:	2302      	movs	r3, #2
 80055de:	73fb      	strb	r3, [r7, #15]
      break;
 80055e0:	e092      	b.n	8005708 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	791b      	ldrb	r3, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	2100      	movs	r1, #0
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8d5 	bl	800579a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2208      	movs	r2, #8
 8005600:	761a      	strb	r2, [r3, #24]

      break;
 8005602:	e086      	b.n	8005712 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	791b      	ldrb	r3, [r3, #4]
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fbc6 	bl	8005d9c <USBH_LL_GetURBState>
 8005610:	4603      	mov	r3, r0
 8005612:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005614:	7bbb      	ldrb	r3, [r7, #14]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	220d      	movs	r2, #13
 800561e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005624:	e072      	b.n	800570c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8005626:	7bbb      	ldrb	r3, [r7, #14]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d103      	bne.n	8005634 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	220b      	movs	r2, #11
 8005630:	761a      	strb	r2, [r3, #24]
      break;
 8005632:	e06b      	b.n	800570c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8005634:	7bbb      	ldrb	r3, [r7, #14]
 8005636:	2b05      	cmp	r3, #5
 8005638:	d168      	bne.n	800570c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800563a:	2303      	movs	r3, #3
 800563c:	73fb      	strb	r3, [r7, #15]
      break;
 800563e:	e065      	b.n	800570c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	795b      	ldrb	r3, [r3, #5]
 8005644:	2201      	movs	r2, #1
 8005646:	9200      	str	r2, [sp, #0]
 8005648:	2200      	movs	r2, #0
 800564a:	2100      	movs	r1, #0
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f87f 	bl	8005750 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	220a      	movs	r2, #10
 8005662:	761a      	strb	r2, [r3, #24]
      break;
 8005664:	e055      	b.n	8005712 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	795b      	ldrb	r3, [r3, #5]
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fb95 	bl	8005d9c <USBH_LL_GetURBState>
 8005672:	4603      	mov	r3, r0
 8005674:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8005676:	7bbb      	ldrb	r3, [r7, #14]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d105      	bne.n	8005688 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	220d      	movs	r2, #13
 8005684:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8005686:	e043      	b.n	8005710 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005688:	7bbb      	ldrb	r3, [r7, #14]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d103      	bne.n	8005696 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2209      	movs	r2, #9
 8005692:	761a      	strb	r2, [r3, #24]
      break;
 8005694:	e03c      	b.n	8005710 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8005696:	7bbb      	ldrb	r3, [r7, #14]
 8005698:	2b04      	cmp	r3, #4
 800569a:	d139      	bne.n	8005710 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	220b      	movs	r2, #11
 80056a0:	761a      	strb	r2, [r3, #24]
      break;
 80056a2:	e035      	b.n	8005710 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7e5b      	ldrb	r3, [r3, #25]
 80056a8:	3301      	adds	r3, #1
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	765a      	strb	r2, [r3, #25]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	7e5b      	ldrb	r3, [r3, #25]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d806      	bhi.n	80056c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80056c4:	e025      	b.n	8005712 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80056cc:	2106      	movs	r1, #6
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	795b      	ldrb	r3, [r3, #5]
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f90c 	bl	80058fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	791b      	ldrb	r3, [r3, #4]
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f906 	bl	80058fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80056f6:	2302      	movs	r3, #2
 80056f8:	73fb      	strb	r3, [r7, #15]
      break;
 80056fa:	e00a      	b.n	8005712 <USBH_HandleControl+0x2de>

    default:
      break;
 80056fc:	bf00      	nop
 80056fe:	e008      	b.n	8005712 <USBH_HandleControl+0x2de>
      break;
 8005700:	bf00      	nop
 8005702:	e006      	b.n	8005712 <USBH_HandleControl+0x2de>
      break;
 8005704:	bf00      	nop
 8005706:	e004      	b.n	8005712 <USBH_HandleControl+0x2de>
      break;
 8005708:	bf00      	nop
 800570a:	e002      	b.n	8005712 <USBH_HandleControl+0x2de>
      break;
 800570c:	bf00      	nop
 800570e:	e000      	b.n	8005712 <USBH_HandleControl+0x2de>
      break;
 8005710:	bf00      	nop
  }

  return status;
 8005712:	7bfb      	ldrb	r3, [r7, #15]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af04      	add	r7, sp, #16
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800572a:	79f9      	ldrb	r1, [r7, #7]
 800572c:	2300      	movs	r3, #0
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	2308      	movs	r3, #8
 8005732:	9302      	str	r3, [sp, #8]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	9301      	str	r3, [sp, #4]
 8005738:	2300      	movs	r3, #0
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	2300      	movs	r3, #0
 800573e:	2200      	movs	r2, #0
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fafa 	bl	8005d3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af04      	add	r7, sp, #16
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	460b      	mov	r3, r1
 8005760:	80fb      	strh	r3, [r7, #6]
 8005762:	4613      	mov	r3, r2
 8005764:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8005774:	7979      	ldrb	r1, [r7, #5]
 8005776:	7e3b      	ldrb	r3, [r7, #24]
 8005778:	9303      	str	r3, [sp, #12]
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	9302      	str	r3, [sp, #8]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	2301      	movs	r3, #1
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2300      	movs	r3, #0
 8005788:	2200      	movs	r2, #0
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 fad5 	bl	8005d3a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b088      	sub	sp, #32
 800579e:	af04      	add	r7, sp, #16
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	4611      	mov	r1, r2
 80057a6:	461a      	mov	r2, r3
 80057a8:	460b      	mov	r3, r1
 80057aa:	80fb      	strh	r3, [r7, #6]
 80057ac:	4613      	mov	r3, r2
 80057ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80057b0:	7979      	ldrb	r1, [r7, #5]
 80057b2:	2300      	movs	r3, #0
 80057b4:	9303      	str	r3, [sp, #12]
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	9302      	str	r3, [sp, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	2301      	movs	r3, #1
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	2300      	movs	r3, #0
 80057c4:	2201      	movs	r2, #1
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fab7 	bl	8005d3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80057cc:	2300      	movs	r3, #0

}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b088      	sub	sp, #32
 80057da:	af04      	add	r7, sp, #16
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	4611      	mov	r1, r2
 80057e2:	461a      	mov	r2, r3
 80057e4:	460b      	mov	r3, r1
 80057e6:	80fb      	strh	r3, [r7, #6]
 80057e8:	4613      	mov	r3, r2
 80057ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80057fa:	7979      	ldrb	r1, [r7, #5]
 80057fc:	7e3b      	ldrb	r3, [r7, #24]
 80057fe:	9303      	str	r3, [sp, #12]
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	9302      	str	r3, [sp, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	2301      	movs	r3, #1
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	2302      	movs	r3, #2
 800580e:	2200      	movs	r2, #0
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fa92 	bl	8005d3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af04      	add	r7, sp, #16
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4611      	mov	r1, r2
 800582c:	461a      	mov	r2, r3
 800582e:	460b      	mov	r3, r1
 8005830:	80fb      	strh	r3, [r7, #6]
 8005832:	4613      	mov	r3, r2
 8005834:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8005836:	7979      	ldrb	r1, [r7, #5]
 8005838:	2300      	movs	r3, #0
 800583a:	9303      	str	r3, [sp, #12]
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	9302      	str	r3, [sp, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	2301      	movs	r3, #1
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	2302      	movs	r3, #2
 800584a:	2201      	movs	r2, #1
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fa74 	bl	8005d3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af04      	add	r7, sp, #16
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	461a      	mov	r2, r3
 800586a:	4603      	mov	r3, r0
 800586c:	70fb      	strb	r3, [r7, #3]
 800586e:	460b      	mov	r3, r1
 8005870:	70bb      	strb	r3, [r7, #2]
 8005872:	4613      	mov	r3, r2
 8005874:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8005876:	7878      	ldrb	r0, [r7, #1]
 8005878:	78ba      	ldrb	r2, [r7, #2]
 800587a:	78f9      	ldrb	r1, [r7, #3]
 800587c:	8b3b      	ldrh	r3, [r7, #24]
 800587e:	9302      	str	r3, [sp, #8]
 8005880:	7d3b      	ldrb	r3, [r7, #20]
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	7c3b      	ldrb	r3, [r7, #16]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	4603      	mov	r3, r0
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa07 	bl	8005c9e <USBH_LL_OpenPipe>

  return USBH_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa26 	bl	8005cfc <USBH_LL_ClosePipe>

  return USBH_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f836 	bl	8005938 <USBH_GetFreePipe>
 80058cc:	4603      	mov	r3, r0
 80058ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00a      	beq.n	80058f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80058da:	78fa      	ldrb	r2, [r7, #3]
 80058dc:	89fb      	ldrh	r3, [r7, #14]
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	33e0      	adds	r3, #224	; 0xe0
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80058f0:	89fb      	ldrh	r3, [r7, #14]
 80058f2:	b2db      	uxtb	r3, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	d80d      	bhi.n	800592a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	33e0      	adds	r3, #224	; 0xe0
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	33e0      	adds	r3, #224	; 0xe0
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
 8005948:	e00f      	b.n	800596a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	33e0      	adds	r3, #224	; 0xe0
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	b29b      	uxth	r3, r3
 8005962:	e007      	b.n	8005974 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	3301      	adds	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b0f      	cmp	r3, #15
 800596e:	d9ec      	bls.n	800594a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8005970:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8005984:	2201      	movs	r2, #1
 8005986:	490e      	ldr	r1, [pc, #56]	; (80059c0 <MX_USB_HOST_Init+0x40>)
 8005988:	480e      	ldr	r0, [pc, #56]	; (80059c4 <MX_USB_HOST_Init+0x44>)
 800598a:	f7ff fb37 	bl	8004ffc <USBH_Init>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8005994:	f7fa ffd2 	bl	800093c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8005998:	490b      	ldr	r1, [pc, #44]	; (80059c8 <MX_USB_HOST_Init+0x48>)
 800599a:	480a      	ldr	r0, [pc, #40]	; (80059c4 <MX_USB_HOST_Init+0x44>)
 800599c:	f7ff fbbc 	bl	8005118 <USBH_RegisterClass>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80059a6:	f7fa ffc9 	bl	800093c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80059aa:	4806      	ldr	r0, [pc, #24]	; (80059c4 <MX_USB_HOST_Init+0x44>)
 80059ac:	f7ff fc40 	bl	8005230 <USBH_Start>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80059b6:	f7fa ffc1 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80059ba:	bf00      	nop
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	080059cd 	.word	0x080059cd
 80059c4:	20000180 	.word	0x20000180
 80059c8:	2000000c 	.word	0x2000000c

080059cc <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	3b01      	subs	r3, #1
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d819      	bhi.n	8005a14 <USBH_UserProcess+0x48>
 80059e0:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <USBH_UserProcess+0x1c>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a15 	.word	0x08005a15
 80059ec:	08005a05 	.word	0x08005a05
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	080059fd 	.word	0x080059fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80059fc:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <USBH_UserProcess+0x58>)
 80059fe:	2203      	movs	r2, #3
 8005a00:	701a      	strb	r2, [r3, #0]
  break;
 8005a02:	e008      	b.n	8005a16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8005a04:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <USBH_UserProcess+0x58>)
 8005a06:	2202      	movs	r2, #2
 8005a08:	701a      	strb	r2, [r3, #0]
  break;
 8005a0a:	e004      	b.n	8005a16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <USBH_UserProcess+0x58>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
  break;
 8005a12:	e000      	b.n	8005a16 <USBH_UserProcess+0x4a>

  default:
  break;
 8005a14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	200000b0 	.word	0x200000b0

08005a28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a30:	f107 0314 	add.w	r3, r7, #20
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a48:	d147      	bne.n	8005ada <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <HAL_HCD_MspInit+0xbc>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	4a24      	ldr	r2, [pc, #144]	; (8005ae4 <HAL_HCD_MspInit+0xbc>)
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	6313      	str	r3, [r2, #48]	; 0x30
 8005a5a:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <HAL_HCD_MspInit+0xbc>)
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005a74:	f107 0314 	add.w	r3, r7, #20
 8005a78:	4619      	mov	r1, r3
 8005a7a:	481b      	ldr	r0, [pc, #108]	; (8005ae8 <HAL_HCD_MspInit+0xc0>)
 8005a7c:	f7fb fb96 	bl	80011ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005a80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a86:	2302      	movs	r3, #2
 8005a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005a92:	230a      	movs	r3, #10
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a96:	f107 0314 	add.w	r3, r7, #20
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4812      	ldr	r0, [pc, #72]	; (8005ae8 <HAL_HCD_MspInit+0xc0>)
 8005a9e:	f7fb fb85 	bl	80011ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005aa2:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <HAL_HCD_MspInit+0xbc>)
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	4a0f      	ldr	r2, [pc, #60]	; (8005ae4 <HAL_HCD_MspInit+0xbc>)
 8005aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aac:	6353      	str	r3, [r2, #52]	; 0x34
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <HAL_HCD_MspInit+0xbc>)
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab6:	4a0b      	ldr	r2, [pc, #44]	; (8005ae4 <HAL_HCD_MspInit+0xbc>)
 8005ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005abc:	6453      	str	r3, [r2, #68]	; 0x44
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <HAL_HCD_MspInit+0xbc>)
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005aca:	2200      	movs	r2, #0
 8005acc:	2100      	movs	r1, #0
 8005ace:	2043      	movs	r0, #67	; 0x43
 8005ad0:	f7fb fa4d 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005ad4:	2043      	movs	r0, #67	; 0x43
 8005ad6:	f7fb fa66 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ada:	bf00      	nop
 8005adc:	3728      	adds	r7, #40	; 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	40020000 	.word	0x40020000

08005aec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fbb7 	bl	800526e <USBH_LL_IncTimer>
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fbef 	bl	80052fa <USBH_LL_Connect>
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fbf8 	bl	8005328 <USBH_LL_Disconnect>
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fba9 	bl	80052c2 <USBH_LL_PortEnabled>
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fba9 	bl	80052de <USBH_LL_PortDisabled>
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d12a      	bne.n	8005bfc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <USBH_LL_Init+0x74>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <USBH_LL_Init+0x74>)
 8005bb2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <USBH_LL_Init+0x74>)
 8005bb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005bbc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8005bbe:	4b12      	ldr	r3, [pc, #72]	; (8005c08 <USBH_LL_Init+0x74>)
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005bc4:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <USBH_LL_Init+0x74>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005bca:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <USBH_LL_Init+0x74>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <USBH_LL_Init+0x74>)
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <USBH_LL_Init+0x74>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005bdc:	480a      	ldr	r0, [pc, #40]	; (8005c08 <USBH_LL_Init+0x74>)
 8005bde:	f7fb fc9a 	bl	8001516 <HAL_HCD_Init>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8005be8:	f7fa fea8 	bl	800093c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8005bec:	4806      	ldr	r0, [pc, #24]	; (8005c08 <USBH_LL_Init+0x74>)
 8005bee:	f7fc f870 	bl	8001cd2 <HAL_HCD_GetCurrentFrame>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff fb2a 	bl	8005250 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000558 	.word	0x20000558

08005c0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fb ffed 	bl	8001c02 <HAL_HCD_Start>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f90e 	bl	8005e50 <USBH_Get_USB_Status>
 8005c34:	4603      	mov	r3, r0
 8005c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fb fff5 	bl	8001c48 <HAL_HCD_Stop>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f8f3 	bl	8005e50 <USBH_Get_USB_Status>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fc f80b 	bl	8001caa <HAL_HCD_HC_GetXferCount>
 8005c94:	4603      	mov	r3, r0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005c9e:	b590      	push	{r4, r7, lr}
 8005ca0:	b089      	sub	sp, #36	; 0x24
 8005ca2:	af04      	add	r7, sp, #16
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	4611      	mov	r1, r2
 8005caa:	461a      	mov	r2, r3
 8005cac:	4603      	mov	r3, r0
 8005cae:	70fb      	strb	r3, [r7, #3]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	70bb      	strb	r3, [r7, #2]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8005cc6:	787c      	ldrb	r4, [r7, #1]
 8005cc8:	78ba      	ldrb	r2, [r7, #2]
 8005cca:	78f9      	ldrb	r1, [r7, #3]
 8005ccc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cce:	9302      	str	r3, [sp, #8]
 8005cd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	4623      	mov	r3, r4
 8005cde:	f7fb fc7c 	bl	80015da <HAL_HCD_HC_Init>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 f8b1 	bl	8005e50 <USBH_Get_USB_Status>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd90      	pop	{r4, r7, pc}

08005cfc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	4611      	mov	r1, r2
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fb fcec 	bl	80016f8 <HAL_HCD_HC_Halt>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f892 	bl	8005e50 <USBH_Get_USB_Status>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005d3a:	b590      	push	{r4, r7, lr}
 8005d3c:	b089      	sub	sp, #36	; 0x24
 8005d3e:	af04      	add	r7, sp, #16
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	4608      	mov	r0, r1
 8005d44:	4611      	mov	r1, r2
 8005d46:	461a      	mov	r2, r3
 8005d48:	4603      	mov	r3, r0
 8005d4a:	70fb      	strb	r3, [r7, #3]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70bb      	strb	r3, [r7, #2]
 8005d50:	4613      	mov	r3, r2
 8005d52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8005d62:	787c      	ldrb	r4, [r7, #1]
 8005d64:	78ba      	ldrb	r2, [r7, #2]
 8005d66:	78f9      	ldrb	r1, [r7, #3]
 8005d68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d6c:	9303      	str	r3, [sp, #12]
 8005d6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d70:	9302      	str	r3, [sp, #8]
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	f7fb fcdf 	bl	8001740 <HAL_HCD_HC_SubmitRequest>
 8005d82:	4603      	mov	r3, r0
 8005d84:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f861 	bl	8005e50 <USBH_Get_USB_Status>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd90      	pop	{r4, r7, pc}

08005d9c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005dae:	78fa      	ldrb	r2, [r7, #3]
 8005db0:	4611      	mov	r1, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fb ff65 	bl	8001c82 <HAL_HCD_HC_GetURBState>
 8005db8:	4603      	mov	r3, r0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d103      	bne.n	8005de0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f864 	bl	8005ea8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8005de0:	20c8      	movs	r0, #200	; 0xc8
 8005de2:	f7fa ffc5 	bl	8000d70 <HAL_Delay>
  return USBH_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005e06:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	212c      	movs	r1, #44	; 0x2c
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	333b      	adds	r3, #59	; 0x3b
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d009      	beq.n	8005e30 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	212c      	movs	r1, #44	; 0x2c
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	3354      	adds	r3, #84	; 0x54
 8005e2a:	78ba      	ldrb	r2, [r7, #2]
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e008      	b.n	8005e42 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	212c      	movs	r1, #44	; 0x2c
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3355      	adds	r3, #85	; 0x55
 8005e3e:	78ba      	ldrb	r2, [r7, #2]
 8005e40:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d817      	bhi.n	8005e94 <USBH_Get_USB_Status+0x44>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <USBH_Get_USB_Status+0x1c>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005e7d 	.word	0x08005e7d
 8005e70:	08005e83 	.word	0x08005e83
 8005e74:	08005e89 	.word	0x08005e89
 8005e78:	08005e8f 	.word	0x08005e8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8005e80:	e00b      	b.n	8005e9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005e82:	2302      	movs	r3, #2
 8005e84:	73fb      	strb	r3, [r7, #15]
    break;
 8005e86:	e008      	b.n	8005e9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e8c:	e005      	b.n	8005e9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	73fb      	strb	r3, [r7, #15]
    break;
 8005e92:	e002      	b.n	8005e9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005e94:	2302      	movs	r3, #2
 8005e96:	73fb      	strb	r3, [r7, #15]
    break;
 8005e98:	bf00      	nop
  }
  return usb_status;
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73fb      	strb	r3, [r7, #15]
 8005ec0:	e001      	b.n	8005ec6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2101      	movs	r1, #1
 8005ecc:	4803      	ldr	r0, [pc, #12]	; (8005edc <MX_DriverVbusFS+0x34>)
 8005ece:	f7fb fb09 	bl	80014e4 <HAL_GPIO_WritePin>
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40020800 	.word	0x40020800

08005ee0 <__errno>:
 8005ee0:	4b01      	ldr	r3, [pc, #4]	; (8005ee8 <__errno+0x8>)
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	2000002c 	.word	0x2000002c

08005eec <__libc_init_array>:
 8005eec:	b570      	push	{r4, r5, r6, lr}
 8005eee:	4d0d      	ldr	r5, [pc, #52]	; (8005f24 <__libc_init_array+0x38>)
 8005ef0:	4c0d      	ldr	r4, [pc, #52]	; (8005f28 <__libc_init_array+0x3c>)
 8005ef2:	1b64      	subs	r4, r4, r5
 8005ef4:	10a4      	asrs	r4, r4, #2
 8005ef6:	2600      	movs	r6, #0
 8005ef8:	42a6      	cmp	r6, r4
 8005efa:	d109      	bne.n	8005f10 <__libc_init_array+0x24>
 8005efc:	4d0b      	ldr	r5, [pc, #44]	; (8005f2c <__libc_init_array+0x40>)
 8005efe:	4c0c      	ldr	r4, [pc, #48]	; (8005f30 <__libc_init_array+0x44>)
 8005f00:	f000 f8f8 	bl	80060f4 <_init>
 8005f04:	1b64      	subs	r4, r4, r5
 8005f06:	10a4      	asrs	r4, r4, #2
 8005f08:	2600      	movs	r6, #0
 8005f0a:	42a6      	cmp	r6, r4
 8005f0c:	d105      	bne.n	8005f1a <__libc_init_array+0x2e>
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f14:	4798      	blx	r3
 8005f16:	3601      	adds	r6, #1
 8005f18:	e7ee      	b.n	8005ef8 <__libc_init_array+0xc>
 8005f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f1e:	4798      	blx	r3
 8005f20:	3601      	adds	r6, #1
 8005f22:	e7f2      	b.n	8005f0a <__libc_init_array+0x1e>
 8005f24:	08006130 	.word	0x08006130
 8005f28:	08006130 	.word	0x08006130
 8005f2c:	08006130 	.word	0x08006130
 8005f30:	08006134 	.word	0x08006134

08005f34 <malloc>:
 8005f34:	4b02      	ldr	r3, [pc, #8]	; (8005f40 <malloc+0xc>)
 8005f36:	4601      	mov	r1, r0
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	f000 b863 	b.w	8006004 <_malloc_r>
 8005f3e:	bf00      	nop
 8005f40:	2000002c 	.word	0x2000002c

08005f44 <free>:
 8005f44:	4b02      	ldr	r3, [pc, #8]	; (8005f50 <free+0xc>)
 8005f46:	4601      	mov	r1, r0
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	f000 b80b 	b.w	8005f64 <_free_r>
 8005f4e:	bf00      	nop
 8005f50:	2000002c 	.word	0x2000002c

08005f54 <memset>:
 8005f54:	4402      	add	r2, r0
 8005f56:	4603      	mov	r3, r0
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <memset+0xa>
 8005f5c:	4770      	bx	lr
 8005f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f62:	e7f9      	b.n	8005f58 <memset+0x4>

08005f64 <_free_r>:
 8005f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f66:	2900      	cmp	r1, #0
 8005f68:	d048      	beq.n	8005ffc <_free_r+0x98>
 8005f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6e:	9001      	str	r0, [sp, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f1a1 0404 	sub.w	r4, r1, #4
 8005f76:	bfb8      	it	lt
 8005f78:	18e4      	addlt	r4, r4, r3
 8005f7a:	f000 f8ad 	bl	80060d8 <__malloc_lock>
 8005f7e:	4a20      	ldr	r2, [pc, #128]	; (8006000 <_free_r+0x9c>)
 8005f80:	9801      	ldr	r0, [sp, #4]
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	4615      	mov	r5, r2
 8005f86:	b933      	cbnz	r3, 8005f96 <_free_r+0x32>
 8005f88:	6063      	str	r3, [r4, #4]
 8005f8a:	6014      	str	r4, [r2, #0]
 8005f8c:	b003      	add	sp, #12
 8005f8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f92:	f000 b8a7 	b.w	80060e4 <__malloc_unlock>
 8005f96:	42a3      	cmp	r3, r4
 8005f98:	d90b      	bls.n	8005fb2 <_free_r+0x4e>
 8005f9a:	6821      	ldr	r1, [r4, #0]
 8005f9c:	1862      	adds	r2, r4, r1
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	bf04      	itt	eq
 8005fa2:	681a      	ldreq	r2, [r3, #0]
 8005fa4:	685b      	ldreq	r3, [r3, #4]
 8005fa6:	6063      	str	r3, [r4, #4]
 8005fa8:	bf04      	itt	eq
 8005faa:	1852      	addeq	r2, r2, r1
 8005fac:	6022      	streq	r2, [r4, #0]
 8005fae:	602c      	str	r4, [r5, #0]
 8005fb0:	e7ec      	b.n	8005f8c <_free_r+0x28>
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b10b      	cbz	r3, 8005fbc <_free_r+0x58>
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	d9fa      	bls.n	8005fb2 <_free_r+0x4e>
 8005fbc:	6811      	ldr	r1, [r2, #0]
 8005fbe:	1855      	adds	r5, r2, r1
 8005fc0:	42a5      	cmp	r5, r4
 8005fc2:	d10b      	bne.n	8005fdc <_free_r+0x78>
 8005fc4:	6824      	ldr	r4, [r4, #0]
 8005fc6:	4421      	add	r1, r4
 8005fc8:	1854      	adds	r4, r2, r1
 8005fca:	42a3      	cmp	r3, r4
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	d1dd      	bne.n	8005f8c <_free_r+0x28>
 8005fd0:	681c      	ldr	r4, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	6053      	str	r3, [r2, #4]
 8005fd6:	4421      	add	r1, r4
 8005fd8:	6011      	str	r1, [r2, #0]
 8005fda:	e7d7      	b.n	8005f8c <_free_r+0x28>
 8005fdc:	d902      	bls.n	8005fe4 <_free_r+0x80>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	6003      	str	r3, [r0, #0]
 8005fe2:	e7d3      	b.n	8005f8c <_free_r+0x28>
 8005fe4:	6825      	ldr	r5, [r4, #0]
 8005fe6:	1961      	adds	r1, r4, r5
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	bf04      	itt	eq
 8005fec:	6819      	ldreq	r1, [r3, #0]
 8005fee:	685b      	ldreq	r3, [r3, #4]
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	bf04      	itt	eq
 8005ff4:	1949      	addeq	r1, r1, r5
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	6054      	str	r4, [r2, #4]
 8005ffa:	e7c7      	b.n	8005f8c <_free_r+0x28>
 8005ffc:	b003      	add	sp, #12
 8005ffe:	bd30      	pop	{r4, r5, pc}
 8006000:	200000b4 	.word	0x200000b4

08006004 <_malloc_r>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	1ccd      	adds	r5, r1, #3
 8006008:	f025 0503 	bic.w	r5, r5, #3
 800600c:	3508      	adds	r5, #8
 800600e:	2d0c      	cmp	r5, #12
 8006010:	bf38      	it	cc
 8006012:	250c      	movcc	r5, #12
 8006014:	2d00      	cmp	r5, #0
 8006016:	4606      	mov	r6, r0
 8006018:	db01      	blt.n	800601e <_malloc_r+0x1a>
 800601a:	42a9      	cmp	r1, r5
 800601c:	d903      	bls.n	8006026 <_malloc_r+0x22>
 800601e:	230c      	movs	r3, #12
 8006020:	6033      	str	r3, [r6, #0]
 8006022:	2000      	movs	r0, #0
 8006024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006026:	f000 f857 	bl	80060d8 <__malloc_lock>
 800602a:	4921      	ldr	r1, [pc, #132]	; (80060b0 <_malloc_r+0xac>)
 800602c:	680a      	ldr	r2, [r1, #0]
 800602e:	4614      	mov	r4, r2
 8006030:	b99c      	cbnz	r4, 800605a <_malloc_r+0x56>
 8006032:	4f20      	ldr	r7, [pc, #128]	; (80060b4 <_malloc_r+0xb0>)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	b923      	cbnz	r3, 8006042 <_malloc_r+0x3e>
 8006038:	4621      	mov	r1, r4
 800603a:	4630      	mov	r0, r6
 800603c:	f000 f83c 	bl	80060b8 <_sbrk_r>
 8006040:	6038      	str	r0, [r7, #0]
 8006042:	4629      	mov	r1, r5
 8006044:	4630      	mov	r0, r6
 8006046:	f000 f837 	bl	80060b8 <_sbrk_r>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	d123      	bne.n	8006096 <_malloc_r+0x92>
 800604e:	230c      	movs	r3, #12
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	4630      	mov	r0, r6
 8006054:	f000 f846 	bl	80060e4 <__malloc_unlock>
 8006058:	e7e3      	b.n	8006022 <_malloc_r+0x1e>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	1b5b      	subs	r3, r3, r5
 800605e:	d417      	bmi.n	8006090 <_malloc_r+0x8c>
 8006060:	2b0b      	cmp	r3, #11
 8006062:	d903      	bls.n	800606c <_malloc_r+0x68>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	441c      	add	r4, r3
 8006068:	6025      	str	r5, [r4, #0]
 800606a:	e004      	b.n	8006076 <_malloc_r+0x72>
 800606c:	6863      	ldr	r3, [r4, #4]
 800606e:	42a2      	cmp	r2, r4
 8006070:	bf0c      	ite	eq
 8006072:	600b      	streq	r3, [r1, #0]
 8006074:	6053      	strne	r3, [r2, #4]
 8006076:	4630      	mov	r0, r6
 8006078:	f000 f834 	bl	80060e4 <__malloc_unlock>
 800607c:	f104 000b 	add.w	r0, r4, #11
 8006080:	1d23      	adds	r3, r4, #4
 8006082:	f020 0007 	bic.w	r0, r0, #7
 8006086:	1ac2      	subs	r2, r0, r3
 8006088:	d0cc      	beq.n	8006024 <_malloc_r+0x20>
 800608a:	1a1b      	subs	r3, r3, r0
 800608c:	50a3      	str	r3, [r4, r2]
 800608e:	e7c9      	b.n	8006024 <_malloc_r+0x20>
 8006090:	4622      	mov	r2, r4
 8006092:	6864      	ldr	r4, [r4, #4]
 8006094:	e7cc      	b.n	8006030 <_malloc_r+0x2c>
 8006096:	1cc4      	adds	r4, r0, #3
 8006098:	f024 0403 	bic.w	r4, r4, #3
 800609c:	42a0      	cmp	r0, r4
 800609e:	d0e3      	beq.n	8006068 <_malloc_r+0x64>
 80060a0:	1a21      	subs	r1, r4, r0
 80060a2:	4630      	mov	r0, r6
 80060a4:	f000 f808 	bl	80060b8 <_sbrk_r>
 80060a8:	3001      	adds	r0, #1
 80060aa:	d1dd      	bne.n	8006068 <_malloc_r+0x64>
 80060ac:	e7cf      	b.n	800604e <_malloc_r+0x4a>
 80060ae:	bf00      	nop
 80060b0:	200000b4 	.word	0x200000b4
 80060b4:	200000b8 	.word	0x200000b8

080060b8 <_sbrk_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d06      	ldr	r5, [pc, #24]	; (80060d4 <_sbrk_r+0x1c>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fa fd70 	bl	8000ba8 <_sbrk>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_sbrk_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_sbrk_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	2000085c 	.word	0x2000085c

080060d8 <__malloc_lock>:
 80060d8:	4801      	ldr	r0, [pc, #4]	; (80060e0 <__malloc_lock+0x8>)
 80060da:	f000 b809 	b.w	80060f0 <__retarget_lock_acquire_recursive>
 80060de:	bf00      	nop
 80060e0:	20000864 	.word	0x20000864

080060e4 <__malloc_unlock>:
 80060e4:	4801      	ldr	r0, [pc, #4]	; (80060ec <__malloc_unlock+0x8>)
 80060e6:	f000 b804 	b.w	80060f2 <__retarget_lock_release_recursive>
 80060ea:	bf00      	nop
 80060ec:	20000864 	.word	0x20000864

080060f0 <__retarget_lock_acquire_recursive>:
 80060f0:	4770      	bx	lr

080060f2 <__retarget_lock_release_recursive>:
 80060f2:	4770      	bx	lr

080060f4 <_init>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr

08006100 <_fini>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	bf00      	nop
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr
