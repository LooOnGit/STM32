
B7d.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088dc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08008a64  08008a64  00018a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a88  08008a88  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008a88  08008a88  00018a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a90  08008a90  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000ba4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c34  20000c34  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f3a6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004007  00000000  00000000  0003f466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  00043470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e8  00000000  00000000  00044ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ea4  00000000  00000000  00045fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc48  00000000  00000000  0006ae74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4533  00000000  00000000  00086abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015afef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062c4  00000000  00000000  0015b044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a4c 	.word	0x08008a4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008a4c 	.word	0x08008a4c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	0000      	movs	r0, r0
	...

08000ca0 <get_sinvalue2>:
		sin_value[x]=(sin(x*2*PI/NUMBER_SAMPLE)+2.9)*(565/2);
	}
}

void get_sinvalue2(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	for(int x = 0; x < 100; x++){
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	e015      	b.n	8000cd8 <get_sinvalue2+0x38>
		sin_val[x]=x*(3.3 / 4096);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fbdd 	bl	800046c <__aeabi_i2d>
 8000cb2:	a30e      	add	r3, pc, #56	; (adr r3, 8000cec <get_sinvalue2+0x4c>)
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f7ff fc42 	bl	8000540 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff fe4e 	bl	8000964 <__aeabi_d2uiz>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <get_sinvalue2+0x48>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int x = 0; x < 100; x++){
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b63      	cmp	r3, #99	; 0x63
 8000cdc:	dde6      	ble.n	8000cac <get_sinvalue2+0xc>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000314 	.word	0x20000314
 8000cec:	66666666 	.word	0x66666666
 8000cf0:	3f4a6666 	.word	0x3f4a6666

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f000 fc9f 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfe:	f000 f825 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 f987 	bl	8001014 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d06:	f000 f965 	bl	8000fd4 <MX_DMA_Init>
  MX_DAC_Init();
 8000d0a:	f000 f889 	bl	8000e20 <MX_DAC_Init>
  MX_I2C1_Init();
 8000d0e:	f000 f8b1 	bl	8000e74 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d12:	f000 f8dd 	bl	8000ed0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000d16:	f000 f911 	bl	8000f3c <MX_TIM2_Init>
  MX_USB_HOST_Init();
 8000d1a:	f007 fa85 	bl	8008228 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  get_sinvalue2();
 8000d1e:	f7ff ffbf 	bl	8000ca0 <get_sinvalue2>
  HAL_TIM_Base_Start(&htim2);
 8000d22:	4807      	ldr	r0, [pc, #28]	; (8000d40 <main+0x4c>)
 8000d24:	f003 ffc6 	bl	8004cb4 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2364      	movs	r3, #100	; 0x64
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <main+0x50>)
 8000d30:	2100      	movs	r1, #0
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <main+0x54>)
 8000d34:	f000 fe4c 	bl	80019d0 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d38:	f007 fa9c 	bl	8008274 <MX_USB_HOST_Process>
 8000d3c:	e7fc      	b.n	8000d38 <main+0x44>
 8000d3e:	bf00      	nop
 8000d40:	200004fc 	.word	0x200004fc
 8000d44:	20000314 	.word	0x20000314
 8000d48:	20000300 	.word	0x20000300

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b094      	sub	sp, #80	; 0x50
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	2230      	movs	r2, #48	; 0x30
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f007 fda6 	bl	80088ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <SystemClock_Config+0xcc>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <SystemClock_Config+0xcc>)
 8000d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <SystemClock_Config+0xcc>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <SystemClock_Config+0xd0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <SystemClock_Config+0xd0>)
 8000d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <SystemClock_Config+0xd0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da8:	2301      	movs	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db2:	2302      	movs	r3, #2
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	f107 0320 	add.w	r3, r7, #32
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fa36 	bl	8004244 <HAL_RCC_OscConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dde:	f000 fa27 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	230f      	movs	r3, #15
 8000de4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de6:	2302      	movs	r3, #2
 8000de8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000df2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2105      	movs	r1, #5
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 fc97 	bl	8004734 <HAL_RCC_ClockConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e0c:	f000 fa10 	bl	8001230 <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3750      	adds	r7, #80	; 0x50
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40007000 	.word	0x40007000

08000e20 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_DAC_Init+0x4c>)
 8000e30:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <MX_DAC_Init+0x50>)
 8000e32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_DAC_Init+0x4c>)
 8000e36:	f000 fda8 	bl	800198a <HAL_DAC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e40:	f000 f9f6 	bl	8001230 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e44:	2324      	movs	r3, #36	; 0x24
 8000e46:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_DAC_Init+0x4c>)
 8000e54:	f000 fea8 	bl	8001ba8 <HAL_DAC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e5e:	f000 f9e7 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000300 	.word	0x20000300
 8000e70:	40007400 	.word	0x40007400

08000e74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <MX_I2C1_Init+0x54>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e80:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_I2C1_Init+0x58>)
 8000e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_I2C1_Init+0x50>)
 8000eb2:	f003 f883 	bl	8003fbc <HAL_I2C_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ebc:	f000 f9b8 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000024c 	.word	0x2000024c
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	000186a0 	.word	0x000186a0

08000ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <MX_SPI1_Init+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_SPI1_Init+0x64>)
 8000f22:	f003 fdef 	bl	8004b04 <HAL_SPI_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f2c:	f000 f980 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200004a4 	.word	0x200004a4
 8000f38:	40013000 	.word	0x40013000

08000f3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f62:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000f66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f80:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f82:	f003 fe48 	bl	8004c16 <HAL_TIM_Base_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f8c:	f000 f950 	bl	8001230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f9e:	f003 fef1 	bl	8004d84 <HAL_TIM_ConfigClockSource>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fa8:	f000 f942 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fac:	2320      	movs	r3, #32
 8000fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000fba:	f004 f8e5 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fc4:	f000 f934 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200004fc 	.word	0x200004fc

08000fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_DMA_Init+0x3c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <MX_DMA_Init+0x3c>)
 8000fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_DMA_Init+0x3c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2010      	movs	r0, #16
 8000ffc:	f000 fc8f 	bl	800191e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001000:	2010      	movs	r0, #16
 8001002:	f000 fca8 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	4b7a      	ldr	r3, [pc, #488]	; (8001218 <MX_GPIO_Init+0x204>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a79      	ldr	r2, [pc, #484]	; (8001218 <MX_GPIO_Init+0x204>)
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b77      	ldr	r3, [pc, #476]	; (8001218 <MX_GPIO_Init+0x204>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	4b73      	ldr	r3, [pc, #460]	; (8001218 <MX_GPIO_Init+0x204>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a72      	ldr	r2, [pc, #456]	; (8001218 <MX_GPIO_Init+0x204>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b70      	ldr	r3, [pc, #448]	; (8001218 <MX_GPIO_Init+0x204>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b6c      	ldr	r3, [pc, #432]	; (8001218 <MX_GPIO_Init+0x204>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a6b      	ldr	r2, [pc, #428]	; (8001218 <MX_GPIO_Init+0x204>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b69      	ldr	r3, [pc, #420]	; (8001218 <MX_GPIO_Init+0x204>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b65      	ldr	r3, [pc, #404]	; (8001218 <MX_GPIO_Init+0x204>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a64      	ldr	r2, [pc, #400]	; (8001218 <MX_GPIO_Init+0x204>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b62      	ldr	r3, [pc, #392]	; (8001218 <MX_GPIO_Init+0x204>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <MX_GPIO_Init+0x204>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a5d      	ldr	r2, [pc, #372]	; (8001218 <MX_GPIO_Init+0x204>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b5b      	ldr	r3, [pc, #364]	; (8001218 <MX_GPIO_Init+0x204>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b57      	ldr	r3, [pc, #348]	; (8001218 <MX_GPIO_Init+0x204>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a56      	ldr	r2, [pc, #344]	; (8001218 <MX_GPIO_Init+0x204>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b54      	ldr	r3, [pc, #336]	; (8001218 <MX_GPIO_Init+0x204>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	4851      	ldr	r0, [pc, #324]	; (800121c <MX_GPIO_Init+0x208>)
 80010d8:	f001 fb4c 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2101      	movs	r1, #1
 80010e0:	484f      	ldr	r0, [pc, #316]	; (8001220 <MX_GPIO_Init+0x20c>)
 80010e2:	f001 fb47 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010e6:	2200      	movs	r2, #0
 80010e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80010ec:	484d      	ldr	r0, [pc, #308]	; (8001224 <MX_GPIO_Init+0x210>)
 80010ee:	f001 fb41 	bl	8002774 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010f2:	2308      	movs	r3, #8
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4844      	ldr	r0, [pc, #272]	; (800121c <MX_GPIO_Init+0x208>)
 800110a:	f001 f997 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800110e:	2301      	movs	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	483e      	ldr	r0, [pc, #248]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001126:	f001 f989 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800112a:	2308      	movs	r3, #8
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800113a:	2305      	movs	r3, #5
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	4836      	ldr	r0, [pc, #216]	; (8001220 <MX_GPIO_Init+0x20c>)
 8001146:	f001 f979 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114a:	2301      	movs	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800114e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	4832      	ldr	r0, [pc, #200]	; (8001228 <MX_GPIO_Init+0x214>)
 8001160:	f001 f96c 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001164:	2304      	movs	r3, #4
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	482d      	ldr	r0, [pc, #180]	; (800122c <MX_GPIO_Init+0x218>)
 8001178:	f001 f960 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118e:	2305      	movs	r3, #5
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4824      	ldr	r0, [pc, #144]	; (800122c <MX_GPIO_Init+0x218>)
 800119a:	f001 f94f 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800119e:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	481b      	ldr	r0, [pc, #108]	; (8001224 <MX_GPIO_Init+0x210>)
 80011b8:	f001 f940 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011bc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ce:	2306      	movs	r3, #6
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	4811      	ldr	r0, [pc, #68]	; (8001220 <MX_GPIO_Init+0x20c>)
 80011da:	f001 f92f 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011de:	2320      	movs	r3, #32
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <MX_GPIO_Init+0x210>)
 80011f2:	f001 f923 	bl	800243c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_GPIO_Init+0x208>)
 800120c:	f001 f916 	bl	800243c <HAL_GPIO_Init>

}
 8001210:	bf00      	nop
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40021000 	.word	0x40021000
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	e7fe      	b.n	8001238 <Error_Handler+0x8>
	...

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_MspInit+0x4c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <HAL_MspInit+0x4c>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_MspInit+0x4c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_MspInit+0x4c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800127a:	2007      	movs	r0, #7
 800127c:	f000 fb44 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_DAC_MspInit+0xdc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d158      	bne.n	8001360 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_DAC_MspInit+0xe0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012e6:	2310      	movs	r3, #16
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481d      	ldr	r0, [pc, #116]	; (8001370 <HAL_DAC_MspInit+0xe4>)
 80012fa:	f001 f89f 	bl	800243c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_DAC_MspInit+0xec>)
 8001302:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001306:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800130a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800131a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001326:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800132a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001336:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001346:	f000 fd09 	bl	8001d5c <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001350:	f7ff ff6e 	bl	8001230 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_DAC_MspInit+0xe8>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40007400 	.word	0x40007400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000
 8001374:	200002a0 	.word	0x200002a0
 8001378:	40026088 	.word	0x40026088

0800137c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <HAL_I2C_MspInit+0x84>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d12c      	bne.n	80013f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80013ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c0:	2312      	movs	r3, #18
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013cc:	2304      	movs	r3, #4
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	480c      	ldr	r0, [pc, #48]	; (8001408 <HAL_I2C_MspInit+0x8c>)
 80013d8:	f001 f830 	bl	800243c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_I2C_MspInit+0x88>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40005400 	.word	0x40005400
 8001404:	40023800 	.word	0x40023800
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a19      	ldr	r2, [pc, #100]	; (8001490 <HAL_SPI_MspInit+0x84>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d12b      	bne.n	8001486 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_SPI_MspInit+0x88>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_SPI_MspInit+0x88>)
 8001438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_SPI_MspInit+0x88>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_SPI_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_SPI_MspInit+0x88>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_SPI_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001466:	23e0      	movs	r3, #224	; 0xe0
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001476:	2305      	movs	r3, #5
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_SPI_MspInit+0x8c>)
 8001482:	f000 ffdb 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40013000 	.word	0x40013000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ac:	d10d      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_TIM_Base_MspInit+0x3c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_TIM_Base_MspInit+0x3c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_TIM_Base_MspInit+0x3c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 f8da 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA1_Stream5_IRQHandler+0x10>)
 8001536:	f000 fd17 	bl	8001f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200002a0 	.word	0x200002a0

08001544 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <OTG_FS_IRQHandler+0x10>)
 800154a:	f001 fb97 	bl	8002c7c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000920 	.word	0x20000920

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d207      	bcs.n	8001598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001588:	f007 f956 	bl	8008838 <__errno>
 800158c:	4603      	mov	r3, r0
 800158e:	220c      	movs	r2, #12
 8001590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	e009      	b.n	80015ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <_sbrk+0x64>)
 80015a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20020000 	.word	0x20020000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	200000ac 	.word	0x200000ac
 80015c0:	20000c38 	.word	0x20000c38

080015c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SystemInit+0x20>)
 80015ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <SystemInit+0x20>)
 80015d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ee:	490e      	ldr	r1, [pc, #56]	; (8001628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001604:	4c0b      	ldr	r4, [pc, #44]	; (8001634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001612:	f7ff ffd7 	bl	80015c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001616:	f007 f915 	bl	8008844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161a:	f7ff fb6b 	bl	8000cf4 <main>
  bx  lr    
 800161e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800162c:	08008a98 	.word	0x08008a98
  ldr r2, =_sbss
 8001630:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001634:	20000c34 	.word	0x20000c34

08001638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC_IRQHandler>
	...

0800163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <HAL_Init+0x40>)
 8001646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_Init+0x40>)
 8001652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_Init+0x40>)
 800165e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f94f 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166a:	2000      	movs	r0, #0
 800166c:	f000 f808 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001670:	f7ff fde4 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x54>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x58>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f967 	bl	8001972 <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f000 f92f 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x5c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008
 8001704:	20000544 	.word	0x20000544

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000544 	.word	0x20000544

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffde 	bl	8001708 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff29 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff3e 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff31 	bl	80017cc <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e014      	b.n	80019c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	791b      	ldrb	r3, [r3, #4]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d105      	bne.n	80019b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fc6d 	bl	800128c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2202      	movs	r2, #2
 80019b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	795b      	ldrb	r3, [r3, #5]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_DAC_Start_DMA+0x22>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0ab      	b.n	8001b4a <HAL_DAC_Start_DMA+0x17a>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2202      	movs	r2, #2
 80019fc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d12f      	bne.n	8001a64 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a52      	ldr	r2, [pc, #328]	; (8001b54 <HAL_DAC_Start_DMA+0x184>)
 8001a0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a51      	ldr	r2, [pc, #324]	; (8001b58 <HAL_DAC_Start_DMA+0x188>)
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a50      	ldr	r2, [pc, #320]	; (8001b5c <HAL_DAC_Start_DMA+0x18c>)
 8001a1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d013      	beq.n	8001a5a <HAL_DAC_Start_DMA+0x8a>
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d845      	bhi.n	8001ac4 <HAL_DAC_Start_DMA+0xf4>
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_DAC_Start_DMA+0x76>
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d005      	beq.n	8001a50 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001a44:	e03e      	b.n	8001ac4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	613b      	str	r3, [r7, #16]
        break;
 8001a4e:	e03c      	b.n	8001aca <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	330c      	adds	r3, #12
 8001a56:	613b      	str	r3, [r7, #16]
        break;
 8001a58:	e037      	b.n	8001aca <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3310      	adds	r3, #16
 8001a60:	613b      	str	r3, [r7, #16]
        break;
 8001a62:	e032      	b.n	8001aca <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4a3d      	ldr	r2, [pc, #244]	; (8001b60 <HAL_DAC_Start_DMA+0x190>)
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <HAL_DAC_Start_DMA+0x194>)
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4a3b      	ldr	r2, [pc, #236]	; (8001b68 <HAL_DAC_Start_DMA+0x198>)
 8001a7a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d013      	beq.n	8001aba <HAL_DAC_Start_DMA+0xea>
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d817      	bhi.n	8001ac8 <HAL_DAC_Start_DMA+0xf8>
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_DAC_Start_DMA+0xd6>
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d005      	beq.n	8001ab0 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001aa4:	e010      	b.n	8001ac8 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3314      	adds	r3, #20
 8001aac:	613b      	str	r3, [r7, #16]
        break;
 8001aae:	e00c      	b.n	8001aca <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	3318      	adds	r3, #24
 8001ab6:	613b      	str	r3, [r7, #16]
        break;
 8001ab8:	e007      	b.n	8001aca <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	331c      	adds	r3, #28
 8001ac0:	613b      	str	r3, [r7, #16]
        break;
 8001ac2:	e002      	b.n	8001aca <HAL_DAC_Start_DMA+0xfa>
        break;
 8001ac4:	bf00      	nop
 8001ac6:	e000      	b.n	8001aca <HAL_DAC_Start_DMA+0xfa>
        break;
 8001ac8:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d111      	bne.n	8001af4 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ade:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6898      	ldr	r0, [r3, #8]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	f000 f9e5 	bl	8001eb8 <HAL_DMA_Start_IT>
 8001aee:	4603      	mov	r3, r0
 8001af0:	75fb      	strb	r3, [r7, #23]
 8001af2:	e010      	b.n	8001b16 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	68d8      	ldr	r0, [r3, #12]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	f000 f9d3 	bl	8001eb8 <HAL_DMA_Start_IT>
 8001b12:	4603      	mov	r3, r0
 8001b14:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2201      	movs	r2, #1
 8001b30:	409a      	lsls	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e005      	b.n	8001b48 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	f043 0204 	orr.w	r2, r3, #4
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	08001c47 	.word	0x08001c47
 8001b58:	08001c69 	.word	0x08001c69
 8001b5c:	08001c85 	.word	0x08001c85
 8001b60:	08001cef 	.word	0x08001cef
 8001b64:	08001d11 	.word	0x08001d11
 8001b68:	08001d2d 	.word	0x08001d2d

08001b6c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	795b      	ldrb	r3, [r3, #5]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_DAC_ConfigChannel+0x18>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e03c      	b.n	8001c3a <HAL_DAC_ConfigChannel+0x92>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4013      	ands	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	22c0      	movs	r2, #192	; 0xc0
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	400a      	ands	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff ff89 	bl	8001b6c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	711a      	strb	r2, [r3, #4]
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff ff82 	bl	8001b80 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f043 0204 	orr.w	r2, r3, #4
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f7ff ff78 	bl	8001b94 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	711a      	strb	r2, [r3, #4]
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7ff ffd8 	bl	8001cb2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	711a      	strb	r2, [r3, #4]
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff ffd1 	bl	8001cc6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f043 0204 	orr.w	r2, r3, #4
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff ffc7 	bl	8001cda <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	711a      	strb	r2, [r3, #4]
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff fcce 	bl	8001708 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e099      	b.n	8001eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d98:	e00f      	b.n	8001dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d9a:	f7ff fcb5 	bl	8001708 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d908      	bls.n	8001dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e078      	b.n	8001eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1e8      	bne.n	8001d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_DMA_Init+0x158>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d107      	bne.n	8001e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f023 0307 	bic.w	r3, r3, #7
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d117      	bne.n	8001e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fa6f 	bl	8002344 <DMA_CheckFifoParam>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2240      	movs	r2, #64	; 0x40
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e016      	b.n	8001eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fa26 	bl	80022d8 <DMA_CalcBaseAndBitshift>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	223f      	movs	r2, #63	; 0x3f
 8001e96:	409a      	lsls	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	f010803f 	.word	0xf010803f

08001eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_DMA_Start_IT+0x26>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e040      	b.n	8001f60 <HAL_DMA_Start_IT+0xa8>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d12f      	bne.n	8001f52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f9b8 	bl	800227c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	223f      	movs	r2, #63	; 0x3f
 8001f12:	409a      	lsls	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0216 	orr.w	r2, r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0208 	orr.w	r2, r2, #8
 8001f3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e005      	b.n	8001f5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f74:	4b92      	ldr	r3, [pc, #584]	; (80021c0 <HAL_DMA_IRQHandler+0x258>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a92      	ldr	r2, [pc, #584]	; (80021c4 <HAL_DMA_IRQHandler+0x25c>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0a9b      	lsrs	r3, r3, #10
 8001f80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	2208      	movs	r2, #8
 8001f94:	409a      	lsls	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01a      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0204 	bic.w	r2, r2, #4
 8001fba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	2201      	movs	r2, #1
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d012      	beq.n	800200a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f043 0202 	orr.w	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2204      	movs	r2, #4
 8002010:	409a      	lsls	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	2204      	movs	r2, #4
 800202e:	409a      	lsls	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f043 0204 	orr.w	r2, r3, #4
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2210      	movs	r2, #16
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d043      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03c      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	2210      	movs	r2, #16
 8002064:	409a      	lsls	r2, r3
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d018      	beq.n	80020aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d024      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
 8002096:	e01f      	b.n	80020d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01b      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
 80020a8:	e016      	b.n	80020d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d107      	bne.n	80020c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0208 	bic.w	r2, r2, #8
 80020c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	2220      	movs	r2, #32
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 808e 	beq.w	8002206 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8086 	beq.w	8002206 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	2220      	movs	r2, #32
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b05      	cmp	r3, #5
 8002110:	d136      	bne.n	8002180 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0216 	bic.w	r2, r2, #22
 8002120:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002130:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <HAL_DMA_IRQHandler+0x1da>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0208 	bic.w	r2, r2, #8
 8002150:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	223f      	movs	r2, #63	; 0x3f
 8002158:	409a      	lsls	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002172:	2b00      	cmp	r3, #0
 8002174:	d07d      	beq.n	8002272 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	4798      	blx	r3
        }
        return;
 800217e:	e078      	b.n	8002272 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d01c      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d108      	bne.n	80021ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d030      	beq.n	8002206 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
 80021ac:	e02b      	b.n	8002206 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d027      	beq.n	8002206 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
 80021be:	e022      	b.n	8002206 <HAL_DMA_IRQHandler+0x29e>
 80021c0:	20000000 	.word	0x20000000
 80021c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10f      	bne.n	80021f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0210 	bic.w	r2, r2, #16
 80021e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	2b00      	cmp	r3, #0
 800220c:	d032      	beq.n	8002274 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d022      	beq.n	8002260 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2205      	movs	r2, #5
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3301      	adds	r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	429a      	cmp	r2, r3
 800223c:	d307      	bcc.n	800224e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f2      	bne.n	8002232 <HAL_DMA_IRQHandler+0x2ca>
 800224c:	e000      	b.n	8002250 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800224e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
 8002270:	e000      	b.n	8002274 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002272:	bf00      	nop
    }
  }
}
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop

0800227c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002298:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d108      	bne.n	80022bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ba:	e007      	b.n	80022cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	60da      	str	r2, [r3, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	3b10      	subs	r3, #16
 80022e8:	4a14      	ldr	r2, [pc, #80]	; (800233c <DMA_CalcBaseAndBitshift+0x64>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022f2:	4a13      	ldr	r2, [pc, #76]	; (8002340 <DMA_CalcBaseAndBitshift+0x68>)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d909      	bls.n	800231a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	1d1a      	adds	r2, r3, #4
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58
 8002318:	e007      	b.n	800232a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002322:	f023 0303 	bic.w	r3, r3, #3
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	aaaaaaab 	.word	0xaaaaaaab
 8002340:	08008a80 	.word	0x08008a80

08002344 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d11f      	bne.n	800239e <DMA_CheckFifoParam+0x5a>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d856      	bhi.n	8002412 <DMA_CheckFifoParam+0xce>
 8002364:	a201      	add	r2, pc, #4	; (adr r2, 800236c <DMA_CheckFifoParam+0x28>)
 8002366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	0800237d 	.word	0x0800237d
 8002370:	0800238f 	.word	0x0800238f
 8002374:	0800237d 	.word	0x0800237d
 8002378:	08002413 	.word	0x08002413
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d046      	beq.n	8002416 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238c:	e043      	b.n	8002416 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002396:	d140      	bne.n	800241a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800239c:	e03d      	b.n	800241a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a6:	d121      	bne.n	80023ec <DMA_CheckFifoParam+0xa8>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d837      	bhi.n	800241e <DMA_CheckFifoParam+0xda>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <DMA_CheckFifoParam+0x70>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023c5 	.word	0x080023c5
 80023b8:	080023cb 	.word	0x080023cb
 80023bc:	080023c5 	.word	0x080023c5
 80023c0:	080023dd 	.word	0x080023dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e030      	b.n	800242c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d025      	beq.n	8002422 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023da:	e022      	b.n	8002422 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023e4:	d11f      	bne.n	8002426 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ea:	e01c      	b.n	8002426 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d903      	bls.n	80023fa <DMA_CheckFifoParam+0xb6>
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d003      	beq.n	8002400 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023f8:	e018      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
      break;
 80023fe:	e015      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      break;
 8002410:	e00b      	b.n	800242a <DMA_CheckFifoParam+0xe6>
      break;
 8002412:	bf00      	nop
 8002414:	e00a      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e008      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e006      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e004      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e002      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;   
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
    }
  } 
  
  return status; 
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e16b      	b.n	8002730 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002458:	2201      	movs	r2, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	f040 815a 	bne.w	800272a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d005      	beq.n	800248e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248a:	2b02      	cmp	r3, #2
 800248c:	d130      	bne.n	80024f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2203      	movs	r2, #3
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 0201 	and.w	r2, r3, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d017      	beq.n	800252c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d123      	bne.n	8002580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	08da      	lsrs	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3208      	adds	r2, #8
 8002540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80b4 	beq.w	800272a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b60      	ldr	r3, [pc, #384]	; (8002748 <HAL_GPIO_Init+0x30c>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a5f      	ldr	r2, [pc, #380]	; (8002748 <HAL_GPIO_Init+0x30c>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <HAL_GPIO_Init+0x30c>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025de:	4a5b      	ldr	r2, [pc, #364]	; (800274c <HAL_GPIO_Init+0x310>)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_GPIO_Init+0x314>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d02b      	beq.n	8002662 <HAL_GPIO_Init+0x226>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a51      	ldr	r2, [pc, #324]	; (8002754 <HAL_GPIO_Init+0x318>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d025      	beq.n	800265e <HAL_GPIO_Init+0x222>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a50      	ldr	r2, [pc, #320]	; (8002758 <HAL_GPIO_Init+0x31c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01f      	beq.n	800265a <HAL_GPIO_Init+0x21e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4f      	ldr	r2, [pc, #316]	; (800275c <HAL_GPIO_Init+0x320>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d019      	beq.n	8002656 <HAL_GPIO_Init+0x21a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4e      	ldr	r2, [pc, #312]	; (8002760 <HAL_GPIO_Init+0x324>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_GPIO_Init+0x216>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4d      	ldr	r2, [pc, #308]	; (8002764 <HAL_GPIO_Init+0x328>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00d      	beq.n	800264e <HAL_GPIO_Init+0x212>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4c      	ldr	r2, [pc, #304]	; (8002768 <HAL_GPIO_Init+0x32c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_GPIO_Init+0x20e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4b      	ldr	r2, [pc, #300]	; (800276c <HAL_GPIO_Init+0x330>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_GPIO_Init+0x20a>
 8002642:	2307      	movs	r3, #7
 8002644:	e00e      	b.n	8002664 <HAL_GPIO_Init+0x228>
 8002646:	2308      	movs	r3, #8
 8002648:	e00c      	b.n	8002664 <HAL_GPIO_Init+0x228>
 800264a:	2306      	movs	r3, #6
 800264c:	e00a      	b.n	8002664 <HAL_GPIO_Init+0x228>
 800264e:	2305      	movs	r3, #5
 8002650:	e008      	b.n	8002664 <HAL_GPIO_Init+0x228>
 8002652:	2304      	movs	r3, #4
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x228>
 8002656:	2303      	movs	r3, #3
 8002658:	e004      	b.n	8002664 <HAL_GPIO_Init+0x228>
 800265a:	2302      	movs	r3, #2
 800265c:	e002      	b.n	8002664 <HAL_GPIO_Init+0x228>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x228>
 8002662:	2300      	movs	r3, #0
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f002 0203 	and.w	r2, r2, #3
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	4093      	lsls	r3, r2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002674:	4935      	ldr	r1, [pc, #212]	; (800274c <HAL_GPIO_Init+0x310>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <HAL_GPIO_Init+0x334>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a32      	ldr	r2, [pc, #200]	; (8002770 <HAL_GPIO_Init+0x334>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_GPIO_Init+0x334>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a27      	ldr	r2, [pc, #156]	; (8002770 <HAL_GPIO_Init+0x334>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <HAL_GPIO_Init+0x334>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fa:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <HAL_GPIO_Init+0x334>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_GPIO_Init+0x334>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002724:	4a12      	ldr	r2, [pc, #72]	; (8002770 <HAL_GPIO_Init+0x334>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	f67f ae90 	bls.w	8002458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40013800 	.word	0x40013800
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40021400 	.word	0x40021400
 8002768:	40021800 	.word	0x40021800
 800276c:	40021c00 	.word	0x40021c00
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80027a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a8:	b08f      	sub	sp, #60	; 0x3c
 80027aa:	af0a      	add	r7, sp, #40	; 0x28
 80027ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e054      	b.n	8002862 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f005 fd86 	bl	80082e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2203      	movs	r2, #3
 80027dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fdb4 	bl	8005364 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	687e      	ldr	r6, [r7, #4]
 8002804:	466d      	mov	r5, sp
 8002806:	f106 0410 	add.w	r4, r6, #16
 800280a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002816:	e885 0003 	stmia.w	r5, {r0, r1}
 800281a:	1d33      	adds	r3, r6, #4
 800281c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281e:	6838      	ldr	r0, [r7, #0]
 8002820:	f002 fd2e 	bl	8005280 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fdab 	bl	8005386 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	687e      	ldr	r6, [r7, #4]
 8002838:	466d      	mov	r5, sp
 800283a:	f106 0410 	add.w	r4, r6, #16
 800283e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800284a:	e885 0003 	stmia.w	r5, {r0, r1}
 800284e:	1d33      	adds	r3, r6, #4
 8002850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	f002 ff34 	bl	80056c0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800286a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800286a:	b590      	push	{r4, r7, lr}
 800286c:	b089      	sub	sp, #36	; 0x24
 800286e:	af04      	add	r7, sp, #16
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	4608      	mov	r0, r1
 8002874:	4611      	mov	r1, r2
 8002876:	461a      	mov	r2, r3
 8002878:	4603      	mov	r3, r0
 800287a:	70fb      	strb	r3, [r7, #3]
 800287c:	460b      	mov	r3, r1
 800287e:	70bb      	strb	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_HCD_HC_Init+0x28>
 800288e:	2302      	movs	r3, #2
 8002890:	e076      	b.n	8002980 <HAL_HCD_HC_Init+0x116>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	333d      	adds	r3, #61	; 0x3d
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3338      	adds	r3, #56	; 0x38
 80028ba:	787a      	ldrb	r2, [r7, #1]
 80028bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3340      	adds	r3, #64	; 0x40
 80028cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028ce:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3339      	adds	r3, #57	; 0x39
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	333f      	adds	r3, #63	; 0x3f
 80028f0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80028f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	78ba      	ldrb	r2, [r7, #2]
 80028fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028fe:	b2d0      	uxtb	r0, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	333a      	adds	r3, #58	; 0x3a
 800290c:	4602      	mov	r2, r0
 800290e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002910:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002914:	2b00      	cmp	r3, #0
 8002916:	da09      	bge.n	800292c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	333b      	adds	r3, #59	; 0x3b
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e008      	b.n	800293e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	333b      	adds	r3, #59	; 0x3b
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	333c      	adds	r3, #60	; 0x3c
 800294c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002950:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	787c      	ldrb	r4, [r7, #1]
 8002958:	78ba      	ldrb	r2, [r7, #2]
 800295a:	78f9      	ldrb	r1, [r7, #3]
 800295c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	f897 3020 	ldrb.w	r3, [r7, #32]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	4623      	mov	r3, r4
 800296e:	f003 f82d 	bl	80059cc <USB_HC_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}

08002988 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_HCD_HC_Halt+0x1e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e00f      	b.n	80029c6 <HAL_HCD_HC_Halt+0x3e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 fa7d 	bl	8005eb6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	70fb      	strb	r3, [r7, #3]
 80029e2:	460b      	mov	r3, r1
 80029e4:	70bb      	strb	r3, [r7, #2]
 80029e6:	4613      	mov	r3, r2
 80029e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	333b      	adds	r3, #59	; 0x3b
 80029f8:	78ba      	ldrb	r2, [r7, #2]
 80029fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	333f      	adds	r3, #63	; 0x3f
 8002a0a:	787a      	ldrb	r2, [r7, #1]
 8002a0c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a0e:	7c3b      	ldrb	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d112      	bne.n	8002a3a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3342      	adds	r3, #66	; 0x42
 8002a22:	2203      	movs	r2, #3
 8002a24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	333d      	adds	r3, #61	; 0x3d
 8002a34:	7f3a      	ldrb	r2, [r7, #28]
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e008      	b.n	8002a4c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3342      	adds	r3, #66	; 0x42
 8002a48:	2202      	movs	r2, #2
 8002a4a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a4c:	787b      	ldrb	r3, [r7, #1]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	f200 80c6 	bhi.w	8002be0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a6d 	.word	0x08002a6d
 8002a60:	08002bcd 	.word	0x08002bcd
 8002a64:	08002ad1 	.word	0x08002ad1
 8002a68:	08002b4f 	.word	0x08002b4f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002a6c:	7c3b      	ldrb	r3, [r7, #16]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	f040 80b8 	bne.w	8002be4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002a74:	78bb      	ldrb	r3, [r7, #2]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 80b4 	bne.w	8002be4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002a7c:	8b3b      	ldrh	r3, [r7, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3355      	adds	r3, #85	; 0x55
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3355      	adds	r3, #85	; 0x55
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3342      	adds	r3, #66	; 0x42
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002aba:	e093      	b.n	8002be4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3342      	adds	r3, #66	; 0x42
 8002aca:	2202      	movs	r2, #2
 8002acc:	701a      	strb	r2, [r3, #0]
      break;
 8002ace:	e089      	b.n	8002be4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ad0:	78bb      	ldrb	r3, [r7, #2]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11d      	bne.n	8002b12 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3355      	adds	r3, #85	; 0x55
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3342      	adds	r3, #66	; 0x42
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002afc:	e073      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3342      	adds	r3, #66	; 0x42
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	701a      	strb	r2, [r3, #0]
      break;
 8002b10:	e069      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3354      	adds	r3, #84	; 0x54
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3342      	adds	r3, #66	; 0x42
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
      break;
 8002b38:	e055      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3342      	adds	r3, #66	; 0x42
 8002b48:	2202      	movs	r2, #2
 8002b4a:	701a      	strb	r2, [r3, #0]
      break;
 8002b4c:	e04b      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b4e:	78bb      	ldrb	r3, [r7, #2]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11d      	bne.n	8002b90 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3355      	adds	r3, #85	; 0x55
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3342      	adds	r3, #66	; 0x42
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b7a:	e034      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3342      	adds	r3, #66	; 0x42
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	701a      	strb	r2, [r3, #0]
      break;
 8002b8e:	e02a      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3354      	adds	r3, #84	; 0x54
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3342      	adds	r3, #66	; 0x42
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
      break;
 8002bb6:	e016      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3342      	adds	r3, #66	; 0x42
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	701a      	strb	r2, [r3, #0]
      break;
 8002bca:	e00c      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3342      	adds	r3, #66	; 0x42
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
      break;
 8002bde:	e002      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002be0:	bf00      	nop
 8002be2:	e000      	b.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002be4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3344      	adds	r3, #68	; 0x44
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	8b3a      	ldrh	r2, [r7, #24]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	202c      	movs	r0, #44	; 0x2c
 8002c00:	fb00 f303 	mul.w	r3, r0, r3
 8002c04:	440b      	add	r3, r1
 8002c06:	334c      	adds	r3, #76	; 0x4c
 8002c08:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3360      	adds	r3, #96	; 0x60
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3350      	adds	r3, #80	; 0x50
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3339      	adds	r3, #57	; 0x39
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	222c      	movs	r2, #44	; 0x2c
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	3338      	adds	r3, #56	; 0x38
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	18d1      	adds	r1, r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f002 ffd0 	bl	8005c10 <USB_HC_StartXfer>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop

08002c7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 fcd1 	bl	800563a <USB_GetMode>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	f040 80f6 	bne.w	8002e8c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 fcb5 	bl	8005614 <USB_ReadInterrupts>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80ec 	beq.w	8002e8a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 fcac 	bl	8005614 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc6:	d104      	bne.n	8002cd2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002cd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fc9c 	bl	8005614 <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ce6:	d104      	bne.n	8002cf2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cf0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 fc8c 	bl	8005614 <USB_ReadInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d06:	d104      	bne.n	8002d12 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 fc7c 	bl	8005614 <USB_ReadInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d103      	bne.n	8002d2e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 fc6e 	bl	8005614 <USB_ReadInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d42:	d11c      	bne.n	8002d7e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d4c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d5e:	2110      	movs	r1, #16
 8002d60:	6938      	ldr	r0, [r7, #16]
 8002d62:	f002 fb5d 	bl	8005420 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d66:	6938      	ldr	r0, [r7, #16]
 8002d68:	f002 fb8e 	bl	8005488 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 fd64 	bl	8005840 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f005 fb31 	bl	80083e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fc46 	bl	8005614 <USB_ReadInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d92:	d102      	bne.n	8002d9a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f001 f89e 	bl	8003ed6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fc38 	bl	8005614 <USB_ReadInterrupts>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d106      	bne.n	8002dbc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f005 fafa 	bl	80083a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2208      	movs	r2, #8
 8002dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fc27 	bl	8005614 <USB_ReadInterrupts>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d101      	bne.n	8002dd4 <HAL_HCD_IRQHandler+0x158>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_HCD_IRQHandler+0x15a>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0210 	bic.w	r2, r2, #16
 8002de8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 ffa1 	bl	8003d32 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0210 	orr.w	r2, r2, #16
 8002dfe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fc05 	bl	8005614 <USB_ReadInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e14:	d13a      	bne.n	8002e8c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 f83a 	bl	8005e94 <USB_HC_ReadInterrupt>
 8002e20:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e025      	b.n	8002e74 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d018      	beq.n	8002e6e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e52:	d106      	bne.n	8002e62 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f8ab 	bl	8002fb6 <HCD_HC_IN_IRQHandler>
 8002e60:	e005      	b.n	8002e6e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fbf9 	bl	8003660 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3301      	adds	r3, #1
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d3d4      	bcc.n	8002e28 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e86:	615a      	str	r2, [r3, #20]
 8002e88:	e000      	b.n	8002e8c <HAL_HCD_IRQHandler+0x210>
      return;
 8002e8a:	bf00      	nop
    }
  }
}
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_HCD_Start+0x16>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e013      	b.n	8002ed0 <HAL_HCD_Start+0x3e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 fd26 	bl	8005908 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fa3e 	bl	8005342 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_HCD_Stop+0x16>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e00d      	b.n	8002f0a <HAL_HCD_Stop+0x32>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 f914 	bl	8006128 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f002 fcc8 	bl	80058b4 <USB_ResetPort>
 8002f24:	4603      	mov	r3, r0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3360      	adds	r3, #96	; 0x60
 8002f48:	781b      	ldrb	r3, [r3, #0]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3350      	adds	r3, #80	; 0x50
 8002f70:	681b      	ldr	r3, [r3, #0]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f002 fd0c 	bl	80059a8 <USB_GetCurrentFrame>
 8002f90:	4603      	mov	r3, r0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fce7 	bl	800597a <USB_GetHostSpeed>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d11a      	bne.n	800301c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3361      	adds	r3, #97	; 0x61
 8003006:	2206      	movs	r2, #6
 8003008:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f002 ff4e 	bl	8005eb6 <USB_HC_Halt>
 800301a:	e0af      	b.n	800317c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003032:	d11b      	bne.n	800306c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003046:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3361      	adds	r3, #97	; 0x61
 8003056:	2207      	movs	r2, #7
 8003058:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f002 ff26 	bl	8005eb6 <USB_HC_Halt>
 800306a:	e087      	b.n	800317c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b20      	cmp	r3, #32
 8003080:	d109      	bne.n	8003096 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	461a      	mov	r2, r3
 8003090:	2320      	movs	r3, #32
 8003092:	6093      	str	r3, [r2, #8]
 8003094:	e072      	b.n	800317c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4413      	add	r3, r2
 800309e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d11a      	bne.n	80030e2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	461a      	mov	r2, r3
 80030ba:	2308      	movs	r3, #8
 80030bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	3361      	adds	r3, #97	; 0x61
 80030cc:	2205      	movs	r2, #5
 80030ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f002 feeb 	bl	8005eb6 <USB_HC_Halt>
 80030e0:	e04c      	b.n	800317c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f8:	d11b      	bne.n	8003132 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	461a      	mov	r2, r3
 8003108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800310c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3361      	adds	r3, #97	; 0x61
 800311c:	2208      	movs	r2, #8
 800311e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f002 fec3 	bl	8005eb6 <USB_HC_Halt>
 8003130:	e024      	b.n	800317c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b80      	cmp	r3, #128	; 0x80
 8003146:	d119      	bne.n	800317c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	461a      	mov	r2, r3
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	212c      	movs	r1, #44	; 0x2c
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	3361      	adds	r3, #97	; 0x61
 8003168:	2206      	movs	r2, #6
 800316a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f002 fe9d 	bl	8005eb6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003192:	d112      	bne.n	80031ba <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 fe89 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80031b8:	e24e      	b.n	8003658 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f040 80df 	bne.w	8003390 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3348      	adds	r3, #72	; 0x48
 80031e8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	0159      	lsls	r1, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80031fc:	1ad2      	subs	r2, r2, r3
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	202c      	movs	r0, #44	; 0x2c
 8003204:	fb00 f303 	mul.w	r3, r0, r3
 8003208:	440b      	add	r3, r1
 800320a:	3350      	adds	r3, #80	; 0x50
 800320c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3361      	adds	r3, #97	; 0x61
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	335c      	adds	r3, #92	; 0x5c
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	461a      	mov	r2, r3
 8003240:	2301      	movs	r3, #1
 8003242:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	333f      	adds	r3, #63	; 0x3f
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	333f      	adds	r3, #63	; 0x3f
 8003266:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003268:	2b02      	cmp	r3, #2
 800326a:	d111      	bne.n	8003290 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f002 fe1d 	bl	8005eb6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	2310      	movs	r3, #16
 800328c:	6093      	str	r3, [r2, #8]
 800328e:	e03a      	b.n	8003306 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	333f      	adds	r3, #63	; 0x3f
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d009      	beq.n	80032b8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	333f      	adds	r3, #63	; 0x3f
 80032b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d126      	bne.n	8003306 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	0151      	lsls	r1, r2, #5
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	440a      	add	r2, r1
 80032ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032d6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3360      	adds	r3, #96	; 0x60
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	b2d9      	uxtb	r1, r3
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	202c      	movs	r0, #44	; 0x2c
 80032f4:	fb00 f303 	mul.w	r3, r0, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3360      	adds	r3, #96	; 0x60
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f005 f87b 	bl	80083fc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d12b      	bne.n	8003366 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3348      	adds	r3, #72	; 0x48
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	202c      	movs	r0, #44	; 0x2c
 8003324:	fb00 f202 	mul.w	r2, r0, r2
 8003328:	440a      	add	r2, r1
 800332a:	3240      	adds	r2, #64	; 0x40
 800332c:	8812      	ldrh	r2, [r2, #0]
 800332e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 818e 	beq.w	8003658 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3354      	adds	r3, #84	; 0x54
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	f083 0301 	eor.w	r3, r3, #1
 8003350:	b2d8      	uxtb	r0, r3
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3354      	adds	r3, #84	; 0x54
 8003360:	4602      	mov	r2, r0
 8003362:	701a      	strb	r2, [r3, #0]
}
 8003364:	e178      	b.n	8003658 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3354      	adds	r3, #84	; 0x54
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	f083 0301 	eor.w	r3, r3, #1
 800337a:	b2d8      	uxtb	r0, r3
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3354      	adds	r3, #84	; 0x54
 800338a:	4602      	mov	r2, r0
 800338c:	701a      	strb	r2, [r3, #0]
}
 800338e:	e163      	b.n	8003658 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	f040 80f6 	bne.w	8003594 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	3361      	adds	r3, #97	; 0x61
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d109      	bne.n	80033d0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3360      	adds	r3, #96	; 0x60
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e0c9      	b.n	8003564 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3361      	adds	r3, #97	; 0x61
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d109      	bne.n	80033f8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3360      	adds	r3, #96	; 0x60
 80033f2:	2205      	movs	r2, #5
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e0b5      	b.n	8003564 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3361      	adds	r3, #97	; 0x61
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b06      	cmp	r3, #6
 800340a:	d009      	beq.n	8003420 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3361      	adds	r3, #97	; 0x61
 800341a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800341c:	2b08      	cmp	r3, #8
 800341e:	d150      	bne.n	80034c2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	335c      	adds	r3, #92	; 0x5c
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	202c      	movs	r0, #44	; 0x2c
 8003438:	fb00 f303 	mul.w	r3, r0, r3
 800343c:	440b      	add	r3, r1
 800343e:	335c      	adds	r3, #92	; 0x5c
 8003440:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	335c      	adds	r3, #92	; 0x5c
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d912      	bls.n	800347c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	335c      	adds	r3, #92	; 0x5c
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3360      	adds	r3, #96	; 0x60
 8003476:	2204      	movs	r2, #4
 8003478:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800347a:	e073      	b.n	8003564 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3360      	adds	r3, #96	; 0x60
 800348a:	2202      	movs	r2, #2
 800348c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034a4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034ac:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ba:	461a      	mov	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034c0:	e050      	b.n	8003564 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3361      	adds	r3, #97	; 0x61
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d122      	bne.n	800351c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3360      	adds	r3, #96	; 0x60
 80034e4:	2202      	movs	r2, #2
 80034e6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034fe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003506:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4413      	add	r3, r2
 8003510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e023      	b.n	8003564 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3361      	adds	r3, #97	; 0x61
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b07      	cmp	r3, #7
 800352e:	d119      	bne.n	8003564 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	335c      	adds	r3, #92	; 0x5c
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	202c      	movs	r0, #44	; 0x2c
 8003548:	fb00 f303 	mul.w	r3, r0, r3
 800354c:	440b      	add	r3, r1
 800354e:	335c      	adds	r3, #92	; 0x5c
 8003550:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	3360      	adds	r3, #96	; 0x60
 8003560:	2204      	movs	r2, #4
 8003562:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	461a      	mov	r2, r3
 8003572:	2302      	movs	r3, #2
 8003574:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	b2d9      	uxtb	r1, r3
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	202c      	movs	r0, #44	; 0x2c
 8003580:	fb00 f303 	mul.w	r3, r0, r3
 8003584:	4413      	add	r3, r2
 8003586:	3360      	adds	r3, #96	; 0x60
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f004 ff35 	bl	80083fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003592:	e061      	b.n	8003658 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4413      	add	r3, r2
 800359c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d156      	bne.n	8003658 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	333f      	adds	r3, #63	; 0x3f
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d111      	bne.n	80035e2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	212c      	movs	r1, #44	; 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	335c      	adds	r3, #92	; 0x5c
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f002 fc6b 	bl	8005eb6 <USB_HC_Halt>
 80035e0:	e031      	b.n	8003646 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	333f      	adds	r3, #63	; 0x3f
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	333f      	adds	r3, #63	; 0x3f
 8003604:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003606:	2b02      	cmp	r3, #2
 8003608:	d11d      	bne.n	8003646 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	335c      	adds	r3, #92	; 0x5c
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d110      	bne.n	8003646 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3361      	adds	r3, #97	; 0x61
 8003632:	2203      	movs	r2, #3
 8003634:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f002 fc38 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	2310      	movs	r3, #16
 8003656:	6093      	str	r3, [r2, #8]
}
 8003658:	bf00      	nop
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d11a      	bne.n	80036c6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369c:	461a      	mov	r2, r3
 800369e:	2304      	movs	r3, #4
 80036a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	3361      	adds	r3, #97	; 0x61
 80036b0:	2206      	movs	r2, #6
 80036b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f002 fbf9 	bl	8005eb6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80036c4:	e331      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d12e      	bne.n	800373a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	461a      	mov	r2, r3
 80036ea:	2320      	movs	r3, #32
 80036ec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	212c      	movs	r1, #44	; 0x2c
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	333d      	adds	r3, #61	; 0x3d
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f040 8313 	bne.w	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	333d      	adds	r3, #61	; 0x3d
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	212c      	movs	r1, #44	; 0x2c
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	3360      	adds	r3, #96	; 0x60
 8003724:	2202      	movs	r2, #2
 8003726:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f002 fbbf 	bl	8005eb6 <USB_HC_Halt>
}
 8003738:	e2f7      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d112      	bne.n	8003778 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	461a      	mov	r2, r3
 8003760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003764:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f002 fba0 	bl	8005eb6 <USB_HC_Halt>
}
 8003776:	e2d8      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d140      	bne.n	8003810 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	212c      	movs	r1, #44	; 0x2c
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	4413      	add	r3, r2
 800379a:	335c      	adds	r3, #92	; 0x5c
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d111      	bne.n	80037da <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	212c      	movs	r1, #44	; 0x2c
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	333d      	adds	r3, #61	; 0x3d
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	461a      	mov	r2, r3
 80037d6:	2340      	movs	r3, #64	; 0x40
 80037d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e6:	461a      	mov	r2, r3
 80037e8:	2301      	movs	r3, #1
 80037ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3361      	adds	r3, #97	; 0x61
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f002 fb54 	bl	8005eb6 <USB_HC_Halt>
}
 800380e:	e28c      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d12c      	bne.n	8003880 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	3361      	adds	r3, #97	; 0x61
 8003834:	2204      	movs	r2, #4
 8003836:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	333d      	adds	r3, #61	; 0x3d
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	335c      	adds	r3, #92	; 0x5c
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f002 fb25 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	461a      	mov	r2, r3
 800387a:	2340      	movs	r3, #64	; 0x40
 800387c:	6093      	str	r3, [r2, #8]
}
 800387e:	e254      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d11a      	bne.n	80038cc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4413      	add	r3, r2
 800389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a2:	461a      	mov	r2, r3
 80038a4:	2308      	movs	r3, #8
 80038a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	3361      	adds	r3, #97	; 0x61
 80038b6:	2205      	movs	r2, #5
 80038b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 faf6 	bl	8005eb6 <USB_HC_Halt>
}
 80038ca:	e22e      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d140      	bne.n	8003964 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	335c      	adds	r3, #92	; 0x5c
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	3361      	adds	r3, #97	; 0x61
 8003902:	2203      	movs	r2, #3
 8003904:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	333d      	adds	r3, #61	; 0x3d
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d112      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	333c      	adds	r3, #60	; 0x3c
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	333d      	adds	r3, #61	; 0x3d
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f002 fab3 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	461a      	mov	r2, r3
 800395e:	2310      	movs	r3, #16
 8003960:	6093      	str	r3, [r2, #8]
}
 8003962:	e1e2      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d164      	bne.n	8003a44 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d111      	bne.n	80039a6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	3361      	adds	r3, #97	; 0x61
 8003990:	2206      	movs	r2, #6
 8003992:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 fa89 	bl	8005eb6 <USB_HC_Halt>
 80039a4:	e044      	b.n	8003a30 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	335c      	adds	r3, #92	; 0x5c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	202c      	movs	r0, #44	; 0x2c
 80039be:	fb00 f303 	mul.w	r3, r0, r3
 80039c2:	440b      	add	r3, r1
 80039c4:	335c      	adds	r3, #92	; 0x5c
 80039c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	335c      	adds	r3, #92	; 0x5c
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d920      	bls.n	8003a1e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	335c      	adds	r3, #92	; 0x5c
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	3360      	adds	r3, #96	; 0x60
 80039fc:	2204      	movs	r2, #4
 80039fe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	b2d9      	uxtb	r1, r3
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	202c      	movs	r0, #44	; 0x2c
 8003a0a:	fb00 f303 	mul.w	r3, r0, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	3360      	adds	r3, #96	; 0x60
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f004 fcf0 	bl	80083fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a1c:	e008      	b.n	8003a30 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3360      	adds	r3, #96	; 0x60
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	6093      	str	r3, [r2, #8]
}
 8003a42:	e172      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5a:	d11b      	bne.n	8003a94 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3361      	adds	r3, #97	; 0x61
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 fa1c 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a90:	6093      	str	r3, [r2, #8]
}
 8003a92:	e14a      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	f040 813f 	bne.w	8003d2a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3361      	adds	r3, #97	; 0x61
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d17d      	bne.n	8003bbc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3360      	adds	r3, #96	; 0x60
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	212c      	movs	r1, #44	; 0x2c
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	333f      	adds	r3, #63	; 0x3f
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d00a      	beq.n	8003afc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	333f      	adds	r3, #63	; 0x3f
 8003af4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	f040 8100 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d113      	bne.n	8003b2c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3355      	adds	r3, #85	; 0x55
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	f083 0301 	eor.w	r3, r3, #1
 8003b18:	b2d8      	uxtb	r0, r3
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3355      	adds	r3, #85	; 0x55
 8003b28:	4602      	mov	r2, r0
 8003b2a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	f040 80e3 	bne.w	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	334c      	adds	r3, #76	; 0x4c
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80d8 	beq.w	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	334c      	adds	r3, #76	; 0x4c
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	202c      	movs	r0, #44	; 0x2c
 8003b62:	fb00 f202 	mul.w	r2, r0, r2
 8003b66:	440a      	add	r2, r1
 8003b68:	3240      	adds	r2, #64	; 0x40
 8003b6a:	8812      	ldrh	r2, [r2, #0]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	202c      	movs	r0, #44	; 0x2c
 8003b76:	fb00 f202 	mul.w	r2, r0, r2
 8003b7a:	440a      	add	r2, r1
 8003b7c:	3240      	adds	r2, #64	; 0x40
 8003b7e:	8812      	ldrh	r2, [r2, #0]
 8003b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80b5 	beq.w	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3355      	adds	r3, #85	; 0x55
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	f083 0301 	eor.w	r3, r3, #1
 8003ba6:	b2d8      	uxtb	r0, r3
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3355      	adds	r3, #85	; 0x55
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e09f      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	212c      	movs	r1, #44	; 0x2c
 8003bc2:	fb01 f303 	mul.w	r3, r1, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3361      	adds	r3, #97	; 0x61
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d109      	bne.n	8003be4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	212c      	movs	r1, #44	; 0x2c
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	3360      	adds	r3, #96	; 0x60
 8003bde:	2202      	movs	r2, #2
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e08b      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	3361      	adds	r3, #97	; 0x61
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d109      	bne.n	8003c0c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	212c      	movs	r1, #44	; 0x2c
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	3360      	adds	r3, #96	; 0x60
 8003c06:	2202      	movs	r2, #2
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e077      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	212c      	movs	r1, #44	; 0x2c
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	3361      	adds	r3, #97	; 0x61
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	d109      	bne.n	8003c34 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3360      	adds	r3, #96	; 0x60
 8003c2e:	2205      	movs	r2, #5
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e063      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3361      	adds	r3, #97	; 0x61
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b06      	cmp	r3, #6
 8003c46:	d009      	beq.n	8003c5c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3361      	adds	r3, #97	; 0x61
 8003c56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d14f      	bne.n	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	212c      	movs	r1, #44	; 0x2c
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	335c      	adds	r3, #92	; 0x5c
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	202c      	movs	r0, #44	; 0x2c
 8003c74:	fb00 f303 	mul.w	r3, r0, r3
 8003c78:	440b      	add	r3, r1
 8003c7a:	335c      	adds	r3, #92	; 0x5c
 8003c7c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	335c      	adds	r3, #92	; 0x5c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d912      	bls.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	335c      	adds	r3, #92	; 0x5c
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3360      	adds	r3, #96	; 0x60
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e021      	b.n	8003cfc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	212c      	movs	r1, #44	; 0x2c
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3360      	adds	r3, #96	; 0x60
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ce0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ce8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	b2d9      	uxtb	r1, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	202c      	movs	r0, #44	; 0x2c
 8003d18:	fb00 f303 	mul.w	r3, r0, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3360      	adds	r3, #96	; 0x60
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f004 fb69 	bl	80083fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d2a:	bf00      	nop
 8003d2c:	3720      	adds	r7, #32
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b08a      	sub	sp, #40	; 0x28
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	0c5b      	lsrs	r3, r3, #17
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d66:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d004      	beq.n	8003d78 <HCD_RXQLVL_IRQHandler+0x46>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	f000 80a9 	beq.w	8003ec8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d76:	e0aa      	b.n	8003ece <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 80a6 	beq.w	8003ecc <HCD_RXQLVL_IRQHandler+0x19a>
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	212c      	movs	r1, #44	; 0x2c
 8003d86:	fb01 f303 	mul.w	r3, r1, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3344      	adds	r3, #68	; 0x44
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 809b 	beq.w	8003ecc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3350      	adds	r3, #80	; 0x50
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	441a      	add	r2, r3
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	202c      	movs	r0, #44	; 0x2c
 8003db0:	fb00 f303 	mul.w	r3, r0, r3
 8003db4:	440b      	add	r3, r1
 8003db6:	334c      	adds	r3, #76	; 0x4c
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d87a      	bhi.n	8003eb4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3344      	adds	r3, #68	; 0x44
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f001 fbc4 	bl	8005564 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	212c      	movs	r1, #44	; 0x2c
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	3344      	adds	r3, #68	; 0x44
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	441a      	add	r2, r3
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	202c      	movs	r0, #44	; 0x2c
 8003df6:	fb00 f303 	mul.w	r3, r0, r3
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3344      	adds	r3, #68	; 0x44
 8003dfe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	212c      	movs	r1, #44	; 0x2c
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3350      	adds	r3, #80	; 0x50
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	441a      	add	r2, r3
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	202c      	movs	r0, #44	; 0x2c
 8003e1a:	fb00 f303 	mul.w	r3, r0, r3
 8003e1e:	440b      	add	r3, r1
 8003e20:	3350      	adds	r3, #80	; 0x50
 8003e22:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	0cdb      	lsrs	r3, r3, #19
 8003e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e38:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	212c      	movs	r1, #44	; 0x2c
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	3340      	adds	r3, #64	; 0x40
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d13c      	bne.n	8003ecc <HCD_RXQLVL_IRQHandler+0x19a>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d039      	beq.n	8003ecc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e6e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e76:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	3354      	adds	r3, #84	; 0x54
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f083 0301 	eor.w	r3, r3, #1
 8003e9e:	b2d8      	uxtb	r0, r3
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	212c      	movs	r1, #44	; 0x2c
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3354      	adds	r3, #84	; 0x54
 8003eae:	4602      	mov	r2, r0
 8003eb0:	701a      	strb	r2, [r3, #0]
      break;
 8003eb2:	e00b      	b.n	8003ecc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	212c      	movs	r1, #44	; 0x2c
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3360      	adds	r3, #96	; 0x60
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	701a      	strb	r2, [r3, #0]
      break;
 8003ec6:	e001      	b.n	8003ecc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003ec8:	bf00      	nop
 8003eca:	e000      	b.n	8003ece <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003ecc:	bf00      	nop
  }
}
 8003ece:	bf00      	nop
 8003ed0:	3728      	adds	r7, #40	; 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f02:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d10b      	bne.n	8003f26 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d102      	bne.n	8003f1e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f004 fa53 	bl	80083c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f043 0302 	orr.w	r3, r3, #2
 8003f24:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d132      	bne.n	8003f96 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f043 0308 	orr.w	r3, r3, #8
 8003f36:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d126      	bne.n	8003f90 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d113      	bne.n	8003f72 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f54:	d106      	bne.n	8003f64 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 fc6f 	bl	8005840 <USB_InitFSLSPClkSel>
 8003f62:	e011      	b.n	8003f88 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 fc68 	bl	8005840 <USB_InitFSLSPClkSel>
 8003f70:	e00a      	b.n	8003f88 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d106      	bne.n	8003f88 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f80:	461a      	mov	r2, r3
 8003f82:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f86:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f004 fa45 	bl	8008418 <HAL_HCD_PortEnabled_Callback>
 8003f8e:	e002      	b.n	8003f96 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f004 fa4f 	bl	8008434 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d103      	bne.n	8003fa8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f043 0320 	orr.w	r3, r3, #32
 8003fa6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e12b      	b.n	8004226 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fd f9ca 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800400e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800401e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004020:	f000 fd5c 	bl	8004adc <HAL_RCC_GetPCLK1Freq>
 8004024:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4a81      	ldr	r2, [pc, #516]	; (8004230 <HAL_I2C_Init+0x274>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d807      	bhi.n	8004040 <HAL_I2C_Init+0x84>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a80      	ldr	r2, [pc, #512]	; (8004234 <HAL_I2C_Init+0x278>)
 8004034:	4293      	cmp	r3, r2
 8004036:	bf94      	ite	ls
 8004038:	2301      	movls	r3, #1
 800403a:	2300      	movhi	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e006      	b.n	800404e <HAL_I2C_Init+0x92>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4a7d      	ldr	r2, [pc, #500]	; (8004238 <HAL_I2C_Init+0x27c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	bf94      	ite	ls
 8004048:	2301      	movls	r3, #1
 800404a:	2300      	movhi	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e0e7      	b.n	8004226 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4a78      	ldr	r2, [pc, #480]	; (800423c <HAL_I2C_Init+0x280>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0c9b      	lsrs	r3, r3, #18
 8004060:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4a6a      	ldr	r2, [pc, #424]	; (8004230 <HAL_I2C_Init+0x274>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d802      	bhi.n	8004090 <HAL_I2C_Init+0xd4>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	3301      	adds	r3, #1
 800408e:	e009      	b.n	80040a4 <HAL_I2C_Init+0xe8>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	4a69      	ldr	r2, [pc, #420]	; (8004240 <HAL_I2C_Init+0x284>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	099b      	lsrs	r3, r3, #6
 80040a2:	3301      	adds	r3, #1
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	495c      	ldr	r1, [pc, #368]	; (8004230 <HAL_I2C_Init+0x274>)
 80040c0:	428b      	cmp	r3, r1
 80040c2:	d819      	bhi.n	80040f8 <HAL_I2C_Init+0x13c>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1e59      	subs	r1, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80040d2:	1c59      	adds	r1, r3, #1
 80040d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040d8:	400b      	ands	r3, r1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_I2C_Init+0x138>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1e59      	subs	r1, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ec:	3301      	adds	r3, #1
 80040ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f2:	e051      	b.n	8004198 <HAL_I2C_Init+0x1dc>
 80040f4:	2304      	movs	r3, #4
 80040f6:	e04f      	b.n	8004198 <HAL_I2C_Init+0x1dc>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d111      	bne.n	8004124 <HAL_I2C_Init+0x168>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	440b      	add	r3, r1
 800410e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004112:	3301      	adds	r3, #1
 8004114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e012      	b.n	800414a <HAL_I2C_Init+0x18e>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e58      	subs	r0, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	0099      	lsls	r1, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Init+0x196>
 800414e:	2301      	movs	r3, #1
 8004150:	e022      	b.n	8004198 <HAL_I2C_Init+0x1dc>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10e      	bne.n	8004178 <HAL_I2C_Init+0x1bc>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1e58      	subs	r0, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	440b      	add	r3, r1
 8004168:	fbb0 f3f3 	udiv	r3, r0, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004176:	e00f      	b.n	8004198 <HAL_I2C_Init+0x1dc>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1e58      	subs	r0, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	0099      	lsls	r1, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	fbb0 f3f3 	udiv	r3, r0, r3
 800418e:	3301      	adds	r3, #1
 8004190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	6809      	ldr	r1, [r1, #0]
 800419c:	4313      	orrs	r3, r2
 800419e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6911      	ldr	r1, [r2, #16]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68d2      	ldr	r2, [r2, #12]
 80041d2:	4311      	orrs	r1, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	430b      	orrs	r3, r1
 80041da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	000186a0 	.word	0x000186a0
 8004234:	001e847f 	.word	0x001e847f
 8004238:	003d08ff 	.word	0x003d08ff
 800423c:	431bde83 	.word	0x431bde83
 8004240:	10624dd3 	.word	0x10624dd3

08004244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e264      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d075      	beq.n	800434e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004262:	4ba3      	ldr	r3, [pc, #652]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b04      	cmp	r3, #4
 800426c:	d00c      	beq.n	8004288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426e:	4ba0      	ldr	r3, [pc, #640]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004276:	2b08      	cmp	r3, #8
 8004278:	d112      	bne.n	80042a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427a:	4b9d      	ldr	r3, [pc, #628]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004286:	d10b      	bne.n	80042a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	4b99      	ldr	r3, [pc, #612]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05b      	beq.n	800434c <HAL_RCC_OscConfig+0x108>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d157      	bne.n	800434c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e23f      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d106      	bne.n	80042b8 <HAL_RCC_OscConfig+0x74>
 80042aa:	4b91      	ldr	r3, [pc, #580]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a90      	ldr	r2, [pc, #576]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e01d      	b.n	80042f4 <HAL_RCC_OscConfig+0xb0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x98>
 80042c2:	4b8b      	ldr	r3, [pc, #556]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a8a      	ldr	r2, [pc, #552]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a87      	ldr	r2, [pc, #540]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0xb0>
 80042dc:	4b84      	ldr	r3, [pc, #528]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a83      	ldr	r2, [pc, #524]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b81      	ldr	r3, [pc, #516]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a80      	ldr	r2, [pc, #512]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fd fa04 	bl	8001708 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004304:	f7fd fa00 	bl	8001708 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e204      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b76      	ldr	r3, [pc, #472]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0xc0>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fd f9f0 	bl	8001708 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800432c:	f7fd f9ec 	bl	8001708 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e1f0      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	4b6c      	ldr	r3, [pc, #432]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0xe8>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d063      	beq.n	8004422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800435a:	4b65      	ldr	r3, [pc, #404]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004366:	4b62      	ldr	r3, [pc, #392]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800436e:	2b08      	cmp	r3, #8
 8004370:	d11c      	bne.n	80043ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004372:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	4b5c      	ldr	r3, [pc, #368]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_RCC_OscConfig+0x152>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1c4      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b56      	ldr	r3, [pc, #344]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4952      	ldr	r1, [pc, #328]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	e03a      	b.n	8004422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b4:	4b4f      	ldr	r3, [pc, #316]	; (80044f4 <HAL_RCC_OscConfig+0x2b0>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fd f9a5 	bl	8001708 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fd f9a1 	bl	8001708 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1a5      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4940      	ldr	r1, [pc, #256]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
 80043f4:	e015      	b.n	8004422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f6:	4b3f      	ldr	r3, [pc, #252]	; (80044f4 <HAL_RCC_OscConfig+0x2b0>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd f984 	bl	8001708 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004404:	f7fd f980 	bl	8001708 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e184      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d030      	beq.n	8004490 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004436:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <HAL_RCC_OscConfig+0x2b4>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fd f964 	bl	8001708 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004444:	f7fd f960 	bl	8001708 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e164      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x200>
 8004462:	e015      	b.n	8004490 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_OscConfig+0x2b4>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446a:	f7fd f94d 	bl	8001708 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004472:	f7fd f949 	bl	8001708 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e14d      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 8004486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80a0 	beq.w	80045de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a2:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10f      	bne.n	80044ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044bc:	6413      	str	r3, [r2, #64]	; 0x40
 80044be:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ca:	2301      	movs	r3, #1
 80044cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_OscConfig+0x2b8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d121      	bne.n	800451e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044da:	4b08      	ldr	r3, [pc, #32]	; (80044fc <HAL_RCC_OscConfig+0x2b8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a07      	ldr	r2, [pc, #28]	; (80044fc <HAL_RCC_OscConfig+0x2b8>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e6:	f7fd f90f 	bl	8001708 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	e011      	b.n	8004512 <HAL_RCC_OscConfig+0x2ce>
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	42470000 	.word	0x42470000
 80044f8:	42470e80 	.word	0x42470e80
 80044fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004500:	f7fd f902 	bl	8001708 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e106      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b85      	ldr	r3, [pc, #532]	; (8004728 <HAL_RCC_OscConfig+0x4e4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d106      	bne.n	8004534 <HAL_RCC_OscConfig+0x2f0>
 8004526:	4b81      	ldr	r3, [pc, #516]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	4a80      	ldr	r2, [pc, #512]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	6713      	str	r3, [r2, #112]	; 0x70
 8004532:	e01c      	b.n	800456e <HAL_RCC_OscConfig+0x32a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b05      	cmp	r3, #5
 800453a:	d10c      	bne.n	8004556 <HAL_RCC_OscConfig+0x312>
 800453c:	4b7b      	ldr	r3, [pc, #492]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	4a7a      	ldr	r2, [pc, #488]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 8004542:	f043 0304 	orr.w	r3, r3, #4
 8004546:	6713      	str	r3, [r2, #112]	; 0x70
 8004548:	4b78      	ldr	r3, [pc, #480]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	4a77      	ldr	r2, [pc, #476]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
 8004554:	e00b      	b.n	800456e <HAL_RCC_OscConfig+0x32a>
 8004556:	4b75      	ldr	r3, [pc, #468]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4a74      	ldr	r2, [pc, #464]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	6713      	str	r3, [r2, #112]	; 0x70
 8004562:	4b72      	ldr	r3, [pc, #456]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a71      	ldr	r2, [pc, #452]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d015      	beq.n	80045a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fd f8c7 	bl	8001708 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fd f8c3 	bl	8001708 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0c5      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	4b65      	ldr	r3, [pc, #404]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0ee      	beq.n	800457e <HAL_RCC_OscConfig+0x33a>
 80045a0:	e014      	b.n	80045cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a2:	f7fd f8b1 	bl	8001708 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fd f8ad 	bl	8001708 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0af      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c0:	4b5a      	ldr	r3, [pc, #360]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1ee      	bne.n	80045aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d105      	bne.n	80045de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d2:	4b56      	ldr	r3, [pc, #344]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	4a55      	ldr	r2, [pc, #340]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 80045d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 809b 	beq.w	800471e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 030c 	and.w	r3, r3, #12
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d05c      	beq.n	80046ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d141      	bne.n	8004680 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fc:	4b4c      	ldr	r3, [pc, #304]	; (8004730 <HAL_RCC_OscConfig+0x4ec>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004602:	f7fd f881 	bl	8001708 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460a:	f7fd f87d 	bl	8001708 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e081      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461c:	4b43      	ldr	r3, [pc, #268]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	019b      	lsls	r3, r3, #6
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	3b01      	subs	r3, #1
 8004642:	041b      	lsls	r3, r3, #16
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	061b      	lsls	r3, r3, #24
 800464c:	4937      	ldr	r1, [pc, #220]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004652:	4b37      	ldr	r3, [pc, #220]	; (8004730 <HAL_RCC_OscConfig+0x4ec>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fd f856 	bl	8001708 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004660:	f7fd f852 	bl	8001708 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e056      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004672:	4b2e      	ldr	r3, [pc, #184]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x41c>
 800467e:	e04e      	b.n	800471e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004680:	4b2b      	ldr	r3, [pc, #172]	; (8004730 <HAL_RCC_OscConfig+0x4ec>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7fd f83f 	bl	8001708 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468e:	f7fd f83b 	bl	8001708 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e03f      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a0:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <HAL_RCC_OscConfig+0x44a>
 80046ac:	e037      	b.n	800471e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e032      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046ba:	4b1c      	ldr	r3, [pc, #112]	; (800472c <HAL_RCC_OscConfig+0x4e8>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d028      	beq.n	800471a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d121      	bne.n	800471a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d11a      	bne.n	800471a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046ea:	4013      	ands	r3, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d111      	bne.n	800471a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	3b01      	subs	r3, #1
 8004704:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d107      	bne.n	800471a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d001      	beq.n	800471e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40007000 	.word	0x40007000
 800472c:	40023800 	.word	0x40023800
 8004730:	42470060 	.word	0x42470060

08004734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0cc      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004748:	4b68      	ldr	r3, [pc, #416]	; (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d90c      	bls.n	8004770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b65      	ldr	r3, [pc, #404]	; (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b63      	ldr	r3, [pc, #396]	; (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0b8      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004788:	4b59      	ldr	r3, [pc, #356]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a58      	ldr	r2, [pc, #352]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a0:	4b53      	ldr	r3, [pc, #332]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a52      	ldr	r2, [pc, #328]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4b50      	ldr	r3, [pc, #320]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	494d      	ldr	r1, [pc, #308]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d044      	beq.n	8004854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d119      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e07f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d003      	beq.n	80047f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f2:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004802:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e067      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 0203 	bic.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4934      	ldr	r1, [pc, #208]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	4313      	orrs	r3, r2
 8004822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004824:	f7fc ff70 	bl	8001708 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	e00a      	b.n	8004842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482c:	f7fc ff6c 	bl	8001708 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e04f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 020c 	and.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	429a      	cmp	r2, r3
 8004852:	d1eb      	bne.n	800482c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004854:	4b25      	ldr	r3, [pc, #148]	; (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d20c      	bcs.n	800487c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b22      	ldr	r3, [pc, #136]	; (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e032      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004888:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4916      	ldr	r1, [pc, #88]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	490e      	ldr	r1, [pc, #56]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ba:	f000 f821 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 80048be:	4602      	mov	r2, r0
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	490a      	ldr	r1, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 80048cc:	5ccb      	ldrb	r3, [r1, r3]
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fc fed0 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023c00 	.word	0x40023c00
 80048f0:	40023800 	.word	0x40023800
 80048f4:	08008a68 	.word	0x08008a68
 80048f8:	20000000 	.word	0x20000000
 80048fc:	20000004 	.word	0x20000004

08004900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004900:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	607b      	str	r3, [r7, #4]
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	2300      	movs	r3, #0
 8004912:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004918:	4b67      	ldr	r3, [pc, #412]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b08      	cmp	r3, #8
 8004922:	d00d      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x40>
 8004924:	2b08      	cmp	r3, #8
 8004926:	f200 80bd 	bhi.w	8004aa4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x34>
 800492e:	2b04      	cmp	r3, #4
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x3a>
 8004932:	e0b7      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004934:	4b61      	ldr	r3, [pc, #388]	; (8004abc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004936:	60bb      	str	r3, [r7, #8]
       break;
 8004938:	e0b7      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800493a:	4b61      	ldr	r3, [pc, #388]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800493c:	60bb      	str	r3, [r7, #8]
      break;
 800493e:	e0b4      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004940:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004948:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800494a:	4b5b      	ldr	r3, [pc, #364]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d04d      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004956:	4b58      	ldr	r3, [pc, #352]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	461a      	mov	r2, r3
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004966:	f04f 0100 	mov.w	r1, #0
 800496a:	ea02 0800 	and.w	r8, r2, r0
 800496e:	ea03 0901 	and.w	r9, r3, r1
 8004972:	4640      	mov	r0, r8
 8004974:	4649      	mov	r1, r9
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	014b      	lsls	r3, r1, #5
 8004980:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004984:	0142      	lsls	r2, r0, #5
 8004986:	4610      	mov	r0, r2
 8004988:	4619      	mov	r1, r3
 800498a:	ebb0 0008 	subs.w	r0, r0, r8
 800498e:	eb61 0109 	sbc.w	r1, r1, r9
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	018b      	lsls	r3, r1, #6
 800499c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049a0:	0182      	lsls	r2, r0, #6
 80049a2:	1a12      	subs	r2, r2, r0
 80049a4:	eb63 0301 	sbc.w	r3, r3, r1
 80049a8:	f04f 0000 	mov.w	r0, #0
 80049ac:	f04f 0100 	mov.w	r1, #0
 80049b0:	00d9      	lsls	r1, r3, #3
 80049b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049b6:	00d0      	lsls	r0, r2, #3
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	eb12 0208 	adds.w	r2, r2, r8
 80049c0:	eb43 0309 	adc.w	r3, r3, r9
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	0259      	lsls	r1, r3, #9
 80049ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049d2:	0250      	lsls	r0, r2, #9
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	461a      	mov	r2, r3
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	f7fb ffde 	bl	80009a4 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e04a      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	ea02 0400 	and.w	r4, r2, r0
 8004a0a:	ea03 0501 	and.w	r5, r3, r1
 8004a0e:	4620      	mov	r0, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	014b      	lsls	r3, r1, #5
 8004a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a20:	0142      	lsls	r2, r0, #5
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	1b00      	subs	r0, r0, r4
 8004a28:	eb61 0105 	sbc.w	r1, r1, r5
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	018b      	lsls	r3, r1, #6
 8004a36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a3a:	0182      	lsls	r2, r0, #6
 8004a3c:	1a12      	subs	r2, r2, r0
 8004a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	00d9      	lsls	r1, r3, #3
 8004a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a50:	00d0      	lsls	r0, r2, #3
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	1912      	adds	r2, r2, r4
 8004a58:	eb45 0303 	adc.w	r3, r5, r3
 8004a5c:	f04f 0000 	mov.w	r0, #0
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	0299      	lsls	r1, r3, #10
 8004a66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a6a:	0290      	lsls	r0, r2, #10
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	f7fb ff92 	bl	80009a4 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
      break;
 8004aa2:	e002      	b.n	8004aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004aa6:	60bb      	str	r3, [r7, #8]
      break;
 8004aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	007a1200 	.word	0x007a1200

08004ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aca:	681b      	ldr	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000000 	.word	0x20000000

08004adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae0:	f7ff fff0 	bl	8004ac4 <HAL_RCC_GetHCLKFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	0a9b      	lsrs	r3, r3, #10
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	08008a78 	.word	0x08008a78

08004b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e07b      	b.n	8004c0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b26:	d009      	beq.n	8004b3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	61da      	str	r2, [r3, #28]
 8004b2e:	e005      	b.n	8004b3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc fc58 	bl	800140c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	ea42 0103 	orr.w	r1, r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	f003 0104 	and.w	r1, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f003 0210 	and.w	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e041      	b.n	8004cac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fc fc2d 	bl	800149c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f000 f95d 	bl	8004f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d001      	beq.n	8004ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e046      	b.n	8004d5a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <HAL_TIM_Base_Start+0xb4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d022      	beq.n	8004d24 <HAL_TIM_Base_Start+0x70>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d01d      	beq.n	8004d24 <HAL_TIM_Base_Start+0x70>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <HAL_TIM_Base_Start+0xb8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d018      	beq.n	8004d24 <HAL_TIM_Base_Start+0x70>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_TIM_Base_Start+0xbc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <HAL_TIM_Base_Start+0x70>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <HAL_TIM_Base_Start+0xc0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <HAL_TIM_Base_Start+0x70>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_TIM_Base_Start+0xc4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_TIM_Base_Start+0x70>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <HAL_TIM_Base_Start+0xc8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_TIM_Base_Start+0x70>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <HAL_TIM_Base_Start+0xcc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d111      	bne.n	8004d48 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d010      	beq.n	8004d58 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d46:	e007      	b.n	8004d58 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40010400 	.word	0x40010400
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40001800 	.word	0x40001800

08004d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIM_ConfigClockSource+0x1c>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e0b4      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x186>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd8:	d03e      	beq.n	8004e58 <HAL_TIM_ConfigClockSource+0xd4>
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dde:	f200 8087 	bhi.w	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	f000 8086 	beq.w	8004ef6 <HAL_TIM_ConfigClockSource+0x172>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d87f      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b70      	cmp	r3, #112	; 0x70
 8004df2:	d01a      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0xa6>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d87b      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b60      	cmp	r3, #96	; 0x60
 8004dfa:	d050      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x11a>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d877      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b50      	cmp	r3, #80	; 0x50
 8004e02:	d03c      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0xfa>
 8004e04:	2b50      	cmp	r3, #80	; 0x50
 8004e06:	d873      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d058      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x13a>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d86f      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b30      	cmp	r3, #48	; 0x30
 8004e12:	d064      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d86b      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d060      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d867      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d05c      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d05a      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e28:	e062      	b.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6899      	ldr	r1, [r3, #8]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f000 f985 	bl	8005148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	609a      	str	r2, [r3, #8]
      break;
 8004e56:	e04f      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6899      	ldr	r1, [r3, #8]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f000 f96e 	bl	8005148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7a:	609a      	str	r2, [r3, #8]
      break;
 8004e7c:	e03c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 f8e2 	bl	8005054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2150      	movs	r1, #80	; 0x50
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f93b 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e02c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f000 f901 	bl	80050b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2160      	movs	r1, #96	; 0x60
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f92b 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e01c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 f8c2 	bl	8005054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2140      	movs	r1, #64	; 0x40
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f91b 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004edc:	e00c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f000 f912 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004eee:	e003      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef4:	e000      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a40      	ldr	r2, [pc, #256]	; (8005028 <TIM_Base_SetConfig+0x114>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d013      	beq.n	8004f54 <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f32:	d00f      	beq.n	8004f54 <TIM_Base_SetConfig+0x40>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a3d      	ldr	r2, [pc, #244]	; (800502c <TIM_Base_SetConfig+0x118>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a3c      	ldr	r2, [pc, #240]	; (8005030 <TIM_Base_SetConfig+0x11c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3b      	ldr	r2, [pc, #236]	; (8005034 <TIM_Base_SetConfig+0x120>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3a      	ldr	r2, [pc, #232]	; (8005038 <TIM_Base_SetConfig+0x124>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d108      	bne.n	8004f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a2f      	ldr	r2, [pc, #188]	; (8005028 <TIM_Base_SetConfig+0x114>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d02b      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f74:	d027      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2c      	ldr	r2, [pc, #176]	; (800502c <TIM_Base_SetConfig+0x118>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d023      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2b      	ldr	r2, [pc, #172]	; (8005030 <TIM_Base_SetConfig+0x11c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d01f      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2a      	ldr	r2, [pc, #168]	; (8005034 <TIM_Base_SetConfig+0x120>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01b      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a29      	ldr	r2, [pc, #164]	; (8005038 <TIM_Base_SetConfig+0x124>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d017      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a28      	ldr	r2, [pc, #160]	; (800503c <TIM_Base_SetConfig+0x128>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a27      	ldr	r2, [pc, #156]	; (8005040 <TIM_Base_SetConfig+0x12c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00f      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a26      	ldr	r2, [pc, #152]	; (8005044 <TIM_Base_SetConfig+0x130>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a25      	ldr	r2, [pc, #148]	; (8005048 <TIM_Base_SetConfig+0x134>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a24      	ldr	r2, [pc, #144]	; (800504c <TIM_Base_SetConfig+0x138>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a23      	ldr	r2, [pc, #140]	; (8005050 <TIM_Base_SetConfig+0x13c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d108      	bne.n	8004fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <TIM_Base_SetConfig+0x114>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_Base_SetConfig+0xf8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a0c      	ldr	r2, [pc, #48]	; (8005038 <TIM_Base_SetConfig+0x124>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d103      	bne.n	8005014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	615a      	str	r2, [r3, #20]
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010000 	.word	0x40010000
 800502c:	40000400 	.word	0x40000400
 8005030:	40000800 	.word	0x40000800
 8005034:	40000c00 	.word	0x40000c00
 8005038:	40010400 	.word	0x40010400
 800503c:	40014000 	.word	0x40014000
 8005040:	40014400 	.word	0x40014400
 8005044:	40014800 	.word	0x40014800
 8005048:	40001800 	.word	0x40001800
 800504c:	40001c00 	.word	0x40001c00
 8005050:	40002000 	.word	0x40002000

08005054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f023 0201 	bic.w	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800507e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f023 030a 	bic.w	r3, r3, #10
 8005090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b087      	sub	sp, #28
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0210 	bic.w	r2, r3, #16
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	f043 0307 	orr.w	r3, r3, #7
 8005134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	609a      	str	r2, [r3, #8]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	021a      	lsls	r2, r3, #8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	431a      	orrs	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4313      	orrs	r3, r2
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800519c:	2302      	movs	r3, #2
 800519e:	e05a      	b.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a21      	ldr	r2, [pc, #132]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d022      	beq.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ec:	d01d      	beq.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d018      	beq.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1b      	ldr	r2, [pc, #108]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1a      	ldr	r2, [pc, #104]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00e      	beq.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a18      	ldr	r2, [pc, #96]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d009      	beq.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a17      	ldr	r2, [pc, #92]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a15      	ldr	r2, [pc, #84]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d10c      	bne.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	4313      	orrs	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40010000 	.word	0x40010000
 8005268:	40000400 	.word	0x40000400
 800526c:	40000800 	.word	0x40000800
 8005270:	40000c00 	.word	0x40000c00
 8005274:	40010400 	.word	0x40010400
 8005278:	40014000 	.word	0x40014000
 800527c:	40001800 	.word	0x40001800

08005280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005280:	b084      	sub	sp, #16
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	f107 001c 	add.w	r0, r7, #28
 800528e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b01      	cmp	r3, #1
 8005296:	d122      	bne.n	80052de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9c0 	bl	8005658 <USB_CoreReset>
 80052d8:	4603      	mov	r3, r0
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e01a      	b.n	8005314 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9b4 	bl	8005658 <USB_CoreReset>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
 8005306:	e005      	b.n	8005314 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10b      	bne.n	8005332 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f043 0206 	orr.w	r2, r3, #6
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800533e:	b004      	add	sp, #16
 8005340:	4770      	bx	lr

08005342 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 0201 	bic.w	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d115      	bne.n	80053d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053b4:	2001      	movs	r0, #1
 80053b6:	f7fc f9b3 	bl	8001720 <HAL_Delay>
      ms++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f93a 	bl	800563a <USB_GetMode>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d01e      	beq.n	800540a <USB_SetCurrentMode+0x84>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b31      	cmp	r3, #49	; 0x31
 80053d0:	d9f0      	bls.n	80053b4 <USB_SetCurrentMode+0x2e>
 80053d2:	e01a      	b.n	800540a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d115      	bne.n	8005406 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053e6:	2001      	movs	r0, #1
 80053e8:	f7fc f99a 	bl	8001720 <HAL_Delay>
      ms++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f921 	bl	800563a <USB_GetMode>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <USB_SetCurrentMode+0x84>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b31      	cmp	r3, #49	; 0x31
 8005402:	d9f0      	bls.n	80053e6 <USB_SetCurrentMode+0x60>
 8005404:	e001      	b.n	800540a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e005      	b.n	8005416 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b32      	cmp	r3, #50	; 0x32
 800540e:	d101      	bne.n	8005414 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a13      	ldr	r2, [pc, #76]	; (8005484 <USB_FlushTxFifo+0x64>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d901      	bls.n	8005440 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e01b      	b.n	8005478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	daf2      	bge.n	800542e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	019b      	lsls	r3, r3, #6
 8005450:	f043 0220 	orr.w	r2, r3, #32
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3301      	adds	r3, #1
 800545c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a08      	ldr	r2, [pc, #32]	; (8005484 <USB_FlushTxFifo+0x64>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e006      	b.n	8005478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b20      	cmp	r3, #32
 8005474:	d0f0      	beq.n	8005458 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	00030d40 	.word	0x00030d40

08005488 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a11      	ldr	r2, [pc, #68]	; (80054e4 <USB_FlushRxFifo+0x5c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e018      	b.n	80054d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	daf2      	bge.n	8005494 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2210      	movs	r2, #16
 80054b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <USB_FlushRxFifo+0x5c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e006      	b.n	80054d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d0f0      	beq.n	80054b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	00030d40 	.word	0x00030d40

080054e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4611      	mov	r1, r2
 80054f4:	461a      	mov	r2, r3
 80054f6:	460b      	mov	r3, r1
 80054f8:	71fb      	strb	r3, [r7, #7]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005506:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d123      	bne.n	8005556 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800550e:	88bb      	ldrh	r3, [r7, #4]
 8005510:	3303      	adds	r3, #3
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005516:	2300      	movs	r3, #0
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	e018      	b.n	800554e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	031a      	lsls	r2, r3, #12
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4413      	add	r3, r2
 8005524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005528:	461a      	mov	r2, r3
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	3301      	adds	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3301      	adds	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	3301      	adds	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3301      	adds	r3, #1
 8005546:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3301      	adds	r3, #1
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	429a      	cmp	r2, r3
 8005554:	d3e2      	bcc.n	800551c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3724      	adds	r7, #36	; 0x24
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005564:	b480      	push	{r7}
 8005566:	b08b      	sub	sp, #44	; 0x2c
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	089b      	lsrs	r3, r3, #2
 800557e:	b29b      	uxth	r3, r3
 8005580:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800558a:	2300      	movs	r3, #0
 800558c:	623b      	str	r3, [r7, #32]
 800558e:	e014      	b.n	80055ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	601a      	str	r2, [r3, #0]
    pDest++;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	3301      	adds	r3, #1
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	3301      	adds	r3, #1
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	3301      	adds	r3, #1
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	3301      	adds	r3, #1
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	3301      	adds	r3, #1
 80055b8:	623b      	str	r3, [r7, #32]
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d3e6      	bcc.n	8005590 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055c2:	8bfb      	ldrh	r3, [r7, #30]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01e      	beq.n	8005606 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d2:	461a      	mov	r2, r3
 80055d4:	f107 0310 	add.w	r3, r7, #16
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	701a      	strb	r2, [r3, #0]
      i++;
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	3301      	adds	r3, #1
 80055f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	3301      	adds	r3, #1
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80055fa:	8bfb      	ldrh	r3, [r7, #30]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005600:	8bfb      	ldrh	r3, [r7, #30]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ea      	bne.n	80055dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005608:	4618      	mov	r0, r3
 800560a:	372c      	adds	r7, #44	; 0x2c
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800562c:	68fb      	ldr	r3, [r7, #12]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0301 	and.w	r3, r3, #1
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a13      	ldr	r2, [pc, #76]	; (80056bc <USB_CoreReset+0x64>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e01b      	b.n	80056ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	daf2      	bge.n	8005664 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f043 0201 	orr.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a09      	ldr	r2, [pc, #36]	; (80056bc <USB_CoreReset+0x64>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e006      	b.n	80056ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d0f0      	beq.n	800568e <USB_CoreReset+0x36>

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	00030d40 	.word	0x00030d40

080056c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c0:	b084      	sub	sp, #16
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d018      	beq.n	8005748 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d10a      	bne.n	8005732 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800572a:	f043 0304 	orr.w	r3, r3, #4
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	e014      	b.n	800575c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005740:	f023 0304 	bic.w	r3, r3, #4
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e009      	b.n	800575c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005756:	f023 0304 	bic.w	r3, r3, #4
 800575a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800575c:	2110      	movs	r1, #16
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff fe5e 	bl	8005420 <USB_FlushTxFifo>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fe8a 	bl	8005488 <USB_FlushRxFifo>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	e015      	b.n	80057b0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005790:	461a      	mov	r2, r3
 8005792:	f04f 33ff 	mov.w	r3, #4294967295
 8005796:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3301      	adds	r3, #1
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d3e5      	bcc.n	8005784 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295
 80057c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a13      	ldr	r2, [pc, #76]	; (800582c <USB_HostInit+0x16c>)
 80057de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <USB_HostInit+0x170>)
 80057e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80057e8:	e009      	b.n	80057fe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a10      	ldr	r2, [pc, #64]	; (8005834 <USB_HostInit+0x174>)
 80057f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a0f      	ldr	r2, [pc, #60]	; (8005838 <USB_HostInit+0x178>)
 80057fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f043 0210 	orr.w	r2, r3, #16
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <USB_HostInit+0x17c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005828:	b004      	add	sp, #16
 800582a:	4770      	bx	lr
 800582c:	01000200 	.word	0x01000200
 8005830:	00e00300 	.word	0x00e00300
 8005834:	00600080 	.word	0x00600080
 8005838:	004000e0 	.word	0x004000e0
 800583c:	a3200008 	.word	0xa3200008

08005840 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005878:	4313      	orrs	r3, r2
 800587a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d107      	bne.n	8005892 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005888:	461a      	mov	r2, r3
 800588a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800588e:	6053      	str	r3, [r2, #4]
 8005890:	e009      	b.n	80058a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d106      	bne.n	80058a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589e:	461a      	mov	r2, r3
 80058a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80058a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058e4:	2064      	movs	r0, #100	; 0x64
 80058e6:	f7fb ff1b 	bl	8001720 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80058f8:	200a      	movs	r0, #10
 80058fa:	f7fb ff11 	bl	8001720 <HAL_Delay>

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800592c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <USB_DriveVbus+0x44>
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d106      	bne.n	800594c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800594a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005956:	d109      	bne.n	800596c <USB_DriveVbus+0x64>
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	0c5b      	lsrs	r3, r3, #17
 8005998:	f003 0303 	and.w	r3, r3, #3
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	b29b      	uxth	r3, r3
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	461a      	mov	r2, r3
 80059da:	4603      	mov	r3, r0
 80059dc:	70fb      	strb	r3, [r7, #3]
 80059de:	460b      	mov	r3, r1
 80059e0:	70bb      	strb	r3, [r7, #2]
 80059e2:	4613      	mov	r3, r2
 80059e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fa:	461a      	mov	r2, r3
 80059fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005a00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d87e      	bhi.n	8005b08 <USB_HC_Init+0x13c>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <USB_HC_Init+0x44>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005acb 	.word	0x08005acb
 8005a18:	08005a21 	.word	0x08005a21
 8005a1c:	08005a8d 	.word	0x08005a8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da10      	bge.n	8005a5e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a5a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a5c:	e057      	b.n	8005b0e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d051      	beq.n	8005b0e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a88:	60d3      	str	r3, [r2, #12]
      break;
 8005a8a:	e040      	b.n	8005b0e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005a9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aa0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da34      	bge.n	8005b12 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ac8:	e023      	b.n	8005b12 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f240 2325 	movw	r3, #549	; 0x225
 8005adc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ade:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da17      	bge.n	8005b16 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b00:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b04:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b06:	e006      	b.n	8005b16 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	77fb      	strb	r3, [r7, #31]
      break;
 8005b0c:	e004      	b.n	8005b18 <USB_HC_Init+0x14c>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e002      	b.n	8005b18 <USB_HC_Init+0x14c>
      break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <USB_HC_Init+0x14c>
      break;
 8005b16:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b32:	f043 0302 	orr.w	r3, r3, #2
 8005b36:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	2101      	movs	r1, #1
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	6939      	ldr	r1, [r7, #16]
 8005b4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b52:	4313      	orrs	r3, r2
 8005b54:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da03      	bge.n	8005b72 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	e001      	b.n	8005b76 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff feff 	bl	800597a <USB_GetHostSpeed>
 8005b7c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d106      	bne.n	8005b94 <USB_HC_Init+0x1c8>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d003      	beq.n	8005b94 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e001      	b.n	8005b98 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b98:	787b      	ldrb	r3, [r7, #1]
 8005b9a:	059b      	lsls	r3, r3, #22
 8005b9c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ba0:	78bb      	ldrb	r3, [r7, #2]
 8005ba2:	02db      	lsls	r3, r3, #11
 8005ba4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ba8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bae:	049b      	lsls	r3, r3, #18
 8005bb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bb4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bb6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	0159      	lsls	r1, r3, #5
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	440b      	add	r3, r1
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bd4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005bd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d003      	beq.n	8005be6 <USB_HC_Init+0x21a>
 8005bde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10f      	bne.n	8005c06 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c04:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c06:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08c      	sub	sp, #48	; 0x30
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c2c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d02d      	beq.n	8005c96 <USB_HC_StartXfer+0x86>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	791b      	ldrb	r3, [r3, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d129      	bne.n	8005c96 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d117      	bne.n	8005c78 <USB_HC_StartXfer+0x68>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	79db      	ldrb	r3, [r3, #7]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <USB_HC_StartXfer+0x48>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	79db      	ldrb	r3, [r3, #7]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d10f      	bne.n	8005c78 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	6a3a      	ldr	r2, [r7, #32]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <USB_HC_StartXfer+0x86>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	795b      	ldrb	r3, [r3, #5]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d107      	bne.n	8005c96 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fa0f 	bl	80060b0 <USB_DoPing>
      return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e0f8      	b.n	8005e88 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d018      	beq.n	8005cd0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	8912      	ldrh	r2, [r2, #8]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	8912      	ldrh	r2, [r2, #8]
 8005cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cb2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005cb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cb6:	8b7b      	ldrh	r3, [r7, #26]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d90b      	bls.n	8005cd4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005cbc:	8b7b      	ldrh	r3, [r7, #26]
 8005cbe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	8912      	ldrh	r2, [r2, #8]
 8005cc6:	fb02 f203 	mul.w	r2, r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	611a      	str	r2, [r3, #16]
 8005cce:	e001      	b.n	8005cd4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	78db      	ldrb	r3, [r3, #3]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	8912      	ldrh	r2, [r2, #8]
 8005ce2:	fb02 f203 	mul.w	r2, r2, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	611a      	str	r2, [r3, #16]
 8005cea:	e003      	b.n	8005cf4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cfe:	04d9      	lsls	r1, r3, #19
 8005d00:	4b63      	ldr	r3, [pc, #396]	; (8005e90 <USB_HC_StartXfer+0x280>)
 8005d02:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d04:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	7a9b      	ldrb	r3, [r3, #10]
 8005d0a:	075b      	lsls	r3, r3, #29
 8005d0c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d10:	69f9      	ldr	r1, [r7, #28]
 8005d12:	0148      	lsls	r0, r1, #5
 8005d14:	6a39      	ldr	r1, [r7, #32]
 8005d16:	4401      	add	r1, r0
 8005d18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d1c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d1e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68d9      	ldr	r1, [r3, #12]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d36:	460a      	mov	r2, r1
 8005d38:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d70:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	7e7b      	ldrb	r3, [r7, #25]
 8005d82:	075b      	lsls	r3, r3, #29
 8005d84:	69f9      	ldr	r1, [r7, #28]
 8005d86:	0148      	lsls	r0, r1, #5
 8005d88:	6a39      	ldr	r1, [r7, #32]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005daa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	78db      	ldrb	r3, [r3, #3]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	e003      	b.n	8005dc6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dc4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dcc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dda:	461a      	mov	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e04e      	b.n	8005e88 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	78db      	ldrb	r3, [r3, #3]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d149      	bne.n	8005e86 <USB_HC_StartXfer+0x276>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d045      	beq.n	8005e86 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	79db      	ldrb	r3, [r3, #7]
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d830      	bhi.n	8005e64 <USB_HC_StartXfer+0x254>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <USB_HC_StartXfer+0x1f8>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e3d 	.word	0x08005e3d
 8005e10:	08005e19 	.word	0x08005e19
 8005e14:	08005e3d 	.word	0x08005e3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e22:	8afa      	ldrh	r2, [r7, #22]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d91c      	bls.n	8005e68 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f043 0220 	orr.w	r2, r3, #32
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e3a:	e015      	b.n	8005e68 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	3303      	adds	r3, #3
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e46:	8afa      	ldrh	r2, [r7, #22]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d90a      	bls.n	8005e6c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e62:	e003      	b.n	8005e6c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e64:	bf00      	nop
 8005e66:	e002      	b.n	8005e6e <USB_HC_StartXfer+0x25e>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <USB_HC_StartXfer+0x25e>
        break;
 8005e6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	68d9      	ldr	r1, [r3, #12]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	785a      	ldrb	r2, [r3, #1]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	9000      	str	r0, [sp, #0]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff fb31 	bl	80054e8 <USB_WritePacket>
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3728      	adds	r7, #40	; 0x28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	1ff80000 	.word	0x1ff80000

08005e94 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	b29b      	uxth	r3, r3
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b089      	sub	sp, #36	; 0x24
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	0c9b      	lsrs	r3, r3, #18
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	0fdb      	lsrs	r3, r3, #31
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d104      	bne.n	8005f10 <USB_HC_Halt+0x5a>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e0c8      	b.n	80060a2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <USB_HC_Halt+0x66>
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d163      	bne.n	8005fe4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f3a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f040 80ab 	bne.w	80060a0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d133      	bne.n	8005fbe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f94:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa2:	d81d      	bhi.n	8005fe0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fba:	d0ec      	beq.n	8005f96 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fbc:	e070      	b.n	80060a0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fdc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fde:	e05f      	b.n	80060a0 <USB_HC_Halt+0x1ea>
            break;
 8005fe0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fe2:	e05d      	b.n	80060a0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006002:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d133      	bne.n	800607c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006032:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	440a      	add	r2, r1
 800604a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800604e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006052:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006060:	d81d      	bhi.n	800609e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006078:	d0ec      	beq.n	8006054 <USB_HC_Halt+0x19e>
 800607a:	e011      	b.n	80060a0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	440a      	add	r2, r1
 8006092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006096:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	e000      	b.n	80060a0 <USB_HC_Halt+0x1ea>
          break;
 800609e:	bf00      	nop
    }
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3724      	adds	r7, #36	; 0x24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060c4:	2301      	movs	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	04da      	lsls	r2, r3, #19
 80060cc:	4b15      	ldr	r3, [pc, #84]	; (8006124 <USB_DoPing+0x74>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006100:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	461a      	mov	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	1ff80000 	.word	0x1ff80000

08006128 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff f911 	bl	8005364 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006142:	2110      	movs	r1, #16
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff f96b 	bl	8005420 <USB_FlushTxFifo>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff f997 	bl	8005488 <USB_FlushRxFifo>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e01f      	b.n	80061aa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006180:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006188:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006190:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	461a      	mov	r2, r3
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b0f      	cmp	r3, #15
 80061ae:	d9dc      	bls.n	800616a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061b0:	2300      	movs	r3, #0
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	e034      	b.n	8006220 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	461a      	mov	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061fc:	d80c      	bhi.n	8006218 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006214:	d0ec      	beq.n	80061f0 <USB_StopHost+0xc8>
 8006216:	e000      	b.n	800621a <USB_StopHost+0xf2>
        break;
 8006218:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	3301      	adds	r3, #1
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b0f      	cmp	r3, #15
 8006224:	d9c7      	bls.n	80061b6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622c:	461a      	mov	r2, r3
 800622e:	f04f 33ff 	mov.w	r3, #4294967295
 8006232:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f04f 32ff 	mov.w	r2, #4294967295
 800623a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff f880 	bl	8005342 <USB_EnableGlobalInt>

  return ret;
 8006242:	7ffb      	ldrb	r3, [r7, #31]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800624c:	b590      	push	{r4, r7, lr}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af04      	add	r7, sp, #16
 8006252:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006254:	2301      	movs	r3, #1
 8006256:	2202      	movs	r2, #2
 8006258:	2102      	movs	r1, #2
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fc66 	bl	8006b2c <USBH_FindInterface>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	2bff      	cmp	r3, #255	; 0xff
 8006268:	d002      	beq.n	8006270 <USBH_CDC_InterfaceInit+0x24>
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d901      	bls.n	8006274 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006270:	2302      	movs	r3, #2
 8006272:	e13d      	b.n	80064f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc3b 	bl	8006af4 <USBH_SelectInterface>
 800627e:	4603      	mov	r3, r0
 8006280:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006288:	2302      	movs	r3, #2
 800628a:	e131      	b.n	80064f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006292:	2050      	movs	r0, #80	; 0x50
 8006294:	f002 fafa 	bl	800888c <malloc>
 8006298:	4603      	mov	r3, r0
 800629a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062ac:	2302      	movs	r3, #2
 80062ae:	e11f      	b.n	80064f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062b0:	2250      	movs	r2, #80	; 0x50
 80062b2:	2100      	movs	r1, #0
 80062b4:	68b8      	ldr	r0, [r7, #8]
 80062b6:	f002 faf9 	bl	80088ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	211a      	movs	r1, #26
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da15      	bge.n	80062fe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	211a      	movs	r1, #26
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	4413      	add	r3, r2
 80062de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	211a      	movs	r1, #26
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062f8:	881a      	ldrh	r2, [r3, #0]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 ff2c 	bl	8008162 <USBH_AllocPipe>
 800630a:	4603      	mov	r3, r0
 800630c:	461a      	mov	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	7819      	ldrb	r1, [r3, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	7858      	ldrb	r0, [r3, #1]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	8952      	ldrh	r2, [r2, #10]
 800632a:	9202      	str	r2, [sp, #8]
 800632c:	2203      	movs	r2, #3
 800632e:	9201      	str	r2, [sp, #4]
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	4623      	mov	r3, r4
 8006334:	4602      	mov	r2, r0
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 fee4 	bl	8008104 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2200      	movs	r2, #0
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f002 f9f3 	bl	8008730 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800634a:	2300      	movs	r3, #0
 800634c:	2200      	movs	r2, #0
 800634e:	210a      	movs	r1, #10
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fbeb 	bl	8006b2c <USBH_FindInterface>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2bff      	cmp	r3, #255	; 0xff
 800635e:	d002      	beq.n	8006366 <USBH_CDC_InterfaceInit+0x11a>
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d901      	bls.n	800636a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006366:	2302      	movs	r3, #2
 8006368:	e0c2      	b.n	80064f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	211a      	movs	r1, #26
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b25b      	sxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	da16      	bge.n	80063b0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	211a      	movs	r1, #26
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	211a      	movs	r1, #26
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063a8:	881a      	ldrh	r2, [r3, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	835a      	strh	r2, [r3, #26]
 80063ae:	e015      	b.n	80063dc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	211a      	movs	r1, #26
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063c0:	781a      	ldrb	r2, [r3, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	211a      	movs	r1, #26
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063d6:	881a      	ldrh	r2, [r3, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	211a      	movs	r1, #26
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	4413      	add	r3, r2
 80063e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da16      	bge.n	8006422 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	211a      	movs	r1, #26
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	4413      	add	r3, r2
 8006400:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006404:	781a      	ldrb	r2, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	211a      	movs	r1, #26
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	4413      	add	r3, r2
 8006416:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800641a:	881a      	ldrh	r2, [r3, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	835a      	strh	r2, [r3, #26]
 8006420:	e015      	b.n	800644e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	211a      	movs	r1, #26
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	4413      	add	r3, r2
 800642e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006432:	781a      	ldrb	r2, [r3, #0]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	211a      	movs	r1, #26
 800643e:	fb01 f303 	mul.w	r3, r1, r3
 8006442:	4413      	add	r3, r2
 8006444:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7b9b      	ldrb	r3, [r3, #14]
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 fe84 	bl	8008162 <USBH_AllocPipe>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	7bdb      	ldrb	r3, [r3, #15]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fe7a 	bl	8008162 <USBH_AllocPipe>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	7b59      	ldrb	r1, [r3, #13]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	7b98      	ldrb	r0, [r3, #14]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	8b12      	ldrh	r2, [r2, #24]
 800648e:	9202      	str	r2, [sp, #8]
 8006490:	2202      	movs	r2, #2
 8006492:	9201      	str	r2, [sp, #4]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4623      	mov	r3, r4
 8006498:	4602      	mov	r2, r0
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 fe32 	bl	8008104 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	7b19      	ldrb	r1, [r3, #12]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	7bd8      	ldrb	r0, [r3, #15]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	8b52      	ldrh	r2, [r2, #26]
 80064b8:	9202      	str	r2, [sp, #8]
 80064ba:	2202      	movs	r2, #2
 80064bc:	9201      	str	r2, [sp, #4]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	4623      	mov	r3, r4
 80064c2:	4602      	mov	r2, r0
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 fe1d 	bl	8008104 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	7b5b      	ldrb	r3, [r3, #13]
 80064d6:	2200      	movs	r2, #0
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f002 f928 	bl	8008730 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	7b1b      	ldrb	r3, [r3, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f002 f921 	bl	8008730 <USBH_LL_SetToggle>

  return USBH_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd90      	pop	{r4, r7, pc}

080064f8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00e      	beq.n	8006530 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 fe12 	bl	8008142 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fe3d 	bl	80081a4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	7b1b      	ldrb	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00e      	beq.n	8006556 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	7b1b      	ldrb	r3, [r3, #12]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fdff 	bl	8008142 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	7b1b      	ldrb	r3, [r3, #12]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fe2a 	bl	80081a4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	7b5b      	ldrb	r3, [r3, #13]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00e      	beq.n	800657c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	7b5b      	ldrb	r3, [r3, #13]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 fdec 	bl	8008142 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	7b5b      	ldrb	r3, [r3, #13]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fe17 	bl	80081a4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	4618      	mov	r0, r3
 8006592:	f002 f983 	bl	800889c <free>
    phost->pActiveClass->pData = 0U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800659c:	2200      	movs	r2, #0
 800659e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3340      	adds	r3, #64	; 0x40
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f8b1 	bl	800672a <GetLineCoding>
 80065c8:	4603      	mov	r3, r0
 80065ca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065cc:	7afb      	ldrb	r3, [r7, #11]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d105      	bne.n	80065de <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065d8:	2102      	movs	r1, #2
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065de:	7afb      	ldrb	r3, [r7, #11]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006608:	2b04      	cmp	r3, #4
 800660a:	d877      	bhi.n	80066fc <USBH_CDC_Process+0x114>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <USBH_CDC_Process+0x2c>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006629 	.word	0x08006629
 8006618:	0800662f 	.word	0x0800662f
 800661c:	0800665f 	.word	0x0800665f
 8006620:	080066d3 	.word	0x080066d3
 8006624:	080066e1 	.word	0x080066e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	73fb      	strb	r3, [r7, #15]
      break;
 800662c:	e06d      	b.n	800670a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f897 	bl	8006768 <SetLineCoding>
 800663a:	4603      	mov	r3, r0
 800663c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800664c:	e058      	b.n	8006700 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d055      	beq.n	8006700 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2204      	movs	r2, #4
 8006658:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800665c:	e050      	b.n	8006700 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	3340      	adds	r3, #64	; 0x40
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f860 	bl	800672a <GetLineCoding>
 800666a:	4603      	mov	r3, r0
 800666c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d126      	bne.n	80066c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006686:	791b      	ldrb	r3, [r3, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d13b      	bne.n	8006704 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006696:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006698:	429a      	cmp	r2, r3
 800669a:	d133      	bne.n	8006704 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d12b      	bne.n	8006704 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d124      	bne.n	8006704 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f958 	bl	8006970 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066c0:	e020      	b.n	8006704 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d01d      	beq.n	8006704 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2204      	movs	r2, #4
 80066cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066d0:	e018      	b.n	8006704 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f867 	bl	80067a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8da 	bl	8006892 <CDC_ProcessReception>
      break;
 80066de:	e014      	b.n	800670a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066e0:	2100      	movs	r1, #0
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 ffef 	bl	80076c6 <USBH_ClrFeature>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80066fa:	e005      	b.n	8006708 <USBH_CDC_Process+0x120>

    default:
      break;
 80066fc:	bf00      	nop
 80066fe:	e004      	b.n	800670a <USBH_CDC_Process+0x122>
      break;
 8006700:	bf00      	nop
 8006702:	e002      	b.n	800670a <USBH_CDC_Process+0x122>
      break;
 8006704:	bf00      	nop
 8006706:	e000      	b.n	800670a <USBH_CDC_Process+0x122>
      break;
 8006708:	bf00      	nop

  }

  return status;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	22a1      	movs	r2, #161	; 0xa1
 8006738:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2221      	movs	r2, #33	; 0x21
 800673e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2207      	movs	r2, #7
 8006750:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2207      	movs	r2, #7
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fa81 	bl	8007c60 <USBH_CtlReq>
 800675e:	4603      	mov	r3, r0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2221      	movs	r2, #33	; 0x21
 8006776:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2207      	movs	r2, #7
 800678e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2207      	movs	r2, #7
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 fa62 	bl	8007c60 <USBH_CtlReq>
 800679c:	4603      	mov	r3, r0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b086      	sub	sp, #24
 80067aa:	af02      	add	r7, sp, #8
 80067ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d002      	beq.n	80067cc <CDC_ProcessTransmission+0x26>
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d023      	beq.n	8006812 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067ca:	e05e      	b.n	800688a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	8b12      	ldrh	r2, [r2, #24]
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d90b      	bls.n	80067f0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	69d9      	ldr	r1, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8b1a      	ldrh	r2, [r3, #24]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	7b5b      	ldrb	r3, [r3, #13]
 80067e4:	2001      	movs	r0, #1
 80067e6:	9000      	str	r0, [sp, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 fc48 	bl	800807e <USBH_BulkSendData>
 80067ee:	e00b      	b.n	8006808 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	7b5b      	ldrb	r3, [r3, #13]
 80067fe:	2001      	movs	r0, #1
 8006800:	9000      	str	r0, [sp, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fc3b 	bl	800807e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006810:	e03b      	b.n	800688a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	7b5b      	ldrb	r3, [r3, #13]
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 ff5f 	bl	80086dc <USBH_LL_GetURBState>
 800681e:	4603      	mov	r3, r0
 8006820:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d128      	bne.n	800687a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	8b12      	ldrh	r2, [r2, #24]
 8006830:	4293      	cmp	r3, r2
 8006832:	d90e      	bls.n	8006852 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	8b12      	ldrh	r2, [r2, #24]
 800683c:	1a9a      	subs	r2, r3, r2
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	8b12      	ldrh	r2, [r2, #24]
 800684a:	441a      	add	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	61da      	str	r2, [r3, #28]
 8006850:	e002      	b.n	8006858 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006868:	e00e      	b.n	8006888 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f868 	bl	8006948 <USBH_CDC_TransmitCallback>
      break;
 8006878:	e006      	b.n	8006888 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d103      	bne.n	8006888 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006888:	bf00      	nop
  }
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b086      	sub	sp, #24
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d002      	beq.n	80068b8 <CDC_ProcessReception+0x26>
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d00e      	beq.n	80068d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068b6:	e043      	b.n	8006940 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	6a19      	ldr	r1, [r3, #32]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	8b5a      	ldrh	r2, [r3, #26]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	7b1b      	ldrb	r3, [r3, #12]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fbff 	bl	80080c8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2204      	movs	r2, #4
 80068ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068d2:	e035      	b.n	8006940 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	7b1b      	ldrb	r3, [r3, #12]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fefe 	bl	80086dc <USBH_LL_GetURBState>
 80068e0:	4603      	mov	r3, r0
 80068e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068e4:	7cfb      	ldrb	r3, [r7, #19]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d129      	bne.n	800693e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	7b1b      	ldrb	r3, [r3, #12]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fe61 	bl	80085b8 <USBH_LL_GetLastXferSize>
 80068f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d016      	beq.n	8006930 <CDC_ProcessReception+0x9e>
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	8b5b      	ldrh	r3, [r3, #26]
 8006906:	461a      	mov	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4293      	cmp	r3, r2
 800690c:	d910      	bls.n	8006930 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6a1a      	ldr	r2, [r3, #32]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	441a      	add	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2203      	movs	r2, #3
 800692a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800692e:	e006      	b.n	800693e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f80f 	bl	800695c <USBH_CDC_ReceiveCallback>
      break;
 800693e:	bf00      	nop
  }
}
 8006940:	bf00      	nop
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006998:	2302      	movs	r3, #2
 800699a:	e029      	b.n	80069f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	79fa      	ldrb	r2, [r7, #7]
 80069a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f81f 	bl	80069f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 fd31 	bl	8008450 <USBH_LL_Init>

  return USBH_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e009      	b.n	8006a1e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	33e0      	adds	r3, #224	; 0xe0
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	2200      	movs	r2, #0
 8006a16:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b0f      	cmp	r3, #15
 8006a22:	d9f2      	bls.n	8006a0a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e009      	b.n	8006a3e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a44:	d3f1      	bcc.n	8006a2a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2240      	movs	r2, #64	; 0x40
 8006a6a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d016      	beq.n	8006ae2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10e      	bne.n	8006adc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ac4:	1c59      	adds	r1, r3, #1
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	33de      	adds	r3, #222	; 0xde
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
 8006ada:	e004      	b.n	8006ae6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006adc:	2302      	movs	r3, #2
 8006ade:	73fb      	strb	r3, [r7, #15]
 8006ae0:	e001      	b.n	8006ae6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d204      	bcs.n	8006b1a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b18:	e001      	b.n	8006b1e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	4608      	mov	r0, r1
 8006b36:	4611      	mov	r1, r2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	70fb      	strb	r3, [r7, #3]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70bb      	strb	r3, [r7, #2]
 8006b42:	4613      	mov	r3, r2
 8006b44:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b54:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b56:	e025      	b.n	8006ba4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
 8006b5a:	221a      	movs	r2, #26
 8006b5c:	fb02 f303 	mul.w	r3, r2, r3
 8006b60:	3308      	adds	r3, #8
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	3302      	adds	r3, #2
 8006b68:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	795b      	ldrb	r3, [r3, #5]
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d002      	beq.n	8006b7a <USBH_FindInterface+0x4e>
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	2bff      	cmp	r3, #255	; 0xff
 8006b78:	d111      	bne.n	8006b9e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b7e:	78ba      	ldrb	r2, [r7, #2]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d002      	beq.n	8006b8a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b84:	78bb      	ldrb	r3, [r7, #2]
 8006b86:	2bff      	cmp	r3, #255	; 0xff
 8006b88:	d109      	bne.n	8006b9e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b8e:	787a      	ldrb	r2, [r7, #1]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d002      	beq.n	8006b9a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b94:	787b      	ldrb	r3, [r7, #1]
 8006b96:	2bff      	cmp	r3, #255	; 0xff
 8006b98:	d101      	bne.n	8006b9e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	e006      	b.n	8006bac <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d9d6      	bls.n	8006b58 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006baa:	23ff      	movs	r3, #255	; 0xff
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fc81 	bl	80084c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fd9a 	bl	8008702 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af04      	add	r7, sp, #16
 8006bde:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006be0:	2302      	movs	r3, #2
 8006be2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d102      	bne.n	8006bfa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b0b      	cmp	r3, #11
 8006c02:	f200 81be 	bhi.w	8006f82 <USBH_Process+0x3aa>
 8006c06:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <USBH_Process+0x34>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c3d 	.word	0x08006c3d
 8006c10:	08006c6f 	.word	0x08006c6f
 8006c14:	08006cd7 	.word	0x08006cd7
 8006c18:	08006f1d 	.word	0x08006f1d
 8006c1c:	08006f83 	.word	0x08006f83
 8006c20:	08006d7b 	.word	0x08006d7b
 8006c24:	08006ec3 	.word	0x08006ec3
 8006c28:	08006db1 	.word	0x08006db1
 8006c2c:	08006dd1 	.word	0x08006dd1
 8006c30:	08006df1 	.word	0x08006df1
 8006c34:	08006e35 	.word	0x08006e35
 8006c38:	08006f05 	.word	0x08006f05
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 819e 	beq.w	8006f86 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c50:	20c8      	movs	r0, #200	; 0xc8
 8006c52:	f001 fd9d 	bl	8008790 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fc93 	bl	8008582 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c6c:	e18b      	b.n	8006f86 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d107      	bne.n	8006c88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c86:	e18d      	b.n	8006fa4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c92:	d914      	bls.n	8006cbe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d903      	bls.n	8006cb6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	220d      	movs	r2, #13
 8006cb2:	701a      	strb	r2, [r3, #0]
      break;
 8006cb4:	e176      	b.n	8006fa4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
      break;
 8006cbc:	e172      	b.n	8006fa4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cc4:	f103 020a 	add.w	r2, r3, #10
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cce:	200a      	movs	r0, #10
 8006cd0:	f001 fd5e 	bl	8008790 <USBH_Delay>
      break;
 8006cd4:	e166      	b.n	8006fa4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ce6:	2104      	movs	r1, #4
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006cec:	2064      	movs	r0, #100	; 0x64
 8006cee:	f001 fd4f 	bl	8008790 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fc1e 	bl	8008534 <USBH_LL_GetSpeed>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2205      	movs	r2, #5
 8006d06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d08:	2100      	movs	r1, #0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fa29 	bl	8008162 <USBH_AllocPipe>
 8006d10:	4603      	mov	r3, r0
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d18:	2180      	movs	r1, #128	; 0x80
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fa21 	bl	8008162 <USBH_AllocPipe>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7919      	ldrb	r1, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d3c:	b292      	uxth	r2, r2
 8006d3e:	9202      	str	r2, [sp, #8]
 8006d40:	2200      	movs	r2, #0
 8006d42:	9201      	str	r2, [sp, #4]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4603      	mov	r3, r0
 8006d48:	2280      	movs	r2, #128	; 0x80
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 f9da 	bl	8008104 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7959      	ldrb	r1, [r3, #5]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d64:	b292      	uxth	r2, r2
 8006d66:	9202      	str	r2, [sp, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	9201      	str	r2, [sp, #4]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2200      	movs	r2, #0
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f9c6 	bl	8008104 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d78:	e114      	b.n	8006fa4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f918 	bl	8006fb0 <USBH_HandleEnum>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f040 80fe 	bne.w	8006f8a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d103      	bne.n	8006da8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2208      	movs	r2, #8
 8006da4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006da6:	e0f0      	b.n	8006f8a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2207      	movs	r2, #7
 8006dac:	701a      	strb	r2, [r3, #0]
      break;
 8006dae:	e0ec      	b.n	8006f8a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 80e9 	beq.w	8006f8e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2208      	movs	r2, #8
 8006dcc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006dce:	e0de      	b.n	8006f8e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fc2c 	bl	8007638 <USBH_SetCfg>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 80d5 	bne.w	8006f92 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2209      	movs	r2, #9
 8006dec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dee:	e0d0      	b.n	8006f92 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006dfe:	2101      	movs	r1, #1
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fc3c 	bl	800767e <USBH_SetFeature>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	220a      	movs	r2, #10
 8006e16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e18:	e0bd      	b.n	8006f96 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	f040 80b9 	bne.w	8006f96 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	220a      	movs	r2, #10
 8006e28:	701a      	strb	r2, [r3, #0]
      break;
 8006e2a:	e0b4      	b.n	8006f96 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	220a      	movs	r2, #10
 8006e30:	701a      	strb	r2, [r3, #0]
      break;
 8006e32:	e0b0      	b.n	8006f96 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80ad 	beq.w	8006f9a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	e016      	b.n	8006e7c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e4e:	7bfa      	ldrb	r2, [r7, #15]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32de      	adds	r2, #222	; 0xde
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	791a      	ldrb	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d108      	bne.n	8006e76 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e64:	7bfa      	ldrb	r2, [r7, #15]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	32de      	adds	r2, #222	; 0xde
 8006e6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e74:	e005      	b.n	8006e82 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0e5      	beq.n	8006e4e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d016      	beq.n	8006eba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2206      	movs	r2, #6
 8006ea2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eaa:	2103      	movs	r1, #3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eb0:	e073      	b.n	8006f9a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	220d      	movs	r2, #13
 8006eb6:	701a      	strb	r2, [r3, #0]
      break;
 8006eb8:	e06f      	b.n	8006f9a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	220d      	movs	r2, #13
 8006ebe:	701a      	strb	r2, [r3, #0]
      break;
 8006ec0:	e06b      	b.n	8006f9a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d017      	beq.n	8006efc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	220b      	movs	r2, #11
 8006ee8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eea:	e058      	b.n	8006f9e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d154      	bne.n	8006f9e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	220d      	movs	r2, #13
 8006ef8:	701a      	strb	r2, [r3, #0]
      break;
 8006efa:	e050      	b.n	8006f9e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	220d      	movs	r2, #13
 8006f00:	701a      	strb	r2, [r3, #0]
      break;
 8006f02:	e04c      	b.n	8006f9e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d049      	beq.n	8006fa2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
      }
      break;
 8006f1a:	e042      	b.n	8006fa2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff fd67 	bl	80069f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f58:	2105      	movs	r1, #5
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d107      	bne.n	8006f7a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fe20 	bl	8006bb8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f78:	e014      	b.n	8006fa4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 faa4 	bl	80084c8 <USBH_LL_Start>
      break;
 8006f80:	e010      	b.n	8006fa4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f82:	bf00      	nop
 8006f84:	e00e      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f86:	bf00      	nop
 8006f88:	e00c      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f8a:	bf00      	nop
 8006f8c:	e00a      	b.n	8006fa4 <USBH_Process+0x3cc>
    break;
 8006f8e:	bf00      	nop
 8006f90:	e008      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f92:	bf00      	nop
 8006f94:	e006      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f96:	bf00      	nop
 8006f98:	e004      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f9a:	bf00      	nop
 8006f9c:	e002      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f9e:	bf00      	nop
 8006fa0:	e000      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006fa2:	bf00      	nop
  }
  return USBH_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	f200 81c1 	bhi.w	800734c <USBH_HandleEnum+0x39c>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <USBH_HandleEnum+0x20>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006ff1 	.word	0x08006ff1
 8006fd4:	080070af 	.word	0x080070af
 8006fd8:	08007119 	.word	0x08007119
 8006fdc:	080071a7 	.word	0x080071a7
 8006fe0:	08007211 	.word	0x08007211
 8006fe4:	08007281 	.word	0x08007281
 8006fe8:	080072c7 	.word	0x080072c7
 8006fec:	0800730d 	.word	0x0800730d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ff0:	2108      	movs	r1, #8
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa50 	bl	8007498 <USBH_Get_DevDesc>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d130      	bne.n	8007064 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	7919      	ldrb	r1, [r3, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007026:	b292      	uxth	r2, r2
 8007028:	9202      	str	r2, [sp, #8]
 800702a:	2200      	movs	r2, #0
 800702c:	9201      	str	r2, [sp, #4]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4603      	mov	r3, r0
 8007032:	2280      	movs	r2, #128	; 0x80
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 f865 	bl	8008104 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7959      	ldrb	r1, [r3, #5]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800704e:	b292      	uxth	r2, r2
 8007050:	9202      	str	r2, [sp, #8]
 8007052:	2200      	movs	r2, #0
 8007054:	9201      	str	r2, [sp, #4]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4603      	mov	r3, r0
 800705a:	2200      	movs	r2, #0
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 f851 	bl	8008104 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007062:	e175      	b.n	8007350 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	2b03      	cmp	r3, #3
 8007068:	f040 8172 	bne.w	8007350 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007072:	3301      	adds	r3, #1
 8007074:	b2da      	uxtb	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007082:	2b03      	cmp	r3, #3
 8007084:	d903      	bls.n	800708e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	220d      	movs	r2, #13
 800708a:	701a      	strb	r2, [r3, #0]
      break;
 800708c:	e160      	b.n	8007350 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	795b      	ldrb	r3, [r3, #5]
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 f885 	bl	80081a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	791b      	ldrb	r3, [r3, #4]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 f87f 	bl	80081a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
      break;
 80070ac:	e150      	b.n	8007350 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070ae:	2112      	movs	r1, #18
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f9f1 	bl	8007498 <USBH_Get_DevDesc>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d103      	bne.n	80070c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070c6:	e145      	b.n	8007354 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	f040 8142 	bne.w	8007354 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070d6:	3301      	adds	r3, #1
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d903      	bls.n	80070f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	220d      	movs	r2, #13
 80070ee:	701a      	strb	r2, [r3, #0]
      break;
 80070f0:	e130      	b.n	8007354 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	795b      	ldrb	r3, [r3, #5]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f853 	bl	80081a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	791b      	ldrb	r3, [r3, #4]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f84d 	bl	80081a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
      break;
 8007116:	e11d      	b.n	8007354 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007118:	2101      	movs	r1, #1
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa68 	bl	80075f0 <USBH_SetAddress>
 8007120:	4603      	mov	r3, r0
 8007122:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d132      	bne.n	8007190 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800712a:	2002      	movs	r0, #2
 800712c:	f001 fb30 	bl	8008790 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2203      	movs	r2, #3
 800713c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7919      	ldrb	r1, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007152:	b292      	uxth	r2, r2
 8007154:	9202      	str	r2, [sp, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4603      	mov	r3, r0
 800715e:	2280      	movs	r2, #128	; 0x80
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 ffcf 	bl	8008104 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7959      	ldrb	r1, [r3, #5]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800717a:	b292      	uxth	r2, r2
 800717c:	9202      	str	r2, [sp, #8]
 800717e:	2200      	movs	r2, #0
 8007180:	9201      	str	r2, [sp, #4]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	4603      	mov	r3, r0
 8007186:	2200      	movs	r2, #0
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 ffbb 	bl	8008104 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800718e:	e0e3      	b.n	8007358 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b03      	cmp	r3, #3
 8007194:	f040 80e0 	bne.w	8007358 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	220d      	movs	r2, #13
 800719c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	705a      	strb	r2, [r3, #1]
      break;
 80071a4:	e0d8      	b.n	8007358 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071a6:	2109      	movs	r1, #9
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f99d 	bl	80074e8 <USBH_Get_CfgDesc>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2204      	movs	r2, #4
 80071bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071be:	e0cd      	b.n	800735c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	f040 80ca 	bne.w	800735c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ce:	3301      	adds	r3, #1
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d903      	bls.n	80071ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	220d      	movs	r2, #13
 80071e6:	701a      	strb	r2, [r3, #0]
      break;
 80071e8:	e0b8      	b.n	800735c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	795b      	ldrb	r3, [r3, #5]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 ffd7 	bl	80081a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	791b      	ldrb	r3, [r3, #4]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 ffd1 	bl	80081a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
      break;
 800720e:	e0a5      	b.n	800735c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f965 	bl	80074e8 <USBH_Get_CfgDesc>
 800721e:	4603      	mov	r3, r0
 8007220:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d103      	bne.n	8007230 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2205      	movs	r2, #5
 800722c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800722e:	e097      	b.n	8007360 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b03      	cmp	r3, #3
 8007234:	f040 8094 	bne.w	8007360 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800723e:	3301      	adds	r3, #1
 8007240:	b2da      	uxtb	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800724e:	2b03      	cmp	r3, #3
 8007250:	d903      	bls.n	800725a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	220d      	movs	r2, #13
 8007256:	701a      	strb	r2, [r3, #0]
      break;
 8007258:	e082      	b.n	8007360 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	795b      	ldrb	r3, [r3, #5]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 ff9f 	bl	80081a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	791b      	ldrb	r3, [r3, #4]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 ff99 	bl	80081a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
      break;
 800727e:	e06f      	b.n	8007360 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007286:	2b00      	cmp	r3, #0
 8007288:	d019      	beq.n	80072be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007296:	23ff      	movs	r3, #255	; 0xff
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f949 	bl	8007530 <USBH_Get_StringDesc>
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d103      	bne.n	80072b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2206      	movs	r2, #6
 80072ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072ae:	e059      	b.n	8007364 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d156      	bne.n	8007364 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2206      	movs	r2, #6
 80072ba:	705a      	strb	r2, [r3, #1]
      break;
 80072bc:	e052      	b.n	8007364 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2206      	movs	r2, #6
 80072c2:	705a      	strb	r2, [r3, #1]
      break;
 80072c4:	e04e      	b.n	8007364 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d019      	beq.n	8007304 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072dc:	23ff      	movs	r3, #255	; 0xff
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f926 	bl	8007530 <USBH_Get_StringDesc>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2207      	movs	r2, #7
 80072f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072f4:	e038      	b.n	8007368 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d135      	bne.n	8007368 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2207      	movs	r2, #7
 8007300:	705a      	strb	r2, [r3, #1]
      break;
 8007302:	e031      	b.n	8007368 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2207      	movs	r2, #7
 8007308:	705a      	strb	r2, [r3, #1]
      break;
 800730a:	e02d      	b.n	8007368 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007312:	2b00      	cmp	r3, #0
 8007314:	d017      	beq.n	8007346 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007322:	23ff      	movs	r3, #255	; 0xff
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f903 	bl	8007530 <USBH_Get_StringDesc>
 800732a:	4603      	mov	r3, r0
 800732c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d102      	bne.n	800733a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007338:	e018      	b.n	800736c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d115      	bne.n	800736c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]
      break;
 8007344:	e012      	b.n	800736c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
      break;
 800734a:	e00f      	b.n	800736c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800734c:	bf00      	nop
 800734e:	e00e      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007350:	bf00      	nop
 8007352:	e00c      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007354:	bf00      	nop
 8007356:	e00a      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007358:	bf00      	nop
 800735a:	e008      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 800735c:	bf00      	nop
 800735e:	e006      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007360:	bf00      	nop
 8007362:	e004      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007364:	bf00      	nop
 8007366:	e002      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007368:	bf00      	nop
 800736a:	e000      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 800736c:	bf00      	nop
  }
  return Status;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f804 	bl	80073ba <USBH_HandleSof>
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b0b      	cmp	r3, #11
 80073ca:	d10a      	bne.n	80073e2 <USBH_HandleSof+0x28>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
  }
}
 80073e2:	bf00      	nop
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80073fa:	bf00      	nop
}
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007416:	bf00      	nop
}
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 f844 	bl	80084fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	791b      	ldrb	r3, [r3, #4]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fe91 	bl	80081a4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	795b      	ldrb	r3, [r3, #5]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fe8b 	bl	80081a4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af02      	add	r7, sp, #8
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	4613      	mov	r3, r2
 80074b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f864 	bl	8007586 <USBH_GetDescriptor>
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f203 3026 	addw	r0, r3, #806	; 0x326
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	b292      	uxth	r2, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	f000 f918 	bl	800770e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	331c      	adds	r3, #28
 80074f8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80074fa:	887b      	ldrh	r3, [r7, #2]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007504:	2100      	movs	r1, #0
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f83d 	bl	8007586 <USBH_GetDescriptor>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d107      	bne.n	8007526 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007516:	887b      	ldrh	r3, [r7, #2]
 8007518:	461a      	mov	r2, r3
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f987 	bl	8007830 <USBH_ParseCfgDesc>
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	461a      	mov	r2, r3
 800753c:	460b      	mov	r3, r1
 800753e:	72fb      	strb	r3, [r7, #11]
 8007540:	4613      	mov	r3, r2
 8007542:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	b29b      	uxth	r3, r3
 8007548:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800754c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007554:	893b      	ldrh	r3, [r7, #8]
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	460b      	mov	r3, r1
 800755a:	2100      	movs	r1, #0
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f812 	bl	8007586 <USBH_GetDescriptor>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d107      	bne.n	800757c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007572:	893a      	ldrh	r2, [r7, #8]
 8007574:	6879      	ldr	r1, [r7, #4]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fb24 	bl	8007bc4 <USBH_ParseStringDesc>
  }

  return status;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	607b      	str	r3, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	72fb      	strb	r3, [r7, #11]
 8007594:	4613      	mov	r3, r2
 8007596:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	789b      	ldrb	r3, [r3, #2]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d11c      	bne.n	80075da <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2206      	movs	r2, #6
 80075b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	893a      	ldrh	r2, [r7, #8]
 80075b6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075b8:	893b      	ldrh	r3, [r7, #8]
 80075ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c2:	d104      	bne.n	80075ce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f240 4209 	movw	r2, #1033	; 0x409
 80075ca:	829a      	strh	r2, [r3, #20]
 80075cc:	e002      	b.n	80075d4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8b3a      	ldrh	r2, [r7, #24]
 80075d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075da:	8b3b      	ldrh	r3, [r7, #24]
 80075dc:	461a      	mov	r2, r3
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fb3d 	bl	8007c60 <USBH_CtlReq>
 80075e6:	4603      	mov	r3, r0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	789b      	ldrb	r3, [r3, #2]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d10f      	bne.n	8007624 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2205      	movs	r2, #5
 800760e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	b29a      	uxth	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007624:	2200      	movs	r2, #0
 8007626:	2100      	movs	r1, #0
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fb19 	bl	8007c60 <USBH_CtlReq>
 800762e:	4603      	mov	r3, r0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	789b      	ldrb	r3, [r3, #2]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d10e      	bne.n	800766a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2209      	movs	r2, #9
 8007656:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800766a:	2200      	movs	r2, #0
 800766c:	2100      	movs	r1, #0
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 faf6 	bl	8007c60 <USBH_CtlReq>
 8007674:	4603      	mov	r3, r0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	789b      	ldrb	r3, [r3, #2]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d10f      	bne.n	80076b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2203      	movs	r2, #3
 800769c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fad2 	bl	8007c60 <USBH_CtlReq>
 80076bc:	4603      	mov	r3, r0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	789b      	ldrb	r3, [r3, #2]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d10f      	bne.n	80076fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2202      	movs	r2, #2
 80076de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076ec:	78fb      	ldrb	r3, [r7, #3]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2100      	movs	r1, #0
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 faae 	bl	8007c60 <USBH_CtlReq>
 8007704:	4603      	mov	r3, r0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	4613      	mov	r3, r2
 800771a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	781a      	ldrb	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	785a      	ldrb	r2, [r3, #1]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	3302      	adds	r3, #2
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	b29a      	uxth	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	3303      	adds	r3, #3
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	b29b      	uxth	r3, r3
 8007740:	4313      	orrs	r3, r2
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	791a      	ldrb	r2, [r3, #4]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	795a      	ldrb	r2, [r3, #5]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	799a      	ldrb	r2, [r3, #6]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	79da      	ldrb	r2, [r3, #7]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	79db      	ldrb	r3, [r3, #7]
 800776c:	2b20      	cmp	r3, #32
 800776e:	dc11      	bgt.n	8007794 <USBH_ParseDevDesc+0x86>
 8007770:	2b08      	cmp	r3, #8
 8007772:	db16      	blt.n	80077a2 <USBH_ParseDevDesc+0x94>
 8007774:	3b08      	subs	r3, #8
 8007776:	2201      	movs	r2, #1
 8007778:	fa02 f303 	lsl.w	r3, r2, r3
 800777c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007784:	2b00      	cmp	r3, #0
 8007786:	bf14      	ite	ne
 8007788:	2301      	movne	r3, #1
 800778a:	2300      	moveq	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d102      	bne.n	8007798 <USBH_ParseDevDesc+0x8a>
 8007792:	e006      	b.n	80077a2 <USBH_ParseDevDesc+0x94>
 8007794:	2b40      	cmp	r3, #64	; 0x40
 8007796:	d104      	bne.n	80077a2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	79da      	ldrb	r2, [r3, #7]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	71da      	strb	r2, [r3, #7]
      break;
 80077a0:	e003      	b.n	80077aa <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2240      	movs	r2, #64	; 0x40
 80077a6:	71da      	strb	r2, [r3, #7]
      break;
 80077a8:	bf00      	nop
  }

  if (length > 8U)
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d939      	bls.n	8007824 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	3308      	adds	r3, #8
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3309      	adds	r3, #9
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	330a      	adds	r3, #10
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	330b      	adds	r3, #11
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4313      	orrs	r3, r2
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	330c      	adds	r3, #12
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	330d      	adds	r3, #13
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	4313      	orrs	r3, r2
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	7b9a      	ldrb	r2, [r3, #14]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	7bda      	ldrb	r2, [r3, #15]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	7c1a      	ldrb	r2, [r3, #16]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	7c5a      	ldrb	r2, [r3, #17]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	745a      	strb	r2, [r3, #17]
  }
}
 8007824:	bf00      	nop
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08c      	sub	sp, #48	; 0x30
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007844:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	781a      	ldrb	r2, [r3, #0]
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	785a      	ldrb	r2, [r3, #1]
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	3302      	adds	r3, #2
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	b29a      	uxth	r2, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	3303      	adds	r3, #3
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	b29b      	uxth	r3, r3
 8007884:	4313      	orrs	r3, r2
 8007886:	b29b      	uxth	r3, r3
 8007888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788c:	bf28      	it	cs
 800788e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007892:	b29a      	uxth	r2, r3
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	791a      	ldrb	r2, [r3, #4]
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	795a      	ldrb	r2, [r3, #5]
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	799a      	ldrb	r2, [r3, #6]
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	79da      	ldrb	r2, [r3, #7]
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	7a1a      	ldrb	r2, [r3, #8]
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	d002      	beq.n	80078ce <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	2209      	movs	r2, #9
 80078cc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	2b09      	cmp	r3, #9
 80078d2:	f240 809d 	bls.w	8007a10 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80078d6:	2309      	movs	r3, #9
 80078d8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078de:	e081      	b.n	80079e4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078e0:	f107 0316 	add.w	r3, r7, #22
 80078e4:	4619      	mov	r1, r3
 80078e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e8:	f000 f99f 	bl	8007c2a <USBH_GetNextDesc>
 80078ec:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d176      	bne.n	80079e4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b09      	cmp	r3, #9
 80078fc:	d002      	beq.n	8007904 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	2209      	movs	r2, #9
 8007902:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007908:	221a      	movs	r2, #26
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	3308      	adds	r3, #8
 8007910:	6a3a      	ldr	r2, [r7, #32]
 8007912:	4413      	add	r3, r2
 8007914:	3302      	adds	r3, #2
 8007916:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800791a:	69f8      	ldr	r0, [r7, #28]
 800791c:	f000 f87e 	bl	8007a1c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800792a:	e043      	b.n	80079b4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800792c:	f107 0316 	add.w	r3, r7, #22
 8007930:	4619      	mov	r1, r3
 8007932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007934:	f000 f979 	bl	8007c2a <USBH_GetNextDesc>
 8007938:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2b05      	cmp	r3, #5
 8007940:	d138      	bne.n	80079b4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	795b      	ldrb	r3, [r3, #5]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d10f      	bne.n	800796a <USBH_ParseCfgDesc+0x13a>
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	799b      	ldrb	r3, [r3, #6]
 800794e:	2b02      	cmp	r3, #2
 8007950:	d10b      	bne.n	800796a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	79db      	ldrb	r3, [r3, #7]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10f      	bne.n	800797a <USBH_ParseCfgDesc+0x14a>
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b09      	cmp	r3, #9
 8007960:	d00b      	beq.n	800797a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	2209      	movs	r2, #9
 8007966:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007968:	e007      	b.n	800797a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b07      	cmp	r3, #7
 8007970:	d004      	beq.n	800797c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	2207      	movs	r2, #7
 8007976:	701a      	strb	r2, [r3, #0]
 8007978:	e000      	b.n	800797c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800797a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800797c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007980:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007984:	3201      	adds	r2, #1
 8007986:	00d2      	lsls	r2, r2, #3
 8007988:	211a      	movs	r1, #26
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	4413      	add	r3, r2
 8007990:	3308      	adds	r3, #8
 8007992:	6a3a      	ldr	r2, [r7, #32]
 8007994:	4413      	add	r3, r2
 8007996:	3304      	adds	r3, #4
 8007998:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800799a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800799c:	69b9      	ldr	r1, [r7, #24]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f86b 	bl	8007a7a <USBH_ParseEPDesc>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80079aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079ae:	3301      	adds	r3, #1
 80079b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	791b      	ldrb	r3, [r3, #4]
 80079b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079bc:	429a      	cmp	r2, r3
 80079be:	d204      	bcs.n	80079ca <USBH_ParseCfgDesc+0x19a>
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	885a      	ldrh	r2, [r3, #2]
 80079c4:	8afb      	ldrh	r3, [r7, #22]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d8b0      	bhi.n	800792c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	791b      	ldrb	r3, [r3, #4]
 80079ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d201      	bcs.n	80079da <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e01c      	b.n	8007a14 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80079da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079de:	3301      	adds	r3, #1
 80079e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d805      	bhi.n	80079f8 <USBH_ParseCfgDesc+0x1c8>
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	885a      	ldrh	r2, [r3, #2]
 80079f0:	8afb      	ldrh	r3, [r7, #22]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	f63f af74 	bhi.w	80078e0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	791b      	ldrb	r3, [r3, #4]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	bf28      	it	cs
 8007a00:	2302      	movcs	r3, #2
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d201      	bcs.n	8007a10 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e001      	b.n	8007a14 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3730      	adds	r7, #48	; 0x30
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781a      	ldrb	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	785a      	ldrb	r2, [r3, #1]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	789a      	ldrb	r2, [r3, #2]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	78da      	ldrb	r2, [r3, #3]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	791a      	ldrb	r2, [r3, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	795a      	ldrb	r2, [r3, #5]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	799a      	ldrb	r2, [r3, #6]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	79da      	ldrb	r2, [r3, #7]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	7a1a      	ldrb	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	721a      	strb	r2, [r3, #8]
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b087      	sub	sp, #28
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	781a      	ldrb	r2, [r3, #0]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	785a      	ldrb	r2, [r3, #1]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	789a      	ldrb	r2, [r3, #2]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	78da      	ldrb	r2, [r3, #3]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3304      	adds	r3, #4
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3305      	adds	r3, #5
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	799a      	ldrb	r2, [r3, #6]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	889b      	ldrh	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d102      	bne.n	8007adc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	75fb      	strb	r3, [r7, #23]
 8007ada:	e033      	b.n	8007b44 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	889b      	ldrh	r3, [r3, #4]
 8007ae0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ae4:	f023 0307 	bic.w	r3, r3, #7
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	889b      	ldrh	r3, [r3, #4]
 8007af2:	b21a      	sxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3304      	adds	r3, #4
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	b299      	uxth	r1, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3305      	adds	r3, #5
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d110      	bne.n	8007b36 <USBH_ParseEPDesc+0xbc>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b299      	uxth	r1, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3305      	adds	r3, #5
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	b21b      	sxth	r3, r3
 8007b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b32:	b21b      	sxth	r3, r3
 8007b34:	e001      	b.n	8007b3a <USBH_ParseEPDesc+0xc0>
 8007b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	b21b      	sxth	r3, r3
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d116      	bne.n	8007b7c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d005      	beq.n	8007b66 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	78db      	ldrb	r3, [r3, #3]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d127      	bne.n	8007bb6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	799b      	ldrb	r3, [r3, #6]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <USBH_ParseEPDesc+0xfc>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	799b      	ldrb	r3, [r3, #6]
 8007b72:	2b10      	cmp	r3, #16
 8007b74:	d91f      	bls.n	8007bb6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b76:	2303      	movs	r3, #3
 8007b78:	75fb      	strb	r3, [r7, #23]
 8007b7a:	e01c      	b.n	8007bb6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	78db      	ldrb	r3, [r3, #3]
 8007b80:	f003 0303 	and.w	r3, r3, #3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d10a      	bne.n	8007b9e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	799b      	ldrb	r3, [r3, #6]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <USBH_ParseEPDesc+0x11e>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	799b      	ldrb	r3, [r3, #6]
 8007b94:	2b10      	cmp	r3, #16
 8007b96:	d90e      	bls.n	8007bb6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	75fb      	strb	r3, [r7, #23]
 8007b9c:	e00b      	b.n	8007bb6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	78db      	ldrb	r3, [r3, #3]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d105      	bne.n	8007bb6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	799b      	ldrb	r3, [r3, #6]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d120      	bne.n	8007c1e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	1e9a      	subs	r2, r3, #2
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	bf28      	it	cs
 8007be8:	4613      	movcs	r3, r2
 8007bea:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3302      	adds	r3, #2
 8007bf0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	82fb      	strh	r3, [r7, #22]
 8007bf6:	e00b      	b.n	8007c10 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007bf8:	8afb      	ldrh	r3, [r7, #22]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	781a      	ldrb	r2, [r3, #0]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	3301      	adds	r3, #1
 8007c08:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c0a:	8afb      	ldrh	r3, [r7, #22]
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	82fb      	strh	r3, [r7, #22]
 8007c10:	8afa      	ldrh	r2, [r7, #22]
 8007c12:	8abb      	ldrh	r3, [r7, #20]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d3ef      	bcc.n	8007bf8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	701a      	strb	r2, [r3, #0]
  }
}
 8007c1e:	bf00      	nop
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	881a      	ldrh	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	4413      	add	r3, r2
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4413      	add	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c52:	68fb      	ldr	r3, [r7, #12]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	789b      	ldrb	r3, [r3, #2]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d002      	beq.n	8007c80 <USBH_CtlReq+0x20>
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d00f      	beq.n	8007c9e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c7e:	e027      	b.n	8007cd0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	88fa      	ldrh	r2, [r7, #6]
 8007c8a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2202      	movs	r2, #2
 8007c96:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9c:	e018      	b.n	8007cd0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f81c 	bl	8007cdc <USBH_HandleControl>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <USBH_CtlReq+0x54>
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d106      	bne.n	8007cc2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	761a      	strb	r2, [r3, #24]
      break;
 8007cc0:	e005      	b.n	8007cce <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d102      	bne.n	8007cce <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	709a      	strb	r2, [r3, #2]
      break;
 8007cce:	bf00      	nop
  }
  return status;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7e1b      	ldrb	r3, [r3, #24]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	2b0a      	cmp	r3, #10
 8007cf4:	f200 8156 	bhi.w	8007fa4 <USBH_HandleControl+0x2c8>
 8007cf8:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <USBH_HandleControl+0x24>)
 8007cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfe:	bf00      	nop
 8007d00:	08007d2d 	.word	0x08007d2d
 8007d04:	08007d47 	.word	0x08007d47
 8007d08:	08007db1 	.word	0x08007db1
 8007d0c:	08007dd7 	.word	0x08007dd7
 8007d10:	08007e0f 	.word	0x08007e0f
 8007d14:	08007e39 	.word	0x08007e39
 8007d18:	08007e8b 	.word	0x08007e8b
 8007d1c:	08007ead 	.word	0x08007ead
 8007d20:	08007ee9 	.word	0x08007ee9
 8007d24:	08007f0f 	.word	0x08007f0f
 8007d28:	08007f4d 	.word	0x08007f4d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f103 0110 	add.w	r1, r3, #16
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	795b      	ldrb	r3, [r3, #5]
 8007d36:	461a      	mov	r2, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f943 	bl	8007fc4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	761a      	strb	r2, [r3, #24]
      break;
 8007d44:	e139      	b.n	8007fba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	795b      	ldrb	r3, [r3, #5]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fcc5 	bl	80086dc <USBH_LL_GetURBState>
 8007d52:	4603      	mov	r3, r0
 8007d54:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d11e      	bne.n	8007d9a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7c1b      	ldrb	r3, [r3, #16]
 8007d60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d64:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8adb      	ldrh	r3, [r3, #22]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d6e:	7b7b      	ldrb	r3, [r7, #13]
 8007d70:	2b80      	cmp	r3, #128	; 0x80
 8007d72:	d103      	bne.n	8007d7c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2203      	movs	r2, #3
 8007d78:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d7a:	e115      	b.n	8007fa8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2205      	movs	r2, #5
 8007d80:	761a      	strb	r2, [r3, #24]
      break;
 8007d82:	e111      	b.n	8007fa8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d84:	7b7b      	ldrb	r3, [r7, #13]
 8007d86:	2b80      	cmp	r3, #128	; 0x80
 8007d88:	d103      	bne.n	8007d92 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2209      	movs	r2, #9
 8007d8e:	761a      	strb	r2, [r3, #24]
      break;
 8007d90:	e10a      	b.n	8007fa8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2207      	movs	r2, #7
 8007d96:	761a      	strb	r2, [r3, #24]
      break;
 8007d98:	e106      	b.n	8007fa8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d003      	beq.n	8007da8 <USBH_HandleControl+0xcc>
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	f040 8100 	bne.w	8007fa8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	220b      	movs	r2, #11
 8007dac:	761a      	strb	r2, [r3, #24]
      break;
 8007dae:	e0fb      	b.n	8007fa8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6899      	ldr	r1, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	899a      	ldrh	r2, [r3, #12]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	791b      	ldrb	r3, [r3, #4]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f93a 	bl	8008042 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	761a      	strb	r2, [r3, #24]
      break;
 8007dd4:	e0f1      	b.n	8007fba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	791b      	ldrb	r3, [r3, #4]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fc7d 	bl	80086dc <USBH_LL_GetURBState>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d102      	bne.n	8007df2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2209      	movs	r2, #9
 8007df0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b05      	cmp	r3, #5
 8007df6:	d102      	bne.n	8007dfe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007dfc:	e0d6      	b.n	8007fac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	f040 80d3 	bne.w	8007fac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	220b      	movs	r2, #11
 8007e0a:	761a      	strb	r2, [r3, #24]
      break;
 8007e0c:	e0ce      	b.n	8007fac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6899      	ldr	r1, [r3, #8]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	899a      	ldrh	r2, [r3, #12]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	795b      	ldrb	r3, [r3, #5]
 8007e1a:	2001      	movs	r0, #1
 8007e1c:	9000      	str	r0, [sp, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f8ea 	bl	8007ff8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2206      	movs	r2, #6
 8007e34:	761a      	strb	r2, [r3, #24]
      break;
 8007e36:	e0c0      	b.n	8007fba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	795b      	ldrb	r3, [r3, #5]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fc4c 	bl	80086dc <USBH_LL_GetURBState>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d103      	bne.n	8007e56 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2207      	movs	r2, #7
 8007e52:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e54:	e0ac      	b.n	8007fb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	d105      	bne.n	8007e68 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	220c      	movs	r2, #12
 8007e60:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e62:	2303      	movs	r3, #3
 8007e64:	73fb      	strb	r3, [r7, #15]
      break;
 8007e66:	e0a3      	b.n	8007fb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d103      	bne.n	8007e76 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2205      	movs	r2, #5
 8007e72:	761a      	strb	r2, [r3, #24]
      break;
 8007e74:	e09c      	b.n	8007fb0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	f040 8099 	bne.w	8007fb0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	220b      	movs	r2, #11
 8007e82:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e84:	2302      	movs	r3, #2
 8007e86:	73fb      	strb	r3, [r7, #15]
      break;
 8007e88:	e092      	b.n	8007fb0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	791b      	ldrb	r3, [r3, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f8d5 	bl	8008042 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2208      	movs	r2, #8
 8007ea8:	761a      	strb	r2, [r3, #24]

      break;
 8007eaa:	e086      	b.n	8007fba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	791b      	ldrb	r3, [r3, #4]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fc12 	bl	80086dc <USBH_LL_GetURBState>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d105      	bne.n	8007ece <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	220d      	movs	r2, #13
 8007ec6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ecc:	e072      	b.n	8007fb4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d103      	bne.n	8007edc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	220b      	movs	r2, #11
 8007ed8:	761a      	strb	r2, [r3, #24]
      break;
 8007eda:	e06b      	b.n	8007fb4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d168      	bne.n	8007fb4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee6:	e065      	b.n	8007fb4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	795b      	ldrb	r3, [r3, #5]
 8007eec:	2201      	movs	r2, #1
 8007eee:	9200      	str	r2, [sp, #0]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f87f 	bl	8007ff8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	220a      	movs	r2, #10
 8007f0a:	761a      	strb	r2, [r3, #24]
      break;
 8007f0c:	e055      	b.n	8007fba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	795b      	ldrb	r3, [r3, #5]
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fbe1 	bl	80086dc <USBH_LL_GetURBState>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d105      	bne.n	8007f30 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	220d      	movs	r2, #13
 8007f2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f2e:	e043      	b.n	8007fb8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d103      	bne.n	8007f3e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2209      	movs	r2, #9
 8007f3a:	761a      	strb	r2, [r3, #24]
      break;
 8007f3c:	e03c      	b.n	8007fb8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d139      	bne.n	8007fb8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	220b      	movs	r2, #11
 8007f48:	761a      	strb	r2, [r3, #24]
      break;
 8007f4a:	e035      	b.n	8007fb8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	7e5b      	ldrb	r3, [r3, #25]
 8007f50:	3301      	adds	r3, #1
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	765a      	strb	r2, [r3, #25]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	7e5b      	ldrb	r3, [r3, #25]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d806      	bhi.n	8007f6e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f6c:	e025      	b.n	8007fba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f74:	2106      	movs	r1, #6
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	795b      	ldrb	r3, [r3, #5]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f90c 	bl	80081a4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	791b      	ldrb	r3, [r3, #4]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f906 	bl	80081a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa2:	e00a      	b.n	8007fba <USBH_HandleControl+0x2de>

    default:
      break;
 8007fa4:	bf00      	nop
 8007fa6:	e008      	b.n	8007fba <USBH_HandleControl+0x2de>
      break;
 8007fa8:	bf00      	nop
 8007faa:	e006      	b.n	8007fba <USBH_HandleControl+0x2de>
      break;
 8007fac:	bf00      	nop
 8007fae:	e004      	b.n	8007fba <USBH_HandleControl+0x2de>
      break;
 8007fb0:	bf00      	nop
 8007fb2:	e002      	b.n	8007fba <USBH_HandleControl+0x2de>
      break;
 8007fb4:	bf00      	nop
 8007fb6:	e000      	b.n	8007fba <USBH_HandleControl+0x2de>
      break;
 8007fb8:	bf00      	nop
  }

  return status;
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af04      	add	r7, sp, #16
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fd2:	79f9      	ldrb	r1, [r7, #7]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	2308      	movs	r3, #8
 8007fda:	9302      	str	r3, [sp, #8]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fb46 	bl	800867a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af04      	add	r7, sp, #16
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4611      	mov	r1, r2
 8008004:	461a      	mov	r2, r3
 8008006:	460b      	mov	r3, r1
 8008008:	80fb      	strh	r3, [r7, #6]
 800800a:	4613      	mov	r3, r2
 800800c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800801c:	7979      	ldrb	r1, [r7, #5]
 800801e:	7e3b      	ldrb	r3, [r7, #24]
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	9302      	str	r3, [sp, #8]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	2301      	movs	r3, #1
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	2300      	movs	r3, #0
 8008030:	2200      	movs	r2, #0
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fb21 	bl	800867a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b088      	sub	sp, #32
 8008046:	af04      	add	r7, sp, #16
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	4611      	mov	r1, r2
 800804e:	461a      	mov	r2, r3
 8008050:	460b      	mov	r3, r1
 8008052:	80fb      	strh	r3, [r7, #6]
 8008054:	4613      	mov	r3, r2
 8008056:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008058:	7979      	ldrb	r1, [r7, #5]
 800805a:	2300      	movs	r3, #0
 800805c:	9303      	str	r3, [sp, #12]
 800805e:	88fb      	ldrh	r3, [r7, #6]
 8008060:	9302      	str	r3, [sp, #8]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	2301      	movs	r3, #1
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	2300      	movs	r3, #0
 800806c:	2201      	movs	r2, #1
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fb03 	bl	800867a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008074:	2300      	movs	r3, #0

}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b088      	sub	sp, #32
 8008082:	af04      	add	r7, sp, #16
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	4611      	mov	r1, r2
 800808a:	461a      	mov	r2, r3
 800808c:	460b      	mov	r3, r1
 800808e:	80fb      	strh	r3, [r7, #6]
 8008090:	4613      	mov	r3, r2
 8008092:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080a2:	7979      	ldrb	r1, [r7, #5]
 80080a4:	7e3b      	ldrb	r3, [r7, #24]
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	9302      	str	r3, [sp, #8]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	2301      	movs	r3, #1
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	2302      	movs	r3, #2
 80080b6:	2200      	movs	r2, #0
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fade 	bl	800867a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b088      	sub	sp, #32
 80080cc:	af04      	add	r7, sp, #16
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4611      	mov	r1, r2
 80080d4:	461a      	mov	r2, r3
 80080d6:	460b      	mov	r3, r1
 80080d8:	80fb      	strh	r3, [r7, #6]
 80080da:	4613      	mov	r3, r2
 80080dc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080de:	7979      	ldrb	r1, [r7, #5]
 80080e0:	2300      	movs	r3, #0
 80080e2:	9303      	str	r3, [sp, #12]
 80080e4:	88fb      	ldrh	r3, [r7, #6]
 80080e6:	9302      	str	r3, [sp, #8]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	2301      	movs	r3, #1
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2302      	movs	r3, #2
 80080f2:	2201      	movs	r2, #1
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 fac0 	bl	800867a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af04      	add	r7, sp, #16
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	4608      	mov	r0, r1
 800810e:	4611      	mov	r1, r2
 8008110:	461a      	mov	r2, r3
 8008112:	4603      	mov	r3, r0
 8008114:	70fb      	strb	r3, [r7, #3]
 8008116:	460b      	mov	r3, r1
 8008118:	70bb      	strb	r3, [r7, #2]
 800811a:	4613      	mov	r3, r2
 800811c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800811e:	7878      	ldrb	r0, [r7, #1]
 8008120:	78ba      	ldrb	r2, [r7, #2]
 8008122:	78f9      	ldrb	r1, [r7, #3]
 8008124:	8b3b      	ldrh	r3, [r7, #24]
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	7d3b      	ldrb	r3, [r7, #20]
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	7c3b      	ldrb	r3, [r7, #16]
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	4603      	mov	r3, r0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fa53 	bl	80085de <USBH_LL_OpenPipe>

  return USBH_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa72 	bl	800863c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f836 	bl	80081e0 <USBH_GetFreePipe>
 8008174:	4603      	mov	r3, r0
 8008176:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008178:	89fb      	ldrh	r3, [r7, #14]
 800817a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800817e:	4293      	cmp	r3, r2
 8008180:	d00a      	beq.n	8008198 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	89fb      	ldrh	r3, [r7, #14]
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	33e0      	adds	r3, #224	; 0xe0
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008198:	89fb      	ldrh	r3, [r7, #14]
 800819a:	b2db      	uxtb	r3, r3
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	2b0f      	cmp	r3, #15
 80081b4:	d80d      	bhi.n	80081d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081b6:	78fb      	ldrb	r3, [r7, #3]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	33e0      	adds	r3, #224	; 0xe0
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081c8:	6879      	ldr	r1, [r7, #4]
 80081ca:	33e0      	adds	r3, #224	; 0xe0
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]
 80081f0:	e00f      	b.n	8008212 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	33e0      	adds	r3, #224	; 0xe0
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	b29b      	uxth	r3, r3
 800820a:	e007      	b.n	800821c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	3301      	adds	r3, #1
 8008210:	73fb      	strb	r3, [r7, #15]
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	2b0f      	cmp	r3, #15
 8008216:	d9ec      	bls.n	80081f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008218:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800822c:	2201      	movs	r2, #1
 800822e:	490e      	ldr	r1, [pc, #56]	; (8008268 <MX_USB_HOST_Init+0x40>)
 8008230:	480e      	ldr	r0, [pc, #56]	; (800826c <MX_USB_HOST_Init+0x44>)
 8008232:	f7fe fba7 	bl	8006984 <USBH_Init>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800823c:	f7f8 fff8 	bl	8001230 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008240:	490b      	ldr	r1, [pc, #44]	; (8008270 <MX_USB_HOST_Init+0x48>)
 8008242:	480a      	ldr	r0, [pc, #40]	; (800826c <MX_USB_HOST_Init+0x44>)
 8008244:	f7fe fc2c 	bl	8006aa0 <USBH_RegisterClass>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800824e:	f7f8 ffef 	bl	8001230 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008252:	4806      	ldr	r0, [pc, #24]	; (800826c <MX_USB_HOST_Init+0x44>)
 8008254:	f7fe fcb0 	bl	8006bb8 <USBH_Start>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800825e:	f7f8 ffe7 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008262:	bf00      	nop
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	08008289 	.word	0x08008289
 800826c:	20000548 	.word	0x20000548
 8008270:	2000000c 	.word	0x2000000c

08008274 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008278:	4802      	ldr	r0, [pc, #8]	; (8008284 <MX_USB_HOST_Process+0x10>)
 800827a:	f7fe fcad 	bl	8006bd8 <USBH_Process>
}
 800827e:	bf00      	nop
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000548 	.word	0x20000548

08008288 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	3b01      	subs	r3, #1
 8008298:	2b04      	cmp	r3, #4
 800829a:	d819      	bhi.n	80082d0 <USBH_UserProcess+0x48>
 800829c:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <USBH_UserProcess+0x1c>)
 800829e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a2:	bf00      	nop
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	080082c1 	.word	0x080082c1
 80082ac:	080082d1 	.word	0x080082d1
 80082b0:	080082c9 	.word	0x080082c9
 80082b4:	080082b9 	.word	0x080082b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <USBH_UserProcess+0x58>)
 80082ba:	2203      	movs	r2, #3
 80082bc:	701a      	strb	r2, [r3, #0]
  break;
 80082be:	e008      	b.n	80082d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082c0:	4b07      	ldr	r3, [pc, #28]	; (80082e0 <USBH_UserProcess+0x58>)
 80082c2:	2202      	movs	r2, #2
 80082c4:	701a      	strb	r2, [r3, #0]
  break;
 80082c6:	e004      	b.n	80082d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <USBH_UserProcess+0x58>)
 80082ca:	2201      	movs	r2, #1
 80082cc:	701a      	strb	r2, [r3, #0]
  break;
 80082ce:	e000      	b.n	80082d2 <USBH_UserProcess+0x4a>

  default:
  break;
 80082d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	200000b0 	.word	0x200000b0

080082e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08a      	sub	sp, #40	; 0x28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	605a      	str	r2, [r3, #4]
 80082f6:	609a      	str	r2, [r3, #8]
 80082f8:	60da      	str	r2, [r3, #12]
 80082fa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008304:	d147      	bne.n	8008396 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008306:	2300      	movs	r3, #0
 8008308:	613b      	str	r3, [r7, #16]
 800830a:	4b25      	ldr	r3, [pc, #148]	; (80083a0 <HAL_HCD_MspInit+0xbc>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	4a24      	ldr	r2, [pc, #144]	; (80083a0 <HAL_HCD_MspInit+0xbc>)
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	6313      	str	r3, [r2, #48]	; 0x30
 8008316:	4b22      	ldr	r3, [pc, #136]	; (80083a0 <HAL_HCD_MspInit+0xbc>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	613b      	str	r3, [r7, #16]
 8008320:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008328:	2300      	movs	r3, #0
 800832a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008330:	f107 0314 	add.w	r3, r7, #20
 8008334:	4619      	mov	r1, r3
 8008336:	481b      	ldr	r0, [pc, #108]	; (80083a4 <HAL_HCD_MspInit+0xc0>)
 8008338:	f7fa f880 	bl	800243c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800833c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008342:	2302      	movs	r3, #2
 8008344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008346:	2300      	movs	r3, #0
 8008348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834a:	2300      	movs	r3, #0
 800834c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800834e:	230a      	movs	r3, #10
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	4619      	mov	r1, r3
 8008358:	4812      	ldr	r0, [pc, #72]	; (80083a4 <HAL_HCD_MspInit+0xc0>)
 800835a:	f7fa f86f 	bl	800243c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800835e:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <HAL_HCD_MspInit+0xbc>)
 8008360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008362:	4a0f      	ldr	r2, [pc, #60]	; (80083a0 <HAL_HCD_MspInit+0xbc>)
 8008364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008368:	6353      	str	r3, [r2, #52]	; 0x34
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <HAL_HCD_MspInit+0xbc>)
 8008370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008372:	4a0b      	ldr	r2, [pc, #44]	; (80083a0 <HAL_HCD_MspInit+0xbc>)
 8008374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008378:	6453      	str	r3, [r2, #68]	; 0x44
 800837a:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <HAL_HCD_MspInit+0xbc>)
 800837c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008386:	2200      	movs	r2, #0
 8008388:	2100      	movs	r1, #0
 800838a:	2043      	movs	r0, #67	; 0x43
 800838c:	f7f9 fac7 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008390:	2043      	movs	r0, #67	; 0x43
 8008392:	f7f9 fae0 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008396:	bf00      	nop
 8008398:	3728      	adds	r7, #40	; 0x28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	40023800 	.word	0x40023800
 80083a4:	40020000 	.word	0x40020000

080083a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe ffed 	bl	8007396 <USBH_LL_IncTimer>
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff f825 	bl	8007422 <USBH_LL_Connect>
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff f82e 	bl	8007450 <USBH_LL_Disconnect>
}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
 8008408:	4613      	mov	r3, r2
 800840a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe ffdf 	bl	80073ea <USBH_LL_PortEnabled>
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe ffdf 	bl	8007406 <USBH_LL_PortDisabled>
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800845e:	2b01      	cmp	r3, #1
 8008460:	d12a      	bne.n	80084b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008462:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <USBH_LL_Init+0x74>)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a15      	ldr	r2, [pc, #84]	; (80084c4 <USBH_LL_Init+0x74>)
 800846e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008472:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <USBH_LL_Init+0x74>)
 8008474:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008478:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800847a:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <USBH_LL_Init+0x74>)
 800847c:	2208      	movs	r2, #8
 800847e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008480:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <USBH_LL_Init+0x74>)
 8008482:	2201      	movs	r2, #1
 8008484:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008486:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <USBH_LL_Init+0x74>)
 8008488:	2200      	movs	r2, #0
 800848a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800848c:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <USBH_LL_Init+0x74>)
 800848e:	2202      	movs	r2, #2
 8008490:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008492:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <USBH_LL_Init+0x74>)
 8008494:	2200      	movs	r2, #0
 8008496:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008498:	480a      	ldr	r0, [pc, #40]	; (80084c4 <USBH_LL_Init+0x74>)
 800849a:	f7fa f984 	bl	80027a6 <HAL_HCD_Init>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084a4:	f7f8 fec4 	bl	8001230 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084a8:	4806      	ldr	r0, [pc, #24]	; (80084c4 <USBH_LL_Init+0x74>)
 80084aa:	f7fa fd68 	bl	8002f7e <HAL_HCD_GetCurrentFrame>
 80084ae:	4603      	mov	r3, r0
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7fe ff60 	bl	8007378 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000920 	.word	0x20000920

080084c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fa fcd7 	bl	8002e92 <HAL_HCD_Start>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f95c 	bl	80087a8 <USBH_Get_USB_Status>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008514:	4618      	mov	r0, r3
 8008516:	f7fa fcdf 	bl	8002ed8 <HAL_HCD_Stop>
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f941 	bl	80087a8 <USBH_Get_USB_Status>
 8008526:	4603      	mov	r3, r0
 8008528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852a:	7bbb      	ldrb	r3, [r7, #14]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008546:	4618      	mov	r0, r3
 8008548:	f7fa fd27 	bl	8002f9a <HAL_HCD_GetCurrentSpeed>
 800854c:	4603      	mov	r3, r0
 800854e:	2b02      	cmp	r3, #2
 8008550:	d00c      	beq.n	800856c <USBH_LL_GetSpeed+0x38>
 8008552:	2b02      	cmp	r3, #2
 8008554:	d80d      	bhi.n	8008572 <USBH_LL_GetSpeed+0x3e>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <USBH_LL_GetSpeed+0x2c>
 800855a:	2b01      	cmp	r3, #1
 800855c:	d003      	beq.n	8008566 <USBH_LL_GetSpeed+0x32>
 800855e:	e008      	b.n	8008572 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
    break;
 8008564:	e008      	b.n	8008578 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008566:	2301      	movs	r3, #1
 8008568:	73fb      	strb	r3, [r7, #15]
    break;
 800856a:	e005      	b.n	8008578 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800856c:	2302      	movs	r3, #2
 800856e:	73fb      	strb	r3, [r7, #15]
    break;
 8008570:	e002      	b.n	8008578 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008572:	2301      	movs	r3, #1
 8008574:	73fb      	strb	r3, [r7, #15]
    break;
 8008576:	bf00      	nop
  }
  return  speed;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008598:	4618      	mov	r0, r3
 800859a:	f7fa fcba 	bl	8002f12 <HAL_HCD_ResetPort>
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 f8ff 	bl	80087a8 <USBH_Get_USB_Status>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fa fcc1 	bl	8002f56 <HAL_HCD_HC_GetXferCount>
 80085d4:	4603      	mov	r3, r0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085de:	b590      	push	{r4, r7, lr}
 80085e0:	b089      	sub	sp, #36	; 0x24
 80085e2:	af04      	add	r7, sp, #16
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	4608      	mov	r0, r1
 80085e8:	4611      	mov	r1, r2
 80085ea:	461a      	mov	r2, r3
 80085ec:	4603      	mov	r3, r0
 80085ee:	70fb      	strb	r3, [r7, #3]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70bb      	strb	r3, [r7, #2]
 80085f4:	4613      	mov	r3, r2
 80085f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008606:	787c      	ldrb	r4, [r7, #1]
 8008608:	78ba      	ldrb	r2, [r7, #2]
 800860a:	78f9      	ldrb	r1, [r7, #3]
 800860c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800860e:	9302      	str	r3, [sp, #8]
 8008610:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	f897 3020 	ldrb.w	r3, [r7, #32]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4623      	mov	r3, r4
 800861e:	f7fa f924 	bl	800286a <HAL_HCD_HC_Init>
 8008622:	4603      	mov	r3, r0
 8008624:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f8bd 	bl	80087a8 <USBH_Get_USB_Status>
 800862e:	4603      	mov	r3, r0
 8008630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008632:	7bbb      	ldrb	r3, [r7, #14]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	bd90      	pop	{r4, r7, pc}

0800863c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008656:	78fa      	ldrb	r2, [r7, #3]
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7fa f994 	bl	8002988 <HAL_HCD_HC_Halt>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f89e 	bl	80087a8 <USBH_Get_USB_Status>
 800866c:	4603      	mov	r3, r0
 800866e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008670:	7bbb      	ldrb	r3, [r7, #14]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800867a:	b590      	push	{r4, r7, lr}
 800867c:	b089      	sub	sp, #36	; 0x24
 800867e:	af04      	add	r7, sp, #16
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	4608      	mov	r0, r1
 8008684:	4611      	mov	r1, r2
 8008686:	461a      	mov	r2, r3
 8008688:	4603      	mov	r3, r0
 800868a:	70fb      	strb	r3, [r7, #3]
 800868c:	460b      	mov	r3, r1
 800868e:	70bb      	strb	r3, [r7, #2]
 8008690:	4613      	mov	r3, r2
 8008692:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086a2:	787c      	ldrb	r4, [r7, #1]
 80086a4:	78ba      	ldrb	r2, [r7, #2]
 80086a6:	78f9      	ldrb	r1, [r7, #3]
 80086a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086ac:	9303      	str	r3, [sp, #12]
 80086ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086b0:	9302      	str	r3, [sp, #8]
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	4623      	mov	r3, r4
 80086be:	f7fa f987 	bl	80029d0 <HAL_HCD_HC_SubmitRequest>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 f86d 	bl	80087a8 <USBH_Get_USB_Status>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd90      	pop	{r4, r7, pc}

080086dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	4611      	mov	r1, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fa fc1b 	bl	8002f2e <HAL_HCD_HC_GetURBState>
 80086f8:	4603      	mov	r3, r0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008714:	2b01      	cmp	r3, #1
 8008716:	d103      	bne.n	8008720 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f870 	bl	8008800 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008720:	20c8      	movs	r0, #200	; 0xc8
 8008722:	f7f8 fffd 	bl	8001720 <HAL_Delay>
  return USBH_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
 800873c:	4613      	mov	r3, r2
 800873e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008746:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	212c      	movs	r1, #44	; 0x2c
 800874e:	fb01 f303 	mul.w	r3, r1, r3
 8008752:	4413      	add	r3, r2
 8008754:	333b      	adds	r3, #59	; 0x3b
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d009      	beq.n	8008770 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	212c      	movs	r1, #44	; 0x2c
 8008762:	fb01 f303 	mul.w	r3, r1, r3
 8008766:	4413      	add	r3, r2
 8008768:	3354      	adds	r3, #84	; 0x54
 800876a:	78ba      	ldrb	r2, [r7, #2]
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e008      	b.n	8008782 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	212c      	movs	r1, #44	; 0x2c
 8008776:	fb01 f303 	mul.w	r3, r1, r3
 800877a:	4413      	add	r3, r2
 800877c:	3355      	adds	r3, #85	; 0x55
 800877e:	78ba      	ldrb	r2, [r7, #2]
 8008780:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7f8 ffc1 	bl	8001720 <HAL_Delay>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d817      	bhi.n	80087ec <USBH_Get_USB_Status+0x44>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <USBH_Get_USB_Status+0x1c>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087d5 	.word	0x080087d5
 80087c8:	080087db 	.word	0x080087db
 80087cc:	080087e1 	.word	0x080087e1
 80087d0:	080087e7 	.word	0x080087e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73fb      	strb	r3, [r7, #15]
    break;
 80087d8:	e00b      	b.n	80087f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087da:	2302      	movs	r3, #2
 80087dc:	73fb      	strb	r3, [r7, #15]
    break;
 80087de:	e008      	b.n	80087f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80087e0:	2301      	movs	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
    break;
 80087e4:	e005      	b.n	80087f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80087e6:	2302      	movs	r3, #2
 80087e8:	73fb      	strb	r3, [r7, #15]
    break;
 80087ea:	e002      	b.n	80087f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80087ec:	2302      	movs	r3, #2
 80087ee:	73fb      	strb	r3, [r7, #15]
    break;
 80087f0:	bf00      	nop
  }
  return usb_status;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800880a:	79fb      	ldrb	r3, [r7, #7]
 800880c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d102      	bne.n	800881a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
 8008818:	e001      	b.n	800881e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	461a      	mov	r2, r3
 8008822:	2101      	movs	r1, #1
 8008824:	4803      	ldr	r0, [pc, #12]	; (8008834 <MX_DriverVbusFS+0x34>)
 8008826:	f7f9 ffa5 	bl	8002774 <HAL_GPIO_WritePin>
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40020800 	.word	0x40020800

08008838 <__errno>:
 8008838:	4b01      	ldr	r3, [pc, #4]	; (8008840 <__errno+0x8>)
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	2000002c 	.word	0x2000002c

08008844 <__libc_init_array>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	4d0d      	ldr	r5, [pc, #52]	; (800887c <__libc_init_array+0x38>)
 8008848:	4c0d      	ldr	r4, [pc, #52]	; (8008880 <__libc_init_array+0x3c>)
 800884a:	1b64      	subs	r4, r4, r5
 800884c:	10a4      	asrs	r4, r4, #2
 800884e:	2600      	movs	r6, #0
 8008850:	42a6      	cmp	r6, r4
 8008852:	d109      	bne.n	8008868 <__libc_init_array+0x24>
 8008854:	4d0b      	ldr	r5, [pc, #44]	; (8008884 <__libc_init_array+0x40>)
 8008856:	4c0c      	ldr	r4, [pc, #48]	; (8008888 <__libc_init_array+0x44>)
 8008858:	f000 f8f8 	bl	8008a4c <_init>
 800885c:	1b64      	subs	r4, r4, r5
 800885e:	10a4      	asrs	r4, r4, #2
 8008860:	2600      	movs	r6, #0
 8008862:	42a6      	cmp	r6, r4
 8008864:	d105      	bne.n	8008872 <__libc_init_array+0x2e>
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	f855 3b04 	ldr.w	r3, [r5], #4
 800886c:	4798      	blx	r3
 800886e:	3601      	adds	r6, #1
 8008870:	e7ee      	b.n	8008850 <__libc_init_array+0xc>
 8008872:	f855 3b04 	ldr.w	r3, [r5], #4
 8008876:	4798      	blx	r3
 8008878:	3601      	adds	r6, #1
 800887a:	e7f2      	b.n	8008862 <__libc_init_array+0x1e>
 800887c:	08008a90 	.word	0x08008a90
 8008880:	08008a90 	.word	0x08008a90
 8008884:	08008a90 	.word	0x08008a90
 8008888:	08008a94 	.word	0x08008a94

0800888c <malloc>:
 800888c:	4b02      	ldr	r3, [pc, #8]	; (8008898 <malloc+0xc>)
 800888e:	4601      	mov	r1, r0
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	f000 b863 	b.w	800895c <_malloc_r>
 8008896:	bf00      	nop
 8008898:	2000002c 	.word	0x2000002c

0800889c <free>:
 800889c:	4b02      	ldr	r3, [pc, #8]	; (80088a8 <free+0xc>)
 800889e:	4601      	mov	r1, r0
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	f000 b80b 	b.w	80088bc <_free_r>
 80088a6:	bf00      	nop
 80088a8:	2000002c 	.word	0x2000002c

080088ac <memset>:
 80088ac:	4402      	add	r2, r0
 80088ae:	4603      	mov	r3, r0
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d100      	bne.n	80088b6 <memset+0xa>
 80088b4:	4770      	bx	lr
 80088b6:	f803 1b01 	strb.w	r1, [r3], #1
 80088ba:	e7f9      	b.n	80088b0 <memset+0x4>

080088bc <_free_r>:
 80088bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088be:	2900      	cmp	r1, #0
 80088c0:	d048      	beq.n	8008954 <_free_r+0x98>
 80088c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c6:	9001      	str	r0, [sp, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f1a1 0404 	sub.w	r4, r1, #4
 80088ce:	bfb8      	it	lt
 80088d0:	18e4      	addlt	r4, r4, r3
 80088d2:	f000 f8ad 	bl	8008a30 <__malloc_lock>
 80088d6:	4a20      	ldr	r2, [pc, #128]	; (8008958 <_free_r+0x9c>)
 80088d8:	9801      	ldr	r0, [sp, #4]
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	4615      	mov	r5, r2
 80088de:	b933      	cbnz	r3, 80088ee <_free_r+0x32>
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	6014      	str	r4, [r2, #0]
 80088e4:	b003      	add	sp, #12
 80088e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088ea:	f000 b8a7 	b.w	8008a3c <__malloc_unlock>
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	d90b      	bls.n	800890a <_free_r+0x4e>
 80088f2:	6821      	ldr	r1, [r4, #0]
 80088f4:	1862      	adds	r2, r4, r1
 80088f6:	4293      	cmp	r3, r2
 80088f8:	bf04      	itt	eq
 80088fa:	681a      	ldreq	r2, [r3, #0]
 80088fc:	685b      	ldreq	r3, [r3, #4]
 80088fe:	6063      	str	r3, [r4, #4]
 8008900:	bf04      	itt	eq
 8008902:	1852      	addeq	r2, r2, r1
 8008904:	6022      	streq	r2, [r4, #0]
 8008906:	602c      	str	r4, [r5, #0]
 8008908:	e7ec      	b.n	80088e4 <_free_r+0x28>
 800890a:	461a      	mov	r2, r3
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	b10b      	cbz	r3, 8008914 <_free_r+0x58>
 8008910:	42a3      	cmp	r3, r4
 8008912:	d9fa      	bls.n	800890a <_free_r+0x4e>
 8008914:	6811      	ldr	r1, [r2, #0]
 8008916:	1855      	adds	r5, r2, r1
 8008918:	42a5      	cmp	r5, r4
 800891a:	d10b      	bne.n	8008934 <_free_r+0x78>
 800891c:	6824      	ldr	r4, [r4, #0]
 800891e:	4421      	add	r1, r4
 8008920:	1854      	adds	r4, r2, r1
 8008922:	42a3      	cmp	r3, r4
 8008924:	6011      	str	r1, [r2, #0]
 8008926:	d1dd      	bne.n	80088e4 <_free_r+0x28>
 8008928:	681c      	ldr	r4, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	6053      	str	r3, [r2, #4]
 800892e:	4421      	add	r1, r4
 8008930:	6011      	str	r1, [r2, #0]
 8008932:	e7d7      	b.n	80088e4 <_free_r+0x28>
 8008934:	d902      	bls.n	800893c <_free_r+0x80>
 8008936:	230c      	movs	r3, #12
 8008938:	6003      	str	r3, [r0, #0]
 800893a:	e7d3      	b.n	80088e4 <_free_r+0x28>
 800893c:	6825      	ldr	r5, [r4, #0]
 800893e:	1961      	adds	r1, r4, r5
 8008940:	428b      	cmp	r3, r1
 8008942:	bf04      	itt	eq
 8008944:	6819      	ldreq	r1, [r3, #0]
 8008946:	685b      	ldreq	r3, [r3, #4]
 8008948:	6063      	str	r3, [r4, #4]
 800894a:	bf04      	itt	eq
 800894c:	1949      	addeq	r1, r1, r5
 800894e:	6021      	streq	r1, [r4, #0]
 8008950:	6054      	str	r4, [r2, #4]
 8008952:	e7c7      	b.n	80088e4 <_free_r+0x28>
 8008954:	b003      	add	sp, #12
 8008956:	bd30      	pop	{r4, r5, pc}
 8008958:	200000b4 	.word	0x200000b4

0800895c <_malloc_r>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	1ccd      	adds	r5, r1, #3
 8008960:	f025 0503 	bic.w	r5, r5, #3
 8008964:	3508      	adds	r5, #8
 8008966:	2d0c      	cmp	r5, #12
 8008968:	bf38      	it	cc
 800896a:	250c      	movcc	r5, #12
 800896c:	2d00      	cmp	r5, #0
 800896e:	4606      	mov	r6, r0
 8008970:	db01      	blt.n	8008976 <_malloc_r+0x1a>
 8008972:	42a9      	cmp	r1, r5
 8008974:	d903      	bls.n	800897e <_malloc_r+0x22>
 8008976:	230c      	movs	r3, #12
 8008978:	6033      	str	r3, [r6, #0]
 800897a:	2000      	movs	r0, #0
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897e:	f000 f857 	bl	8008a30 <__malloc_lock>
 8008982:	4921      	ldr	r1, [pc, #132]	; (8008a08 <_malloc_r+0xac>)
 8008984:	680a      	ldr	r2, [r1, #0]
 8008986:	4614      	mov	r4, r2
 8008988:	b99c      	cbnz	r4, 80089b2 <_malloc_r+0x56>
 800898a:	4f20      	ldr	r7, [pc, #128]	; (8008a0c <_malloc_r+0xb0>)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	b923      	cbnz	r3, 800899a <_malloc_r+0x3e>
 8008990:	4621      	mov	r1, r4
 8008992:	4630      	mov	r0, r6
 8008994:	f000 f83c 	bl	8008a10 <_sbrk_r>
 8008998:	6038      	str	r0, [r7, #0]
 800899a:	4629      	mov	r1, r5
 800899c:	4630      	mov	r0, r6
 800899e:	f000 f837 	bl	8008a10 <_sbrk_r>
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	d123      	bne.n	80089ee <_malloc_r+0x92>
 80089a6:	230c      	movs	r3, #12
 80089a8:	6033      	str	r3, [r6, #0]
 80089aa:	4630      	mov	r0, r6
 80089ac:	f000 f846 	bl	8008a3c <__malloc_unlock>
 80089b0:	e7e3      	b.n	800897a <_malloc_r+0x1e>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	1b5b      	subs	r3, r3, r5
 80089b6:	d417      	bmi.n	80089e8 <_malloc_r+0x8c>
 80089b8:	2b0b      	cmp	r3, #11
 80089ba:	d903      	bls.n	80089c4 <_malloc_r+0x68>
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	441c      	add	r4, r3
 80089c0:	6025      	str	r5, [r4, #0]
 80089c2:	e004      	b.n	80089ce <_malloc_r+0x72>
 80089c4:	6863      	ldr	r3, [r4, #4]
 80089c6:	42a2      	cmp	r2, r4
 80089c8:	bf0c      	ite	eq
 80089ca:	600b      	streq	r3, [r1, #0]
 80089cc:	6053      	strne	r3, [r2, #4]
 80089ce:	4630      	mov	r0, r6
 80089d0:	f000 f834 	bl	8008a3c <__malloc_unlock>
 80089d4:	f104 000b 	add.w	r0, r4, #11
 80089d8:	1d23      	adds	r3, r4, #4
 80089da:	f020 0007 	bic.w	r0, r0, #7
 80089de:	1ac2      	subs	r2, r0, r3
 80089e0:	d0cc      	beq.n	800897c <_malloc_r+0x20>
 80089e2:	1a1b      	subs	r3, r3, r0
 80089e4:	50a3      	str	r3, [r4, r2]
 80089e6:	e7c9      	b.n	800897c <_malloc_r+0x20>
 80089e8:	4622      	mov	r2, r4
 80089ea:	6864      	ldr	r4, [r4, #4]
 80089ec:	e7cc      	b.n	8008988 <_malloc_r+0x2c>
 80089ee:	1cc4      	adds	r4, r0, #3
 80089f0:	f024 0403 	bic.w	r4, r4, #3
 80089f4:	42a0      	cmp	r0, r4
 80089f6:	d0e3      	beq.n	80089c0 <_malloc_r+0x64>
 80089f8:	1a21      	subs	r1, r4, r0
 80089fa:	4630      	mov	r0, r6
 80089fc:	f000 f808 	bl	8008a10 <_sbrk_r>
 8008a00:	3001      	adds	r0, #1
 8008a02:	d1dd      	bne.n	80089c0 <_malloc_r+0x64>
 8008a04:	e7cf      	b.n	80089a6 <_malloc_r+0x4a>
 8008a06:	bf00      	nop
 8008a08:	200000b4 	.word	0x200000b4
 8008a0c:	200000b8 	.word	0x200000b8

08008a10 <_sbrk_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d06      	ldr	r5, [pc, #24]	; (8008a2c <_sbrk_r+0x1c>)
 8008a14:	2300      	movs	r3, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	f7f8 fd9c 	bl	8001558 <_sbrk>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_sbrk_r+0x1a>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_sbrk_r+0x1a>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	20000c24 	.word	0x20000c24

08008a30 <__malloc_lock>:
 8008a30:	4801      	ldr	r0, [pc, #4]	; (8008a38 <__malloc_lock+0x8>)
 8008a32:	f000 b809 	b.w	8008a48 <__retarget_lock_acquire_recursive>
 8008a36:	bf00      	nop
 8008a38:	20000c2c 	.word	0x20000c2c

08008a3c <__malloc_unlock>:
 8008a3c:	4801      	ldr	r0, [pc, #4]	; (8008a44 <__malloc_unlock+0x8>)
 8008a3e:	f000 b804 	b.w	8008a4a <__retarget_lock_release_recursive>
 8008a42:	bf00      	nop
 8008a44:	20000c2c 	.word	0x20000c2c

08008a48 <__retarget_lock_acquire_recursive>:
 8008a48:	4770      	bx	lr

08008a4a <__retarget_lock_release_recursive>:
 8008a4a:	4770      	bx	lr

08008a4c <_init>:
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4e:	bf00      	nop
 8008a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a52:	bc08      	pop	{r3}
 8008a54:	469e      	mov	lr, r3
 8008a56:	4770      	bx	lr

08008a58 <_fini>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	bf00      	nop
 8008a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5e:	bc08      	pop	{r3}
 8008a60:	469e      	mov	lr, r3
 8008a62:	4770      	bx	lr
